{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"binja_integration/","title":"Integrating Binary Ninja with pwndbg","text":""},{"location":"binja_integration/#requirements","title":"Requirements","text":"<p>You need at least the personal edition of Binary Ninja (only tested on version 4.0+) that runs at least Python 3.10 for plugins.</p>"},{"location":"binja_integration/#setup","title":"Setup","text":"<p>Copy (or symlink) <code>binja_script.py</code> to your plugins directory.</p>"},{"location":"binja_integration/#usage","title":"Usage","text":"<p>To start the Binary Ninja integration, open the binary you want to debug in Binary Ninja, then go to <code>Plugins &gt; pwndbg &gt; Start integration on current view</code>. This will start the XMLRPC server that pwndbg queries for information.</p> <p>Then, inside GDB, run <code>set integration-provider binja</code>, which will start the integration. You can run <code>set integration-provider none</code> to disable it again.</p>"},{"location":"binja_integration/#features","title":"Features","text":"<p>The integration currently syncs symbol names, comments, decompilation, function type signatures, and stack variables.</p>"},{"location":"binja_integration/#commands","title":"Commands","text":"<ul> <li><code>bn-sync</code>: Navigate the Binary Ninja view to the current instruction</li> <li><code>decomp ADDR NLINES</code>: Displays the decompilation for <code>NLINES</code> lines at address <code>ADDR</code>. </li> </ul>"},{"location":"binja_integration/#config-options","title":"Config Options","text":"<ul> <li><code>bn-autosync</code>: If set to <code>yes</code>, every step will automatically run <code>bn-sync</code></li> <li><code>bn-il-level</code>: Sets the IL level to use for decompilation. Valid values are: <code>disasm</code>, <code>llil</code>, <code>mlil</code>, <code>hlil</code></li> <li><code>bn-rpc-host</code>/<code>bn-rpc-port</code>: The host and port to connect to for the XMLRPC server</li> <li><code>bn-timeout</code>: The amount, in seconds, to wait for the XMLRPC server to connect</li> </ul>"},{"location":"env_vars/","title":"Env vars","text":""},{"location":"env_vars/#environment-variables","title":"Environment Variables","text":"<p>Pwndbg relies on several environment variables to customize its behavior. Below is a list of these variables and their purposes:</p> <ul> <li><code>PATH</code>: Standard system <code>PATH</code> variable used to locate executables.</li> <li><code>EDITOR</code>, <code>VISUAL</code>: Used by the <code>cymbol</code> command to open an editor.</li> <li><code>HOME</code>, <code>XDG_CACHE_HOME</code>: Used by <code>lib.tempfile</code> to determine temporary file locations.</li> <li><code>PWNDBG_VENV_PATH</code>: Specifies the virtual environment path for Pwndbg.</li> <li><code>PWNDBG_DISABLE_COLORS</code>: Disables colored output in Pwndbg.</li> <li><code>PWNDBG_LOGLEVEL</code>: Initial log level to use for log messages.</li> <li><code>OPENAI_API_KEY</code>, <code>ANTHROPIC_API_KEY</code>: Used by the <code>ai</code> command for accessing respective AI APIs.</li> <li><code>GITHUB_ACTIONS</code>, <code>RUN_FLAKY</code>: Used by <code>tests_commands.py</code> to determine the test environment.</li> <li><code>PWNDBG_PROFILE</code>: Enables profiling for benchmarking.</li> <li><code>USE_PDB</code>: Enables Python debugger in tests.</li> <li><code>PWNDBG_LAUNCH_TEST</code>: Used by tests to configure test launching.</li> <li><code>PWNDBG_ARCH</code>, <code>PWNDBG_KERNEL_TYPE</code>, <code>PWNDBG_KERNEL_VERSION</code>: Used by <code>gdblib</code> kernel tests to specify kernel parameters.</li> <li><code>SPHINX</code>: Used by <code>docs/source/conf.py</code>, likely to be removed.</li> <li><code>PWNLIB_NOTERM=1</code>: Set by Pwndbg to avoid terminal issues with Pwntools.</li> </ul>"},{"location":"go_debugging/","title":"Debugging Go with pwndbg","text":""},{"location":"go_debugging/#basics","title":"Basics","text":"<p>The <code>go-dump</code> command can be used to dump Go values during debugging. It takes the form <code>go-dump type address_expression</code>, and supports many different types with the same syntax as Go: - Integer types: <code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>int128</code>, and their <code>uint</code> counterparts - Misc types: <code>bool</code>, <code>rune</code>, <code>uintptr</code>, <code>string</code> - Floating point types: <code>float32</code>, <code>float64</code> - Complex numbers: <code>complex64</code>, <code>complex128</code> - Interface types: <code>any</code> for <code>interface{}</code> (the empty interface), and <code>interface</code> for all non-empty interfaces - Function types: <code>funcptr</code> for all function types - Pointers: <code>*ELEM</code> - Slices: <code>[]ELEM</code> - Arrays: <code>[LEN]ELEM</code> - Maps: <code>map[KEY][VAL]</code> (note that maps in Go are actually pointers to the map, whereas this map is the inner map, so you may need to use <code>*map[KEY]VAL</code> to dump a map)</p> <p>Struct types are also supported, but the syntax is slightly different from Go in order to avoid having to compute offsets (and also to support only having partial field information on structs). Struct types are notated as <code>OFFSET:FIELD_NAME:TYPE</code> triples separated by semicolons then enclosed with <code>struct(SIZE){}</code>, e.g. <code>struct(24){0:foo:string;16:bar:int64}</code> to represent the 24-byte Go struct <code>struct { foo string; bar int64 }</code>.</p> <p>Example: Text Only<pre><code>pwndbg&gt; go-dump map[string]int 0xc0000b20f0\n{\"a\": 1, \"b\": 2, \"c\": 3}\n\npwndbg&gt; go-dump any 0xc0000ace40\n([]struct { a int; b string }) [struct {a: 1, b: \"first\"}, struct {a: 2, b: \"second\"}]\n\npwndbg&gt; go-dump struct(24){0:a:int;8:b:string} 0xc000108120\nstruct {a: 1, b: \"first\"}\n</code></pre></p> <p>Some notable flags include <code>-p</code> to enable pretty printing, <code>-x</code> to display integers in hex, <code>-f DECIMALS</code> to set the number of decimals used to display floats, <code>-d</code> to enable debug printing, which displays memory addresses of everything shown in the dump.</p>"},{"location":"go_debugging/#runtime-type-parsing","title":"Runtime Type Parsing","text":"<p>Go's compiler emits type objects for every single type used by the program. This is what enables dumping interface values with <code>go-dump</code> without having to specify any additional type information, and can also be leveraged to dump non-interface values if the type can be located. A good way to locate types is by finding the type pointer passed into heap allocation functions like <code>runtime.newobject</code> or <code>runtime.makeslice</code>.</p> <p>After finding the type pointer, the <code>go-type</code> command can be used to inspect a type: Text Only<pre><code>pwndbg&gt; go-type 0x49fbc0\n Name: struct { a int; b string }\n Kind: STRUCT\n Size: 24 (0x18)\nAlign: 8\nParse: struct(24){0:a:int;8:b:string}\nField a:\n    Offset: 0 (0x0)\n    Type name: int\n    Type addr: 0x498ce0\nField b:\n    Offset: 8 (0x8)\n    Type name: string\n    Type addr: 0x498aa0\n</code></pre></p> <p>The <code>go-dump</code> command can also take an address to a type instead of the name of a type: Text Only<pre><code>pwndbg&gt; go-dump 0x49fbc0 0xc000108120\nstruct {a: 1, b: \"first\"}\n</code></pre></p>"},{"location":"pycharm_debugging/","title":"Debugging with PyCharm","text":"<p>In order to debug code with PyCharm you need to configure remote debugging.</p> <p>PyCharm will start a remote debugging server which will listen for connections and pwndbg will then connect to that server, on startup.</p>"},{"location":"pycharm_debugging/#configuring-the-debugging-server","title":"Configuring the debugging server","text":"<p>Select <code>Run -&gt; Edit Configurations</code> and follow the instructions there :)</p> <ul> <li>Create a new server with the <code>+</code> button.</li> <li>Put your IP in <code>IDE host name</code> and select a port number.</li> <li>Optionally, add a path mapping: <code>pycharm/pwndbg/dir=machine/pwndbg/dir</code></li> <li>Uncheck <code>suspend after connect</code></li> </ul>"},{"location":"pycharm_debugging/#configuring-pwndbg","title":"Configuring pwndbg","text":"<ul> <li>Select <code>Run -&gt; Edit Configurations</code> and install the packages described in that window.</li> <li><code>pip install pydevd-pycharm~=&lt;your_pycharm_version&gt;</code></li> <li>Add the following code somewhere where it will execute on gdb startup: Python<pre><code>import pydevd_pycharm\npydevd_pycharm.settrace('&lt;your_IP&gt;', port=&lt;port&gt;, stdoutToServer=True, stderrToServer=True)\n</code></pre></li> </ul>"},{"location":"pycharm_debugging/#debugging","title":"Debugging","text":"<ol> <li>Start the debugging server in PyCharm</li> <li>Run pwndbg</li> </ol>"},{"location":"pycharm_debugging/#wsl2","title":"WSL2","text":"<p>In order to debug using WSL2, you need to obtain your Windows IP. The easiest way to do that is to run: Text Only<pre><code>cat /etc/resolv.conf\n</code></pre> and then to pick the value in the <code>nameserver</code> line. Then use that IP in the <code>IDE host name</code> field, when configuring the server. Afterwards, use the same IP in <code>pydevd_pycharm.settrace(...)</code></p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#quick-start","title":"Quick start","text":"<p>Installation from source is straightforward:</p> Bash<pre><code>git clone https://github.com/pwndbg/pwndbg\ncd pwndbg\n./setup.sh\n</code></pre>"},{"location":"setup/#install-on-linux-distributions","title":"Install on Linux distributions","text":"<p>Nix package manager (you can use Nix on any distribution): Bash<pre><code>nix shell github:pwndbg/pwndbg\npwndbg ./your-binary\n</code></pre></p> <p>Pwndbg is supported on Ubuntu 22.04, and 24.04 with GDB 12.1 and later. We do not test on any older versions of Ubuntu, so <code>pwndbg</code> may not work on these versions (for Ubuntu 18.04 use the 2023.07.17: ubuntu18.04-final release). We may accept pull requests fixing issues in older versions on a case by case basis, please discuss this with us on Discord first. You can also always checkout an older version of <code>pwndbg</code> from around the time the Ubuntu version you're interested in was still supported by Canonical, or you can attempt to build a newer version of GDB from source.</p> <p>Other Linux distributions are also supported via <code>setup.sh</code>, including:</p> <ul> <li>Debian-based OSes (via apt-get)</li> <li>Fedora and Red Hat (via dnf)</li> <li>Clear (via swiped)</li> <li>OpenSUSE LEAP (via zypper)</li> <li>Arch and Manjaro (via community AUR packages)</li> <li>Void (via xbps)</li> <li>Gentoo (via emerge)</li> </ul> <p>If you use any Linux distribution other than Ubuntu, we recommend using the latest available GDB built from source. You can build it as: Text Only<pre><code>cd &lt;gdb-sources-dir&gt;\nmkdir build\ncd build\n../configure --disable-nls --disable-werror --with-system-readline --with-python=`which python3` --with-system-gdbinit=/etc/gdb/gdbinit --enable-targets=all\nmake -j7\n</code></pre></p>"},{"location":"setup/#portable-installation-from-package","title":"Portable Installation from package","text":"<p>The portable version includes all necessary dependencies and should work without the need to install additional packages.</p>"},{"location":"setup/#download-the-portable-version","title":"Download the Portable Version:","text":"<p>Download the portable version from the Pwndbg releases page by selecting the desired version. Choose the appropriate version for your system architecture (x86_64, armv7l, aarch64, riscv64).</p>"},{"location":"setup/#installation-on-rpm-based-systems-centosalmarockyrhel","title":"Installation on RPM-based Systems (CentOS/Alma/Rocky/RHEL):","text":"Bash<pre><code>dnf install ./pwndbg-2024.08.29.x86_64.rpm\n# pwndbg\n</code></pre>"},{"location":"setup/#installation-on-deb-based-systems-debianubuntukali","title":"Installation on DEB-based Systems (Debian/Ubuntu/Kali):","text":"Bash<pre><code>apt install ./pwndbg_2024.08.29_amd64.deb\n# pwndbg\n</code></pre>"},{"location":"setup/#installation-on-alpine","title":"Installation on Alpine:","text":"Bash<pre><code>apk add --allow-untrusted ./pwndbg_2024.08.29_x86_64.apk\n# pwndbg\n</code></pre>"},{"location":"setup/#installation-on-arch-linux","title":"Installation on Arch Linux:","text":"Bash<pre><code>pacman -U ./pwndbg-2024.08.29-1-x86_64.pkg.tar.zst\n# pwndbg\n</code></pre>"},{"location":"setup/#generic-linux-installation","title":"Generic Linux Installation:","text":"Bash<pre><code>tar -v -xf ./pwndbg_2024.08.29_amd64.tar.xz\n# ./pwndbg/bin/pwndbg\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/","title":"Pwndbg coding sprints report","text":"<p>This blog post is a report of the two coding sprints for the Pwndbg project that I organized first on the EuroPython 2022 conference and then, taking inspiration from the previous one, in the Hackerspace Krak\u00f3w, located in Cracow, Poland.</p> <p>PS: If you are only looking for a list of things done, scroll down!</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#where-i-got-the-idea-for-sprints","title":"Where I got the idea for sprints?","text":"<p>I have recently attended the EuroPython 2022 conference and I enjoyed the \u201csprints\u201d there. In short, a sprint is a semi-organized event, where anyone can announce a project they will be working on and others can join them. This helps both the projects and the event participants to learn about the project and to make first-time contributions. At the EuroPython conference, there were 16 officially announced projects, but I know that even more projects were being worked on in practice. Of course, other communities or conferences also do this (e.g. NixCon).</p> <p>At the EuroPython conference, I announced my own sprint to work on the Pwndbg project that I maintain. Having no expectations, I felt excited when four people showed up to learn something new and hack together on the project. Later, taking inspiration from it, I organized another sprint, this time in Cracow in the local Hackerspace with even a bigger response. Below, you can read a small report on the two sprints that have happened.</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#my-general-idea-for-a-pwndbg-sprint","title":"My general idea for a Pwndbg sprint","text":"<p>Pwndbg is written in Python, so on one hand is easy to hack on, but on the other hand it is a plugin for GDB, a console debugger for native programs (e.g. ones written in C, C++, Go or Rust). The general idea of Pwndbg is to alleviate the pain points of working with and improve the UX of GDB when debugging assembly code, reverse engineering a binary or during exploit development.</p> <p>Since not everyone is familiar with debuggers or the underlyings of programs execution (e.g. assembly code, CPU registers or stack or heap memory) I knew that I had to make some introduction to those concepts and if possible, prepare a list of simple tasks, so that people can get familiar with the codebase and the tool and contribute something.</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#europython-2022-sprint","title":"EuroPython 2022 sprint","text":"<p>On the first sprint, four people showed up, mostly having no prior experience with the topic. We started with an introduction to what GDB and Pwndbg are and why and when they are useful.</p> <p>For this, I took a small C program that had a buffer overflow bug: C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char* argv[]) {\n    char name[16] = {0};\n\n    // NOTE: We copy the `argv[1]` string which may be of arbitrary length\n    // into the `name` buffer which is only of 16-bytes long. Thus, we can\n    // overwrite the stack memory of the program past the `name` buffer.\n    strcpy(name, argv[1]);\n\n    printf(\"Hello %s!\\n\", name);\n}\n</code></pre></p> <p>Then, after compiling it (<code>gcc main.c</code>), we ran the program twice to see that it will crash if we provide a too long string as its argument:</p> Bash<pre><code>$ ./a.out Disconnect3d\nHello Disconnect3d!\n\n$ ./a.out Disconnect3d_at_EuroPython\nHello Disconnect3d_at_EuroPython!\n*** stack smashing detected ***: &lt;unknown&gt; terminated\nAborted (core dumped)\n</code></pre> <p>Then, I explained that the \"stack smashing detected\" we see is the \"stack canaries\" (also called \"stack cookies\") exploit mitigation added by compilers. This compiler feature adds a special 8-bytes canary value after the function's local variables located on the stack, so that then a stack frame may look like this:</p> Text Only<pre><code>------------------------------   lower addresses\nchar name[16];                         |\nuint8_t canary[8];                     |\nvoid* function_return_address;         V\n------------------------------   higher addresses\n</code></pre> <p>This local stack canary value is then filled in just after the function\u2019s prologue and is verified against a global value before the function returns to see if the stack was not corrupted (starting from the canary). Of course this may not detect all possible stack memory corruptions but it often makes it impossible to exploit a program (e.g. by changing the return address, also located on the stack), knowing just this vulnerability.</p> <p>The stack canary mitigation can also be disabled. And if it were done (by passing in a <code>-fno-stack-protector</code> flag during compilation), we would get a different result when running the resulting program:</p> Bash<pre><code>$ gcc -fno-stack-protector buf.c\n\n$ ./a.out Disconnect3d_on_EuroPython\nHello Disconnect3d_on_EuroPython!\nSegmentation fault (core dumped)\n</code></pre> <p>Now, the \"stack smashing detected\" is gone, but the program still crashed, because we still corrupted a part of its memory that we shouldn't have touched in a way that made the program do illegal things (e.g. accessing unmapped memory).</p> <p>During the sprint, we also ran a GDB+Pwndbg session to see the exact instructions that placed the canary value on the stack memory, to see that our input string was located just before it and how the canary was checked just before the function was returned.</p> <p>I am not going to describe all of this here, but you can see some of it in the below asciinema recording.</p> <p></p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#hackerspace-krakow-sprint","title":"Hackerspace Krak\u00f3w sprint","text":"<p>Since the second sprint was an ad-hoc event, I had to organize it myself. As a member of Hackerspace Krak\u00f3w, I was able to reserve the hackerspace's softroom, which is a perfect place for people to hack on things using their computers. Then, I advertised the event on the Hackerspace's mailing list and on a few other mediums.</p> <p>I did not expect many people to come, especially that I advertised the sprint ~2 days before the event.</p> <p>But... 8 people (!) showed up (excluding me). I prepared a document with some basic information and tasks, which can be found here (though, it is in Polish and it was modified during and after the sprint).</p> <p>I won't lie: most people that came were friends of mine, some of which I play CTFs with. However, not all of them had really used or developed Pwndbg before.</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#accomplishments-from-the-two-sprints","title":"Accomplishments from the two sprints","text":"<p>On the EP sprint, since we were just a group of four, we focused on small improvements to the codebase. In total, we did the following: * reviewed and merged the fs/gs_base fetching improvement PR, * pinned the project's dependencies, * updated the unicorn dependency version, * added a \"tip of the day\" feature, * improved the UX of using Pwndbg within a Python virtual environment, * and also worked on enhancing the display of arguments when stopping on a call to the printf functions family.</p> <p>The last item from the list was the hardest to jump on and it still requires enhancements until it is merged. Nonetheless, all of this was a nice outcome from the whole sprint :).</p> <p>On the second sprint, while we were a bigger group, we had much more limited time (since instead of having ~8 hours, we had just a few). Anyway, we were able to do the following:</p> <ul> <li>Cleanup some code leftover after dropping Python 2 support,</li> <li>Added documentation on how to debug Pwndbg using PyCharm remote debugging,</li> <li>Reviewed and merged the PRs that sets <code>$base_heap</code> variable and a tip for it, which may be useful for heap exploitation,</li> <li>Fix the X30 register display on AARCH64 targets,</li> <li>Fix <code>context args</code> display when PC/IP register pointed to unmapped memory,</li> <li>Fixed the <code>xor</code> and <code>memfrob</code> commands and added tests for them (! :D),</li> <li>Worked on adding a way to dump memory that can be copied right away as C or Python code (this needs to be changed to a command flag),</li> <li>Investigated a potential parsing issue, even looking at GDB's command parsing source code, implemented potential patch, which only later turned out to be redundant and the issue to be invalid.</li> </ul>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#summary-and-whats-next","title":"Summary and what's next?","text":"<p>Organizing those sprints helped me to get back to develop the Pwndbg project more and and attract more people to contribute to it. I also think that more conferences should have this kind of attractions (similarly as more conferences should have lightning talk sessions, heh).</p> <p>Regarding the Pwndbg sprints, I am organizing another one this week in Cracow on Tuesday, so if you live nearby and are interested in learning about Pwndbg or contributing to the project, feel invited! :)</p> <p>PS: Thanks a lot to @arturcygan for reviewing this blog post.</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#start","title":"Start","text":"<ul> <li>attachp Attaches to a given pid, process name or device file.</li> <li>entry</li> <li>sstart Alias for 'tbreak __libc_start_main; run'.</li> <li>start</li> </ul>"},{"location":"commands/#integrations","title":"Integrations","text":"<ul> <li>ai Ask GPT-3 a question about the current debugging context.</li> <li>j Synchronize IDA's cursor with GDB.</li> <li>save_ida Save the ida database.</li> <li>r2 Launches radare2.</li> <li>r2pipe Execute stateful radare2 commands through r2pipe.</li> <li>rz Launches rizin.</li> <li>rzpipe Execute stateful rizin commands through rzpipe.</li> <li>rop Dump ROP gadgets with Jon Salwan's ROPgadget tool.</li> <li>ropper ROP gadget search with ropper.</li> </ul>"},{"location":"commands/#linuxlibcelf","title":"Linux/libc/ELF","text":"<ul> <li>argc Prints out the number of arguments.</li> <li>argv Prints out the contents of argv.</li> <li>envp Prints out the contents of the environment.</li> <li>aslr</li> <li>auxv Print information from the Auxiliary ELF Vector.</li> <li>elfsections Prints the section mappings contained in the ELF header.</li> <li>gotplt Prints any symbols found in the .got.plt section if it exists.</li> <li>plt Prints any symbols found in the .plt section if it exists.</li> <li>got Show the state of the Global Offset Table.</li> <li>track-got Controls GOT tracking</li> <li>linkmap Show the state of the Link Map</li> <li>errno Converts errno (or argument) to its string representation.</li> <li>piebase Calculate VA of RVA from PIE base.</li> <li>threads List all threads belonging to the selected inferior.</li> <li>tls Print out base address of the current Thread Local Storage (TLS).</li> </ul>"},{"location":"commands/#misc","title":"Misc","text":"<ul> <li>asm Assemble shellcode into bytes</li> <li>break-if-not-taken Breaks on a branch if it is not taken.</li> <li>break-if-taken Breaks on a branch if it is taken.</li> <li>checksec Prints out the binary security settings using <code>checksec</code>.</li> <li>comm Put comments in assembly code.</li> <li>cyclic Cyclic pattern creator/finder.</li> <li>cymbol Add, show, load, edit, or delete custom structures in plain C.</li> <li>dt</li> <li>dumpargs Prints determined arguments for call instruction.</li> <li>down Select and print stack frame called by this one.</li> <li>up Select and print stack frame that called this one.</li> <li>ipi Start an interactive IPython prompt.</li> <li>stepuntilasm Breaks on the next matching instruction.</li> <li>patch Patches given instruction with given code or bytes.</li> <li>patch_list List all patches.</li> <li>patch_revert Revert patch at given address.</li> <li>getfile Gets the current file.</li> <li>plist Dumps the elements of a linked list.</li> <li>sigreturn Display the SigreturnFrame at the specific address</li> <li>spray Spray memory with cyclic() generated values</li> <li>tips Shows tips.</li> <li>valist Dumps the arguments of a va_list.</li> </ul>"},{"location":"commands/#stack","title":"Stack","text":"<ul> <li>canary Print out the current stack canary.</li> <li>retaddr Print out the stack addresses that contain return addresses.</li> <li>stack Dereferences on stack data with specified count and offset.</li> <li>stackf Dereferences on stack data, printing the entire stack frame with specified count and offset .</li> </ul>"},{"location":"commands/#pwndbg","title":"pwndbg","text":"<ul> <li>config Shows pwndbg-specific configuration.</li> <li>configfile Generates a configuration file for the current pwndbg options.</li> <li>theme Shows pwndbg-specific theme configuration.</li> <li>themefile Generates a configuration file for the current pwndbg theme options.</li> <li>memoize</li> <li>pwndbg Prints out a list of all pwndbg commands.</li> <li>reinit_pwndbg Makes pwndbg reinitialize all state.</li> <li>reload Reload pwndbg.</li> <li>bugreport Generate a bug report.</li> <li>version Displays GDB, Python, and pwndbg versions.</li> </ul>"},{"location":"commands/#context","title":"Context","text":"<ul> <li>context Print out the current register, instruction, and stack context.</li> <li>contextoutput Sets the output of a context section.</li> <li>contextunwatch Removes an expression previously added to be watched.</li> <li>contextwatch</li> <li>regs Print out all registers and enhance the information.</li> <li>xinfo Shows offsets of the specified address from various useful locations.</li> </ul>"},{"location":"commands/#register","title":"Register","text":"<ul> <li>cpsr Print out ARM CPSR or xPSR register.</li> <li>setflag Modify the flags register.</li> <li>fsbase Prints out the FS base address. See also $fsbase.</li> <li>gsbase Prints out the GS base address. See also $gsbase.</li> </ul>"},{"location":"commands/#memory","title":"Memory","text":"<ul> <li>distance Print the distance between the two arguments, or print the offset to the address's page base.</li> <li>hexdump Hexdumps data at the specified address or module name.</li> <li>leakfind</li> <li>mmap</li> <li>mprotect</li> <li>p2p Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.</li> <li>telescope Recursively dereferences pointers starting at the specified address.</li> <li>telescope Recursively dereferences pointers starting at the specified address.</li> <li>probeleak</li> <li>search Search memory for byte sequences, strings, pointers, and integer values.</li> <li>telescope Recursively dereferences pointers starting at the specified address.</li> <li>vmmap Print virtual memory map pages.</li> <li>vmmap_add Add virtual memory map page.</li> <li>vmmap_clear Clear the vmmap cache.</li> <li>vmmap_load Load virtual memory map pages from ELF file.</li> <li>xinfo Shows offsets of the specified address from various useful locations.</li> <li>memfrob Memfrobs a region of memory (xor with '*').</li> <li>xor XOR <code>count</code> bytes at <code>address</code> with the key <code>key</code>.</li> </ul>"},{"location":"commands/#heap","title":"Heap","text":"<ul> <li>arena Print the contents of an arena.</li> <li>arenas List this process's arenas.</li> <li>bins Print the contents of all an arena's bins and a thread's tcache.</li> <li>fastbins Print the contents of an arena's fastbins.</li> <li>find_fake_fast Find candidate fake fast or tcache chunks overlapping the specified address.</li> <li>heap Iteratively print chunks on a heap.</li> <li>heap_config Shows heap related configuration.</li> <li>hi Searches all heaps to find if an address belongs to a chunk. If yes, prints the chunk.</li> <li>largebins Print the contents of an arena's largebins.</li> <li>malloc_chunk Print a chunk.</li> <li>mp Print the mp_ struct's contents.</li> <li>smallbins Print the contents of an arena's smallbins.</li> <li>tcache Print a thread's tcache contents.</li> <li>tcachebins Print the contents of a tcache.</li> <li>top_chunk Print relevant information about an arena's top chunk.</li> <li>try_free Check what would happen if free was called with given address.</li> <li>unsortedbin Print the contents of an arena's unsortedbin.</li> <li>vis_heap_chunks Visualize chunks on a heap.</li> </ul>"},{"location":"commands/#breakpoint","title":"Breakpoint","text":"<ul> <li>ignore Set ignore-count of breakpoint number N to COUNT.</li> <li>breakrva Break at RVA from PIE base.</li> </ul>"},{"location":"commands/#kernel","title":"Kernel","text":"<ul> <li>kbase Finds the kernel virtual base address.</li> <li>kchecksec Checks for kernel hardening configuration options.</li> <li>kcmdline Return the kernel commandline (/proc/cmdline).</li> <li>kconfig Outputs the kernel config (requires CONFIG_IKCONFIG).</li> <li>klookup Lookup kernel symbols.</li> <li>kversion Outputs the kernel version (/proc/version).</li> <li>slab Prints information about the slab allocator</li> </ul>"},{"location":"commands/#process","title":"Process","text":"<ul> <li>killthreads Kill all or given threads.</li> <li>pid Gets the pid.</li> <li>procinfo Display information about the running process.</li> </ul>"},{"location":"commands/#disassemble","title":"Disassemble","text":"<ul> <li>emulate Like nearpc, but will emulate instructions from the current $PC forward.</li> <li>nearpc Disassemble near a specified address.</li> </ul>"},{"location":"commands/#stepnextcontinue","title":"Step/Next/Continue","text":"<ul> <li>nextcall Breaks at the next call instruction.</li> <li>nextjmp Breaks at the next jump instruction.</li> <li>nextproginstr Breaks at the next instruction that belongs to the running program.</li> <li>nextret Breaks at next return-like instruction.</li> <li>nextsyscall Breaks at the next syscall not taking branches.</li> <li>stepover Breaks on the instruction after this one.</li> <li>stepret Breaks at next return-like instruction by 'stepping' to it.</li> <li>stepsyscall Breaks at the next syscall by taking branches.</li> <li>xuntil Continue execution until an address or function.</li> </ul>"},{"location":"commands/#windbg","title":"WinDbg","text":"<ul> <li>bc Clear the breakpoint with the specified index.</li> <li>bd Disable the breakpoint with the specified index.</li> <li>be Enable the breakpoint with the specified index.</li> <li>bl List breakpoints.</li> <li>bp Set a breakpoint at the specified address.</li> <li>da Dump a string at the specified address.</li> <li>db Starting at the specified address, dump N bytes.</li> <li>dc Starting at the specified address, hexdump.</li> <li>dd Starting at the specified address, dump N dwords.</li> <li>dds Dump pointers and symbols at the specified address.</li> <li>dq Starting at the specified address, dump N qwords.</li> <li>ds Dump a string at the specified address.</li> <li>dw Starting at the specified address, dump N words.</li> <li>eb Write hex bytes at the specified address.</li> <li>ed Write hex dwords at the specified address.</li> <li>eq Write hex qwords at the specified address.</li> <li>ew Write hex words at the specified address.</li> <li>ez Write a string at the specified address.</li> <li>eza Write a string at the specified address.</li> <li>go Windbg compatibility alias for 'continue' command.</li> <li>k Print a backtrace (alias 'bt').</li> <li>ln List the symbols nearest to the provided value.</li> <li>pc Windbg compatibility alias for 'nextcall' command.</li> <li>peb Not be windows.</li> </ul>"},{"location":"commands/ai/ai/","title":"ai","text":""},{"location":"commands/ai/ai/#description","title":"Description","text":"<p>Ask GPT-3 a question about the current debugging context.</p>"},{"location":"commands/ai/ai/#usage","title":"Usage:","text":"Bash<pre><code>usage: ai [-h] [-M MODEL] [-t TEMPERATURE] [-m MAX_TOKENS] [-v] [-L] [-c COMMAND] [question ...]\n</code></pre>"},{"location":"commands/ai/ai/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>question</code> The question to ask."},{"location":"commands/ai/ai/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-M</code> <code>--model</code> <code>None</code> The OpenAI model to use. <code>-t</code> <code>--temperature</code> <code>None</code> The temperature to use. <code>-m</code> <code>--max-tokens</code> <code>None</code> The maximum number of tokens to generate. <code>-v</code> <code>--verbose</code> Print the prompt and response. (default: %(default)s) <code>-L</code> <code>--list-models</code> List the available models. (default: %(default)s) <code>-c</code> <code>--command</code> <code>None</code> Run a command in the GDB debugger and ask a question about the output."},{"location":"commands/argv/argc/","title":"argc","text":""},{"location":"commands/argv/argc/#description","title":"Description","text":"<p>Prints out the number of arguments.</p>"},{"location":"commands/argv/argc/#usage","title":"Usage:","text":"Bash<pre><code>usage: argc [-h]\n</code></pre>"},{"location":"commands/argv/argc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/argv/argv/","title":"argv","text":""},{"location":"commands/argv/argv/#description","title":"Description","text":"<p>Prints out the contents of argv.</p>"},{"location":"commands/argv/argv/#usage","title":"Usage:","text":"Bash<pre><code>usage: argv [-h] [i]\n</code></pre>"},{"location":"commands/argv/argv/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>i</code> Index of the argument to print out."},{"location":"commands/argv/argv/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/argv/envp/","title":"envp","text":""},{"location":"commands/argv/envp/#description","title":"Description","text":"<p>Prints out the contents of the environment.</p>"},{"location":"commands/argv/envp/#usage","title":"Usage:","text":"Bash<pre><code>usage: envp [-h] [name]\n</code></pre>"},{"location":"commands/argv/envp/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>name</code> Name of the environment variable to see."},{"location":"commands/argv/envp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/aslr/aslr/","title":"aslr","text":""},{"location":"commands/aslr/aslr/#description","title":"Description","text":"<p>Check the current ASLR status, or turn it on/off.</p> <p>Does not take effect until the program is restarted.</p>"},{"location":"commands/aslr/aslr/#usage","title":"Usage:","text":"Bash<pre><code>usage: aslr [-h] [{on,off}]\n</code></pre>"},{"location":"commands/aslr/aslr/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>state</code> Turn ASLR on or off (takes effect when target is started)"},{"location":"commands/aslr/aslr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/asm/asm/","title":"asm","text":""},{"location":"commands/asm/asm/#description","title":"Description","text":"<p>Assemble shellcode into bytes</p>"},{"location":"commands/asm/asm/#usage","title":"Usage:","text":"Bash<pre><code>usage: asm [-h] [-f {hex,string}]\n           [--arch {powerpc64,aarch64,powerpc,riscv32,riscv64,sparc64,mips64,msp430,alpha,amd64,sparc,thumb,cris,i386,ia64,m68k,mips,s390,none,avr,arm,vax}] [-v AVOID] [-n]\n           [-z] [-i INFILE]\n           [shellcode ...]\n</code></pre>"},{"location":"commands/asm/asm/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>shellcode</code> Assembler code to assemble (default: %(default)s)"},{"location":"commands/asm/asm/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--format</code> <code>hex</code> Output format (default: %(default)s) <code>--arch</code> <code>i386</code> Target architecture (default: %(default)s) <code>-v</code> <code>--avoid</code> <code>None</code> Encode the shellcode to avoid the listed bytes (provided as hex) <code>-n</code> <code>--newline</code> <code>None</code> Encode the shellcode to avoid newlines <code>-z</code> <code>--zero</code> <code>None</code> Encode the shellcode to avoid NULL bytes <code>-i</code> <code>--infile</code> <code>None</code> Specify input file"},{"location":"commands/attachp/attachp/","title":"attachp","text":""},{"location":"commands/attachp/attachp/#description","title":"Description","text":"<p>Attaches to a given pid, process name or device file.</p> <p>This command wraps the original GDB <code>attach</code> command to add the ability to debug a process with given name. In such case the process identifier is fetched via the <code>pidof &lt;name&gt;</code> command.</p> <p>Original GDB attach command help:     Attach to a process or file outside of GDB.     This command attaches to another target, of the same type as your last     \"target\" command (\"info files\" will show your target stack).     The command may take as argument a process id or a device file.     For a process id, you must have permission to send the process a signal,     and it must have the same effective uid as the debugger.     When using \"attach\" with a process id, the debugger finds the     program running in the process, looking first in the current working     directory, or (if not found there) using the source file search path     (see the \"directory\" command).  You can also use the \"file\" command     to specify the program, and to load its symbol table.</p>"},{"location":"commands/attachp/attachp/#usage","title":"Usage:","text":"Bash<pre><code>usage: attachp [-h] [--no-truncate] target\n</code></pre>"},{"location":"commands/attachp/attachp/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>target</code> pid, process name or device file to attach to"},{"location":"commands/attachp/attachp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--no-truncate</code> dont truncate command args (default: %(default)s)"},{"location":"commands/auxv/auxv/","title":"auxv","text":""},{"location":"commands/auxv/auxv/#description","title":"Description","text":"<p>Print information from the Auxiliary ELF Vector.</p>"},{"location":"commands/auxv/auxv/#usage","title":"Usage:","text":"Bash<pre><code>usage: auxv [-h]\n</code></pre>"},{"location":"commands/auxv/auxv/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/branch/break_if_not_taken/","title":"break-if-not-taken","text":""},{"location":"commands/branch/break_if_not_taken/#description","title":"Description","text":"<p>Breaks on a branch if it is not taken.</p>"},{"location":"commands/branch/break_if_not_taken/#usage","title":"Usage:","text":"Bash<pre><code>usage: break-if-not-taken [-h] branch\n</code></pre>"},{"location":"commands/branch/break_if_not_taken/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>branch</code> The branch instruction to break on."},{"location":"commands/branch/break_if_not_taken/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/branch/break_if_taken/","title":"break-if-taken","text":""},{"location":"commands/branch/break_if_taken/#description","title":"Description","text":"<p>Breaks on a branch if it is taken.</p>"},{"location":"commands/branch/break_if_taken/#usage","title":"Usage:","text":"Bash<pre><code>usage: break-if-taken [-h] branch\n</code></pre>"},{"location":"commands/branch/break_if_taken/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>branch</code> The branch instruction to break on."},{"location":"commands/branch/break_if_taken/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/canary/canary/","title":"canary","text":""},{"location":"commands/canary/canary/#description","title":"Description","text":"<p>Print out the current stack canary.</p>"},{"location":"commands/canary/canary/#usage","title":"Usage:","text":"Bash<pre><code>usage: canary [-h]\n</code></pre>"},{"location":"commands/canary/canary/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/checksec/checksec/","title":"checksec","text":""},{"location":"commands/checksec/checksec/#description","title":"Description","text":"<p>Prints out the binary security settings using <code>checksec</code>.</p>"},{"location":"commands/checksec/checksec/#usage","title":"Usage:","text":"Bash<pre><code>usage: checksec [-h]\n</code></pre>"},{"location":"commands/checksec/checksec/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/comments/comm/","title":"comm","text":""},{"location":"commands/comments/comm/#description","title":"Description","text":"<p>Put comments in assembly code.</p>"},{"location":"commands/comments/comm/#usage","title":"Usage:","text":"Bash<pre><code>usage: comm [-h] [--addr address] comment\n</code></pre>"},{"location":"commands/comments/comm/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>comment</code> The text you want to comment"},{"location":"commands/comments/comm/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--addr</code> <code>None</code> Address to write comments"},{"location":"commands/config/config/","title":"config","text":""},{"location":"commands/config/config/#description","title":"Description","text":"<p>Shows pwndbg-specific configuration.</p>"},{"location":"commands/config/config/#usage","title":"Usage:","text":"Bash<pre><code>usage: config [-h] [filter_pattern]\n</code></pre>"},{"location":"commands/config/config/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to config parameters names/descriptions"},{"location":"commands/config/config/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/config/configfile/","title":"configfile","text":""},{"location":"commands/config/configfile/#description","title":"Description","text":"<p>Generates a configuration file for the current pwndbg options.</p>"},{"location":"commands/config/configfile/#usage","title":"Usage:","text":"Bash<pre><code>usage: configfile [-h] [--show-all]\n</code></pre>"},{"location":"commands/config/configfile/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--show-all</code> Display all configuration options. (default: %(default)s)"},{"location":"commands/config/theme/","title":"theme","text":""},{"location":"commands/config/theme/#description","title":"Description","text":"<p>Shows pwndbg-specific theme configuration.</p>"},{"location":"commands/config/theme/#usage","title":"Usage:","text":"Bash<pre><code>usage: theme [-h] [filter_pattern]\n</code></pre>"},{"location":"commands/config/theme/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to theme parameters names/descriptions"},{"location":"commands/config/theme/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/config/themefile/","title":"themefile","text":""},{"location":"commands/config/themefile/#description","title":"Description","text":"<p>Generates a configuration file for the current pwndbg theme options.</p>"},{"location":"commands/config/themefile/#usage","title":"Usage:","text":"Bash<pre><code>usage: themefile [-h] [--show-all]\n</code></pre>"},{"location":"commands/config/themefile/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--show-all</code> Force displaying of all theme options. (default: %(default)s)"},{"location":"commands/context/context/","title":"context","text":""},{"location":"commands/context/context/#description","title":"Description","text":"<p>Print out the current register, instruction, and stack context.</p>"},{"location":"commands/context/context/#usage","title":"Usage:","text":"Bash<pre><code>usage: context [-h] [subcontext ...]\n</code></pre>"},{"location":"commands/context/context/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>subcontext</code> Submenu to display: 'reg', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', and/or 'args'"},{"location":"commands/context/context/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/contextoutput/","title":"contextoutput","text":""},{"location":"commands/context/contextoutput/#description","title":"Description","text":"<p>Sets the output of a context section.</p>"},{"location":"commands/context/contextoutput/#usage","title":"Usage:","text":"Bash<pre><code>usage: contextoutput [-h] section path clearing [banner] [width]\n</code></pre>"},{"location":"commands/context/contextoutput/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>section</code> The section which is to be configured. ('regs', 'disasm', 'code', 'stack', 'backtrace', and/or 'args') <code>path</code> The path to which the output is written <code>clearing</code> Indicates weather to clear the output <code>banner</code> Where a banner should be placed: both, top , bottom, none (default: %(default)s) <code>width</code> Sets a fixed width (used for banner). Set to None for auto"},{"location":"commands/context/contextoutput/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/contextunwatch/","title":"contextunwatch","text":""},{"location":"commands/context/contextunwatch/#description","title":"Description","text":"<p>Removes an expression previously added to be watched.</p>"},{"location":"commands/context/contextunwatch/#usage","title":"Usage:","text":"Bash<pre><code>usage: contextunwatch [-h] num\n</code></pre>"},{"location":"commands/context/contextunwatch/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>num</code> The expression number to be removed from context"},{"location":"commands/context/contextunwatch/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/contextwatch/","title":"contextwatch","text":""},{"location":"commands/context/contextwatch/#description","title":"Description","text":"<p>Adds an expression to be shown on context.</p> <p>To remove an expression, see <code>cunwatch</code>.</p>"},{"location":"commands/context/contextwatch/#usage","title":"Usage:","text":"Bash<pre><code>usage: contextwatch [-h] [{eval,execute}] expression\n</code></pre>"},{"location":"commands/context/contextwatch/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>cmd</code> Command to be used with the expression. - eval: the expression is parsed and evaluated as in the debugged language. - execute: the expression is executed as a GDB command. (default: %(default)s) <code>expression</code> The expression to be evaluated and shown in context"},{"location":"commands/context/contextwatch/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/regs/","title":"regs","text":""},{"location":"commands/context/regs/#description","title":"Description","text":"<p>Print out all registers and enhance the information.</p>"},{"location":"commands/context/regs/#usage","title":"Usage:","text":"Bash<pre><code>usage: regs [-h] [regs ...]\n</code></pre>"},{"location":"commands/context/regs/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>regs</code> Registers to be shown"},{"location":"commands/context/regs/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/cpsr/cpsr/","title":"cpsr","text":""},{"location":"commands/cpsr/cpsr/#description","title":"Description","text":"<p>Print out ARM CPSR or xPSR register.</p>"},{"location":"commands/cpsr/cpsr/#usage","title":"Usage:","text":"Bash<pre><code>usage: cpsr [-h]\n</code></pre>"},{"location":"commands/cpsr/cpsr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/cyclic/cyclic_cmd/","title":"cyclic","text":""},{"location":"commands/cyclic/cyclic_cmd/#description","title":"Description","text":"<p>Cyclic pattern creator/finder.</p>"},{"location":"commands/cyclic/cyclic_cmd/#usage","title":"Usage:","text":"Bash<pre><code>usage: cyclic [-h] [-a charset] [-n length] [-l lookup_value | count]\n</code></pre>"},{"location":"commands/cyclic/cyclic_cmd/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> Number of characters to print from the sequence (default: print the entire sequence) (default: %(default)s)"},{"location":"commands/cyclic/cyclic_cmd/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--alphabet</code> <code>abcdefghijklmnopqrstuvwxyz</code> The alphabet to use in the cyclic pattern (default: %(default)s) <code>-n</code> <code>--length</code> <code>None</code> Size of the unique subsequences (defaults to the pointer size for the current arch) <code>-o</code> <code>--lookup</code> <code>None</code> Do a lookup instead of printing the sequence (accepts constant values as well as expressions)"},{"location":"commands/cymbol/cymbol/","title":"cymbol","text":""},{"location":"commands/cymbol/cymbol/#description","title":"Description","text":"<p>Add, show, load, edit, or delete custom structures in plain C.</p>"},{"location":"commands/cymbol/cymbol/#usage","title":"Usage:","text":"Bash<pre><code>usage: cymbol [-h] [-a name] [-r name] [-e name] [-l name] [-s name]\n</code></pre>"},{"location":"commands/cymbol/cymbol/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--add</code> <code>None</code> Add a new custom structure <code>-r</code> <code>--remove</code> <code>None</code> Remove an existing custom structure <code>-e</code> <code>--edit</code> <code>None</code> Edit an existing custom structure <code>-l</code> <code>--load</code> <code>None</code> Load an existing custom structure <code>-s</code> <code>--show</code> <code>None</code> Show the source code of an existing custom structure"},{"location":"commands/distance/distance/","title":"distance","text":""},{"location":"commands/distance/distance/#description","title":"Description","text":"<p>Print the distance between the two arguments, or print the offset to the address's page base.</p>"},{"location":"commands/distance/distance/#usage","title":"Usage:","text":"Bash<pre><code>usage: distance [-h] a [b]\n</code></pre>"},{"location":"commands/distance/distance/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>a</code> The first address. <code>b</code> The second address."},{"location":"commands/distance/distance/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/dt/dt/","title":"dt","text":""},{"location":"commands/dt/dt/#description","title":"Description","text":"Text Only<pre><code>Dump out information on a type (e.g. ucontext_t).\n\nOptionally overlay that information at an address.\n</code></pre>"},{"location":"commands/dt/dt/#usage","title":"Usage:","text":"Bash<pre><code>usage: dt [-h] typename [address]\n</code></pre>"},{"location":"commands/dt/dt/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>typename</code> The name of the structure being dumped. <code>address</code> The address of the structure."},{"location":"commands/dt/dt/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/dumpargs/dumpargs/","title":"dumpargs","text":""},{"location":"commands/dumpargs/dumpargs/#description","title":"Description","text":"<p>Prints determined arguments for call instruction.</p>"},{"location":"commands/dumpargs/dumpargs/#usage","title":"Usage:","text":"Bash<pre><code>usage: dumpargs [-h] [-f]\n</code></pre>"},{"location":"commands/dumpargs/dumpargs/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--force</code> Force displaying of all arguments. (default: %(default)s)"},{"location":"commands/elf/elfsections/","title":"elfsections","text":""},{"location":"commands/elf/elfsections/#description","title":"Description","text":"<p>Prints the section mappings contained in the ELF header.</p>"},{"location":"commands/elf/elfsections/#usage","title":"Usage:","text":"Bash<pre><code>usage: elfsections [-h]\n</code></pre>"},{"location":"commands/elf/elfsections/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/elf/gotplt/","title":"gotplt","text":""},{"location":"commands/elf/gotplt/#description","title":"Description","text":"<p>Prints any symbols found in the .got.plt section if it exists.</p>"},{"location":"commands/elf/gotplt/#usage","title":"Usage:","text":"Bash<pre><code>usage: gotplt [-h]\n</code></pre>"},{"location":"commands/elf/gotplt/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/elf/plt/","title":"plt","text":""},{"location":"commands/elf/plt/#description","title":"Description","text":"<p>Prints any symbols found in the .plt section if it exists.</p>"},{"location":"commands/elf/plt/#usage","title":"Usage:","text":"Bash<pre><code>usage: plt [-h]\n</code></pre>"},{"location":"commands/elf/plt/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/flags/setflag/","title":"setflag","text":""},{"location":"commands/flags/setflag/#description","title":"Description","text":"<p>Modify the flags register.</p>"},{"location":"commands/flags/setflag/#usage","title":"Usage:","text":"Bash<pre><code>usage: setflag [-h] flag value\n</code></pre>"},{"location":"commands/flags/setflag/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>flag</code> Flag for which you want to change the value <code>value</code> Value to which you want to set the flag - only valid options are 0 and 1"},{"location":"commands/flags/setflag/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/got/got/","title":"got","text":""},{"location":"commands/got/got/#description","title":"Description","text":"<p>Show the state of the Global Offset Table.</p> <p>Examples:     got     got puts     got -p libc     got -a</p>"},{"location":"commands/got/got/#usage","title":"Usage:","text":"Bash<pre><code>usage: got [-h] [-p PATH_FILTER | -a] [-r] [symbol_filter]\n</code></pre>"},{"location":"commands/got/got/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>symbol_filter</code> Filter results by symbol name. (default: %(default)s)"},{"location":"commands/got/got/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-p</code> <code>--path</code> `` Filter results by library/objfile path. (default: %(default)s) <code>-a</code> <code>--all</code> Process all libs/obfjiles including the target executable. (default: %(default)s) <code>-r</code> <code>--show-readonly</code> Also display read-only entries (which are filtered out by default). (default: %(default)s)"},{"location":"commands/got_tracking/track_got/","title":"track-got","text":""},{"location":"commands/got_tracking/track_got/#description","title":"Description","text":"<p>Controls GOT tracking</p>"},{"location":"commands/got_tracking/track_got/#usage","title":"Usage:","text":"Bash<pre><code>usage: track-got [-h] {enable,disable,info,query} ...\n</code></pre>"},{"location":"commands/got_tracking/track_got/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/arena/","title":"arena","text":""},{"location":"commands/heap/arena/#description","title":"Description","text":"<p>Print the contents of an arena.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/arena/#usage","title":"Usage:","text":"Bash<pre><code>usage: arena [-h] [addr]\n</code></pre>"},{"location":"commands/heap/arena/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/arena/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/arenas/","title":"arenas","text":""},{"location":"commands/heap/arenas/#description","title":"Description","text":"<p>List this process's arenas.</p>"},{"location":"commands/heap/arenas/#usage","title":"Usage:","text":"Bash<pre><code>usage: arenas [-h]\n</code></pre>"},{"location":"commands/heap/arenas/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/bins/","title":"bins","text":""},{"location":"commands/heap/bins/#description","title":"Description","text":"<p>Print the contents of all an arena's bins and a thread's tcache.</p> <p>Default to the current thread's arena and tcache.</p>"},{"location":"commands/heap/bins/#usage","title":"Usage:","text":"Bash<pre><code>usage: bins [-h] [addr] [tcache_addr]\n</code></pre>"},{"location":"commands/heap/bins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena. <code>tcache_addr</code> Address of the tcache."},{"location":"commands/heap/bins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/fastbins/","title":"fastbins","text":""},{"location":"commands/heap/fastbins/#description","title":"Description","text":"<p>Print the contents of an arena's fastbins.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/fastbins/#usage","title":"Usage:","text":"Bash<pre><code>usage: fastbins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/fastbins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/fastbins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all fastbins, including empty ones (default: %(default)s)"},{"location":"commands/heap/find_fake_fast/","title":"find_fake_fast","text":""},{"location":"commands/heap/find_fake_fast/#description","title":"Description","text":"<p>Find candidate fake fast or tcache chunks overlapping the specified address.</p>"},{"location":"commands/heap/find_fake_fast/#usage","title":"Usage:","text":"Bash<pre><code>usage: find_fake_fast [-h] [--align] [--glibc-fastbin-bug] target_address [max_candidate_size]\n</code></pre>"},{"location":"commands/heap/find_fake_fast/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>target_address</code> Address of the word-sized value to overlap. <code>max_candidate_size</code> Maximum size of fake chunks to find."},{"location":"commands/heap/find_fake_fast/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--align</code> Whether the fake chunk must be aligned to MALLOC_ALIGNMENT. This is required for tcache chunks and for all chunks when Safe Linking is enabled (default: %(default)s) <code>-b</code> <code>--glibc-fastbin-bug</code> Does the GLIBC fastbin size field bug affect the candidate size field width? (default: %(default)s)"},{"location":"commands/heap/heap/","title":"heap","text":""},{"location":"commands/heap/heap/#description","title":"Description","text":"<p>Iteratively print chunks on a heap.</p> <p>Default to the current thread's active heap.</p>"},{"location":"commands/heap/heap/#usage","title":"Usage:","text":"Bash<pre><code>usage: heap [-h] [-v] [-s] [addr]\n</code></pre>"},{"location":"commands/heap/heap/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the first chunk (malloc_chunk struct start, prev_size field)."},{"location":"commands/heap/heap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Print all chunk fields, even unused ones. (default: %(default)s) <code>-s</code> <code>--simple</code> Simply print malloc_chunk struct's contents. (default: %(default)s)"},{"location":"commands/heap/heap_config/","title":"heap_config","text":""},{"location":"commands/heap/heap_config/#description","title":"Description","text":"<p>Shows heap related configuration.</p>"},{"location":"commands/heap/heap_config/#usage","title":"Usage:","text":"Bash<pre><code>usage: heap_config [-h] [filter_pattern]\n</code></pre>"},{"location":"commands/heap/heap_config/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to config parameters names/descriptions"},{"location":"commands/heap/heap_config/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/hi/","title":"hi","text":""},{"location":"commands/heap/hi/#description","title":"Description","text":"<p>Searches all heaps to find if an address belongs to a chunk. If yes, prints the chunk.</p>"},{"location":"commands/heap/hi/#usage","title":"Usage:","text":"Bash<pre><code>usage: hi [-h] [-v] [-s] [-f] addr\n</code></pre>"},{"location":"commands/heap/hi/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the interest."},{"location":"commands/heap/hi/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Print all chunk fields, even unused ones. (default: %(default)s) <code>-s</code> <code>--simple</code> Simply print malloc_chunk struct's contents. (default: %(default)s) <code>-f</code> <code>--fake</code> Allow fake chunks. If set, displays any memory as a heap chunk (even if its not a real chunk). (default: %(default)s)"},{"location":"commands/heap/largebins/","title":"largebins","text":""},{"location":"commands/heap/largebins/#description","title":"Description","text":"<p>Print the contents of an arena's largebins.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/largebins/#usage","title":"Usage:","text":"Bash<pre><code>usage: largebins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/largebins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/largebins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all largebins, including empty ones (default: %(default)s)"},{"location":"commands/heap/malloc_chunk/","title":"malloc_chunk","text":""},{"location":"commands/heap/malloc_chunk/#description","title":"Description","text":"<p>Print a chunk.</p>"},{"location":"commands/heap/malloc_chunk/#usage","title":"Usage:","text":"Bash<pre><code>usage: malloc_chunk [-h] [-f] [-v] [-s] addr\n</code></pre>"},{"location":"commands/heap/malloc_chunk/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the chunk (malloc_chunk struct start, prev_size field)."},{"location":"commands/heap/malloc_chunk/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--fake</code> Is this a fake chunk? (default: %(default)s) <code>-v</code> <code>--verbose</code> Print all chunk fields, even unused ones. (default: %(default)s) <code>-s</code> <code>--simple</code> Simply print malloc_chunk struct's contents. (default: %(default)s)"},{"location":"commands/heap/mp/","title":"mp","text":""},{"location":"commands/heap/mp/#description","title":"Description","text":"<p>Print the mp_ struct's contents.</p>"},{"location":"commands/heap/mp/#usage","title":"Usage:","text":"Bash<pre><code>usage: mp [-h]\n</code></pre>"},{"location":"commands/heap/mp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/smallbins/","title":"smallbins","text":""},{"location":"commands/heap/smallbins/#description","title":"Description","text":"<p>Print the contents of an arena's smallbins.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/smallbins/#usage","title":"Usage:","text":"Bash<pre><code>usage: smallbins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/smallbins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/smallbins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all smallbins, including empty ones (default: %(default)s)"},{"location":"commands/heap/tcache/","title":"tcache","text":""},{"location":"commands/heap/tcache/#description","title":"Description","text":"<p>Print a thread's tcache contents.</p> <p>Default to the current thread's tcache.</p>"},{"location":"commands/heap/tcache/#usage","title":"Usage:","text":"Bash<pre><code>usage: tcache [-h] [addr]\n</code></pre>"},{"location":"commands/heap/tcache/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the tcache."},{"location":"commands/heap/tcache/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/tcachebins/","title":"tcachebins","text":""},{"location":"commands/heap/tcachebins/#description","title":"Description","text":"<p>Print the contents of a tcache.</p> <p>Default to the current thread's tcache.</p>"},{"location":"commands/heap/tcachebins/#usage","title":"Usage:","text":"Bash<pre><code>usage: tcachebins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/tcachebins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> The address of the tcache bins."},{"location":"commands/heap/tcachebins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all tcachebins, including empty ones (default: %(default)s)"},{"location":"commands/heap/top_chunk/","title":"top_chunk","text":""},{"location":"commands/heap/top_chunk/#description","title":"Description","text":"<p>Print relevant information about an arena's top chunk.</p> <p>Default to current thread's arena.</p>"},{"location":"commands/heap/top_chunk/#usage","title":"Usage:","text":"Bash<pre><code>usage: top_chunk [-h] [addr]\n</code></pre>"},{"location":"commands/heap/top_chunk/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/top_chunk/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/try_free/","title":"try_free","text":""},{"location":"commands/heap/try_free/#description","title":"Description","text":"<p>Check what would happen if free was called with given address.</p>"},{"location":"commands/heap/try_free/#usage","title":"Usage:","text":"Bash<pre><code>usage: try_free [-h] [addr]\n</code></pre>"},{"location":"commands/heap/try_free/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address passed to free"},{"location":"commands/heap/try_free/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/unsortedbin/","title":"unsortedbin","text":""},{"location":"commands/heap/unsortedbin/#description","title":"Description","text":"<p>Print the contents of an arena's unsortedbin.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/unsortedbin/#usage","title":"Usage:","text":"Bash<pre><code>usage: unsortedbin [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/unsortedbin/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/unsortedbin/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show the \"all\" bin even if it's empty (default: %(default)s)"},{"location":"commands/heap/vis_heap_chunks/","title":"vis_heap_chunks","text":""},{"location":"commands/heap/vis_heap_chunks/#description","title":"Description","text":"<p>Visualize chunks on a heap.</p> <p>Default to the current arena's active heap.</p>"},{"location":"commands/heap/vis_heap_chunks/#usage","title":"Usage:","text":"Bash<pre><code>usage: vis_heap_chunks [-h] [--beyond_top] [--no_truncate] [--all_chunks] [count] [addr]\n</code></pre>"},{"location":"commands/heap/vis_heap_chunks/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> Number of chunks to visualize. If the value is big enough and addr isn't provided, this is interpreted as addr instead. (default: %(default)s) <code>addr</code> Address of the first chunk."},{"location":"commands/heap/vis_heap_chunks/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-b</code> <code>--beyond_top</code> Attempt to keep printing beyond the top chunk. (default: %(default)s) <code>-n</code> <code>--no_truncate</code> Display all the chunk contents (Ignore the <code>max-visualize-chunk-size</code> configuration). (default: %(default)s) <code>-a</code> <code>--all_chunks</code> Display all chunks (Ignore the default-visualize-chunk-number configuration). (default: %(default)s)"},{"location":"commands/hexdump/hexdump/","title":"hexdump","text":""},{"location":"commands/hexdump/hexdump/#description","title":"Description","text":"<p>Hexdumps data at the specified address or module name.</p>"},{"location":"commands/hexdump/hexdump/#usage","title":"Usage:","text":"Bash<pre><code>usage: hexdump [-h] [address] [count]\n</code></pre>"},{"location":"commands/hexdump/hexdump/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address or module name to dump (default: %(default)s) <code>count</code> Number of bytes to dump (default: %(default)s)"},{"location":"commands/hexdump/hexdump/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/down/","title":"down","text":""},{"location":"commands/ida/down/#description","title":"Description","text":"<p>Select and print stack frame called by this one.</p>"},{"location":"commands/ida/down/#usage","title":"Usage:","text":"Bash<pre><code>usage: down [-h] [n]\n</code></pre>"},{"location":"commands/ida/down/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>n</code> The number of stack frames to go down. (default: %(default)s)"},{"location":"commands/ida/down/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/j/","title":"j","text":""},{"location":"commands/ida/j/#description","title":"Description","text":"<p>Synchronize IDA's cursor with GDB.</p>"},{"location":"commands/ida/j/#usage","title":"Usage:","text":"Bash<pre><code>usage: j [-h]\n</code></pre>"},{"location":"commands/ida/j/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/save_ida/","title":"save_ida","text":""},{"location":"commands/ida/save_ida/#description","title":"Description","text":"<p>Save the ida database.</p>"},{"location":"commands/ida/save_ida/#usage","title":"Usage:","text":"Bash<pre><code>usage: save_ida [-h]\n</code></pre>"},{"location":"commands/ida/save_ida/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/up/","title":"up","text":""},{"location":"commands/ida/up/#description","title":"Description","text":"<p>Select and print stack frame that called this one.</p>"},{"location":"commands/ida/up/#usage","title":"Usage:","text":"Bash<pre><code>usage: up [-h] [n]\n</code></pre>"},{"location":"commands/ida/up/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>n</code> The number of stack frames to go up. (default: %(default)s)"},{"location":"commands/ida/up/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ignore/ignore/","title":"ignore","text":""},{"location":"commands/ignore/ignore/#description","title":"Description","text":"<p>Set ignore-count of breakpoint number N to COUNT.</p> <p>While the ignore count is positive, execution will not stop on the breakpoint.</p> <p>By default, if `N' is ommitted, the last breakpoint (i.e. greatest breakpoint number) will be used.</p>"},{"location":"commands/ignore/ignore/#usage","title":"Usage:","text":"Bash<pre><code>usage: ignore [-h] [N] COUNT\n</code></pre>"},{"location":"commands/ignore/ignore/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>bpnum</code> The breakpoint number N. <code>count</code> The number to set COUNT."},{"location":"commands/ignore/ignore/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ipython_interactive/ipi/","title":"ipi","text":""},{"location":"commands/ipython_interactive/ipi/#description","title":"Description","text":"<p>Start an interactive IPython prompt.</p>"},{"location":"commands/ipython_interactive/ipi/#usage","title":"Usage:","text":"Bash<pre><code>usage: ipi [-h]\n</code></pre>"},{"location":"commands/ipython_interactive/ipi/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kbase/kbase/","title":"kbase","text":""},{"location":"commands/kbase/kbase/#description","title":"Description","text":"<p>Finds the kernel virtual base address.</p>"},{"location":"commands/kbase/kbase/#usage","title":"Usage:","text":"Bash<pre><code>usage: kbase [-h]\n</code></pre>"},{"location":"commands/kbase/kbase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kchecksec/kchecksec/","title":"kchecksec","text":""},{"location":"commands/kchecksec/kchecksec/#description","title":"Description","text":"<p>Checks for kernel hardening configuration options.</p>"},{"location":"commands/kchecksec/kchecksec/#usage","title":"Usage:","text":"Bash<pre><code>usage: kchecksec [-h]\n</code></pre>"},{"location":"commands/kchecksec/kchecksec/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kcmdline/kcmdline/","title":"kcmdline","text":""},{"location":"commands/kcmdline/kcmdline/#description","title":"Description","text":"<p>Return the kernel commandline (/proc/cmdline).</p>"},{"location":"commands/kcmdline/kcmdline/#usage","title":"Usage:","text":"Bash<pre><code>usage: kcmdline [-h]\n</code></pre>"},{"location":"commands/kcmdline/kcmdline/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kconfig/kconfig/","title":"kconfig","text":""},{"location":"commands/kconfig/kconfig/#description","title":"Description","text":"<p>Outputs the kernel config (requires CONFIG_IKCONFIG).</p>"},{"location":"commands/kconfig/kconfig/#usage","title":"Usage:","text":"Bash<pre><code>usage: kconfig [-h] [config_name]\n</code></pre>"},{"location":"commands/kconfig/kconfig/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>config_name</code> A config name to search for"},{"location":"commands/kconfig/kconfig/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/killthreads/killthreads/","title":"killthreads","text":""},{"location":"commands/killthreads/killthreads/#description","title":"Description","text":"<p>Kill all or given threads.</p> <p>Switches to given threads and calls pthread_exit(0) on them. This is performed with scheduler-locking to prevent other threads from operating at the same time.</p> <p>Killing all other threads may be useful to use GDB checkpoints, e.g., to test given input &amp; restart the execution to the point of interest (checkpoint).</p>"},{"location":"commands/killthreads/killthreads/#usage","title":"Usage:","text":"Bash<pre><code>usage: killthreads [-h] [-a] [thread_ids ...]\n</code></pre>"},{"location":"commands/killthreads/killthreads/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>thread_ids</code> Thread IDs to kill."},{"location":"commands/killthreads/killthreads/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--all</code> Kill all threads except the current one. (default: %(default)s)"},{"location":"commands/klookup/klookup/","title":"klookup","text":""},{"location":"commands/klookup/klookup/#description","title":"Description","text":"<p>Lookup kernel symbols.</p>"},{"location":"commands/klookup/klookup/#usage","title":"Usage:","text":"Bash<pre><code>usage: klookup [-h] [symbol]\n</code></pre>"},{"location":"commands/klookup/klookup/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>symbol</code> Symbol or address to lookup."},{"location":"commands/klookup/klookup/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kversion/kversion/","title":"kversion","text":""},{"location":"commands/kversion/kversion/#description","title":"Description","text":"<p>Outputs the kernel version (/proc/version).</p>"},{"location":"commands/kversion/kversion/#usage","title":"Usage:","text":"Bash<pre><code>usage: kversion [-h]\n</code></pre>"},{"location":"commands/kversion/kversion/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/leakfind/leakfind/","title":"leakfind","text":""},{"location":"commands/leakfind/leakfind/#description","title":"Description","text":"<p>Attempt to find a leak chain given a starting address. Scans memory near the given address, looks for pointers, and continues that process to attempt to find leaks.</p> <p>Example: leakfind $rsp --page_name=filename --max_offset=0x48 --max_depth=6. This would look for any chains of leaks that point to a section in filename which begin near $rsp, are never 0x48 bytes further from a known pointer, and are a maximum length of 6.</p>"},{"location":"commands/leakfind/leakfind/#usage","title":"Usage:","text":"Bash<pre><code>usage: leakfind [-h] [-p [PAGE_NAME]] [-o [MAX_OFFSET]] [-d [MAX_DEPTH]] [-s [STEP]] [--negative_offset [NEGATIVE_OFFSET]] [address]\n</code></pre>"},{"location":"commands/leakfind/leakfind/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Starting address to find a leak chain from (default: %(default)s)"},{"location":"commands/leakfind/leakfind/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-p</code> <code>--page_name</code> <code>None</code> Substring required to be part of the name of any found pages <code>-o</code> <code>--max_offset</code> <code>72</code> Max offset to add to addresses when looking for leak (default: %(default)s) <code>-d</code> <code>--max_depth</code> <code>4</code> Maximum depth to follow pointers to (default: %(default)s) <code>-s</code> <code>--step</code> <code>1</code> Step to add between pointers so they are considered. For example, if this is 4 it would only consider pointers at an offset divisible by 4 from the starting pointer (default: %(default)s) <code>--negative_offset</code> <code>0</code> Max negative offset to search before an address when looking for a leak (default: %(default)s)"},{"location":"commands/linkmap/linkmap/","title":"linkmap","text":""},{"location":"commands/linkmap/linkmap/#description","title":"Description","text":"<p>Show the state of the Link Map</p>"},{"location":"commands/linkmap/linkmap/#usage","title":"Usage:","text":"Bash<pre><code>usage: linkmap [-h]\n</code></pre>"},{"location":"commands/linkmap/linkmap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/memoize/memoize/","title":"memoize","text":""},{"location":"commands/memoize/memoize/#description","title":"Description","text":"<p>Toggles memoization (caching).</p> <p>Useful for diagnosing caching-related bugs. Decreases performance.</p>"},{"location":"commands/memoize/memoize/#usage","title":"Usage:","text":"Bash<pre><code>usage: memoize [-h]\n</code></pre>"},{"location":"commands/memoize/memoize/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/misc/errno_/","title":"errno","text":""},{"location":"commands/misc/errno_/#description","title":"Description","text":"<p>Converts errno (or argument) to its string representation.</p>"},{"location":"commands/misc/errno_/#usage","title":"Usage:","text":"Bash<pre><code>usage: errno [-h] [err]\n</code></pre>"},{"location":"commands/misc/errno_/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>err</code> Errno; if not passed, it is retrieved from __errno_location"},{"location":"commands/misc/errno_/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/misc/pwndbg_/","title":"pwndbg","text":""},{"location":"commands/misc/pwndbg_/#description","title":"Description","text":"<p>Prints out a list of all pwndbg commands.</p>"},{"location":"commands/misc/pwndbg_/#usage","title":"Usage:","text":"Bash<pre><code>usage: pwndbg [-h] [--shell | --all] [-c CATEGORY_ | --list-categories] [filter_pattern]\n</code></pre>"},{"location":"commands/misc/pwndbg_/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to commands names/docs"},{"location":"commands/misc/pwndbg_/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--shell</code> Only display shell commands (default: %(default)s) <code>--all</code> Only display shell commands (default: %(default)s) <code>-c</code> <code>--category</code> <code>None</code> Filter commands by category <code>--list-categories</code> List command categories (default: %(default)s)"},{"location":"commands/mmap/mmap/","title":"mmap","text":""},{"location":"commands/mmap/mmap/#description","title":"Description","text":"<p>Calls the mmap syscall and prints its resulting address.</p> <p>Note that the mmap syscall may fail for various reasons (see <code>man mmap</code>) and, in case of failure, its return value will not be a valid pointer.</p> <p>PROT values: NONE (0), READ (1), WRITE (2), EXEC (4) MAP values: SHARED (1), PRIVATE (2), SHARED_VALIDATE (3), FIXED (0x10),             ANONYMOUS (0x20)</p> <p>Flags and protection values can be either a string containing the names of the flags or permissions or a single number corresponding to the bitwise OR of the protection and flag numbers.</p> <p>Examples:     mmap 0x0 4096 PROT_READ|PROT_WRITE|PROT_EXEC MAP_PRIVATE|MAP_ANONYMOUS -1 0      - Maps a new private+anonymous page with RWX permissions at a location        decided by the kernel.</p> Text Only<pre><code>mmap 0x0 4096 PROT_READ MAP_PRIVATE 10 0\n - Maps 4096 bytes of the file pointed to by file descriptor number 10 with\n   read permission at a location decided by the kernel.\n\nmmap 0xdeadbeef 0x1000\n - Maps a new private+anonymous page with RWX permissions at a page boundary\n   near 0xdeadbeef.\n</code></pre>"},{"location":"commands/mmap/mmap/#usage","title":"Usage:","text":"Bash<pre><code>usage: mmap [-h] [--quiet] [--force] addr length [prot] [flags] [fd] [offset]\n</code></pre>"},{"location":"commands/mmap/mmap/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address hint to be given to mmap. <code>length</code> Length of the mapping, in bytes. Needs to be greater than zero. <code>prot</code> Prot enum or int as in mmap(2). Eg. \"PROT_READ|PROT_EXEC\" or 7 (for RWX). (default: %(default)s) <code>flags</code> Flags enum or int as in mmap(2). Eg. \"MAP_PRIVATE|MAP_ANONYMOUS\" or 0x22. (default: %(default)s) <code>fd</code> File descriptor of the file to be mapped, or -1 if using MAP_ANONYMOUS. (default: %(default)s) <code>offset</code> Offset from the start of the file, in bytes, if using file based mapping. (default: %(default)s)"},{"location":"commands/mmap/mmap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-q</code> <code>--quiet</code> Disable address validity warnings and hints (default: %(default)s) <code>-f</code> <code>--force</code> Force potentially unsafe actions to happen (default: %(default)s)"},{"location":"commands/mprotect/mprotect/","title":"mprotect","text":""},{"location":"commands/mprotect/mprotect/#description","title":"Description","text":"<p>Calls the mprotect syscall and prints its result value.</p> <p>Note that the mprotect syscall may fail for various reasons (see <code>man mprotect</code>) and a non-zero error return value can be decoded with the <code>errno &lt;value&gt;</code> command.</p> <p>Examples:     mprotect $rsp 4096 PROT_READ|PROT_WRITE|PROT_EXEC     mprotect some_symbol 0x1000 PROT_NONE</p>"},{"location":"commands/mprotect/mprotect/#usage","title":"Usage:","text":"Bash<pre><code>usage: mprotect [-h] addr length prot\n</code></pre>"},{"location":"commands/mprotect/mprotect/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Page-aligned address to all mprotect on. <code>length</code> Count of bytes to call mprotect on. Needs to be multiple of page size. <code>prot</code> Prot string as in mprotect(2). Eg. \"PROT_READ|PROT_EXEC\""},{"location":"commands/mprotect/mprotect/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/nearpc/emulate/","title":"emulate","text":""},{"location":"commands/nearpc/emulate/#description","title":"Description","text":"<p>Like nearpc, but will emulate instructions from the current $PC forward.</p>"},{"location":"commands/nearpc/emulate/#usage","title":"Usage:","text":"Bash<pre><code>usage: emulate [-h] [pc] [lines]\n</code></pre>"},{"location":"commands/nearpc/emulate/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>pc</code> Address to emulate near. <code>lines</code> Number of lines to show on either side of the address."},{"location":"commands/nearpc/emulate/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/nearpc/nearpc/","title":"nearpc","text":""},{"location":"commands/nearpc/nearpc/#description","title":"Description","text":"<p>Disassemble near a specified address.</p>"},{"location":"commands/nearpc/nearpc/#usage","title":"Usage:","text":"Bash<pre><code>usage: nearpc [-h] [-e] [pc] [lines]\n</code></pre>"},{"location":"commands/nearpc/nearpc/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>pc</code> Address to disassemble near. If this is the only argument and the value provided is small enough, it is interpreted as lines instead. <code>lines</code> Number of lines to show on either side of the address."},{"location":"commands/nearpc/nearpc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-e</code> <code>--emulate</code> Whether to emulate instructions to find the next ones or just linearly disassemble. (default: %(default)s)"},{"location":"commands/next/nextcall/","title":"nextcall","text":""},{"location":"commands/next/nextcall/#description","title":"Description","text":"<p>Breaks at the next call instruction.</p>"},{"location":"commands/next/nextcall/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextcall [-h] [symbol_regex]\n</code></pre>"},{"location":"commands/next/nextcall/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>symbol_regex</code> A regex matching the name of next symbol to be broken on before calling."},{"location":"commands/next/nextcall/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextjmp/","title":"nextjmp","text":""},{"location":"commands/next/nextjmp/#description","title":"Description","text":"<p>Breaks at the next jump instruction.</p>"},{"location":"commands/next/nextjmp/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextjmp [-h]\n</code></pre>"},{"location":"commands/next/nextjmp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextproginstr/","title":"nextproginstr","text":""},{"location":"commands/next/nextproginstr/#description","title":"Description","text":"<p>Breaks at the next instruction that belongs to the running program.</p>"},{"location":"commands/next/nextproginstr/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextproginstr [-h]\n</code></pre>"},{"location":"commands/next/nextproginstr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextret/","title":"nextret","text":""},{"location":"commands/next/nextret/#description","title":"Description","text":"<p>Breaks at next return-like instruction.</p>"},{"location":"commands/next/nextret/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextret [-h]\n</code></pre>"},{"location":"commands/next/nextret/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextsyscall/","title":"nextsyscall","text":""},{"location":"commands/next/nextsyscall/#description","title":"Description","text":"<p>Breaks at the next syscall not taking branches.</p>"},{"location":"commands/next/nextsyscall/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextsyscall [-h]\n</code></pre>"},{"location":"commands/next/nextsyscall/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepover/","title":"stepover","text":""},{"location":"commands/next/stepover/#description","title":"Description","text":"<p>Breaks on the instruction after this one.</p>"},{"location":"commands/next/stepover/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepover [-h] [addr]\n</code></pre>"},{"location":"commands/next/stepover/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> The address to break after."},{"location":"commands/next/stepover/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepret/","title":"stepret","text":""},{"location":"commands/next/stepret/#description","title":"Description","text":"<p>Breaks at next return-like instruction by 'stepping' to it.</p>"},{"location":"commands/next/stepret/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepret [-h]\n</code></pre>"},{"location":"commands/next/stepret/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepsyscall/","title":"stepsyscall","text":""},{"location":"commands/next/stepsyscall/#description","title":"Description","text":"<p>Breaks at the next syscall by taking branches.</p>"},{"location":"commands/next/stepsyscall/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepsyscall [-h]\n</code></pre>"},{"location":"commands/next/stepsyscall/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepuntilasm/","title":"stepuntilasm","text":""},{"location":"commands/next/stepuntilasm/#description","title":"Description","text":"<p>Breaks on the next matching instruction.</p>"},{"location":"commands/next/stepuntilasm/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepuntilasm [-h] mnemonic [op_str ...]\n</code></pre>"},{"location":"commands/next/stepuntilasm/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>mnemonic</code> The mnemonic of the instruction <code>op_str</code> The operands of the instruction"},{"location":"commands/next/stepuntilasm/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/p2p/p2p/","title":"p2p","text":""},{"location":"commands/p2p/p2p/#description","title":"Description","text":"<p>Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.</p> <p>Any chain length greater than 0 is valid. If only one mapping is given it just looks for any pointers in that mapping.</p>"},{"location":"commands/p2p/p2p/#usage","title":"Usage:","text":"Bash<pre><code>usage: p2p [-h] mapping_names [mapping_names ...]\n</code></pre>"},{"location":"commands/p2p/p2p/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>mapping_names</code> Mapping name"},{"location":"commands/p2p/p2p/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/p2p/ts/","title":"telescope","text":""},{"location":"commands/p2p/ts/#description","title":"Description","text":"<p>Recursively dereferences pointers starting at the specified address.</p>"},{"location":"commands/p2p/ts/#usage","title":"Usage:","text":"Bash<pre><code>usage: telescope [-h] [-r] [-f] [-i] [address] [count]\n</code></pre>"},{"location":"commands/p2p/ts/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to telescope at. (default: %(default)s) <code>count</code> The number of lines to show. (default: %(default)s)"},{"location":"commands/p2p/ts/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-r</code> <code>--reverse</code> Show  previous addresses instead of next ones (default: %(default)s) <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show the stack reverse growth (default: %(default)s)"},{"location":"commands/patch/patch/","title":"patch","text":""},{"location":"commands/patch/patch/#description","title":"Description","text":"<p>Patches given instruction with given code or bytes.</p>"},{"location":"commands/patch/patch/#usage","title":"Usage:","text":"Bash<pre><code>usage: patch [-h] [-q] address ins\n</code></pre>"},{"location":"commands/patch/patch/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to patch <code>ins</code> instruction[s]"},{"location":"commands/patch/patch/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-q</code> <code>--quiet</code> don't print anything (default: %(default)s)"},{"location":"commands/patch/patch_list/","title":"patch_list","text":""},{"location":"commands/patch/patch_list/#description","title":"Description","text":"<p>List all patches.</p>"},{"location":"commands/patch/patch_list/#usage","title":"Usage:","text":"Bash<pre><code>usage: patch_list [-h]\n</code></pre>"},{"location":"commands/patch/patch_list/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/patch/patch_revert/","title":"patch_revert","text":""},{"location":"commands/patch/patch_revert/#description","title":"Description","text":"<p>Revert patch at given address.</p>"},{"location":"commands/patch/patch_revert/#usage","title":"Usage:","text":"Bash<pre><code>usage: patch_revert [-h] address\n</code></pre>"},{"location":"commands/patch/patch_revert/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to revert patch on"},{"location":"commands/patch/patch_revert/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/peda/getfile/","title":"getfile","text":""},{"location":"commands/peda/getfile/#description","title":"Description","text":"<p>Gets the current file.</p>"},{"location":"commands/peda/getfile/#usage","title":"Usage:","text":"Bash<pre><code>usage: getfile [-h]\n</code></pre>"},{"location":"commands/peda/getfile/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/peda/xinfo/","title":"context","text":""},{"location":"commands/peda/xinfo/#description","title":"Description","text":"<p>Print out the current register, instruction, and stack context.</p>"},{"location":"commands/peda/xinfo/#usage","title":"Usage:","text":"Bash<pre><code>usage: context [-h] [subcontext ...]\n</code></pre>"},{"location":"commands/peda/xinfo/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>subcontext</code> Submenu to display: 'reg', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', and/or 'args'"},{"location":"commands/peda/xinfo/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/peda/xprint/","title":"telescope","text":""},{"location":"commands/peda/xprint/#description","title":"Description","text":"<p>Recursively dereferences pointers starting at the specified address.</p>"},{"location":"commands/peda/xprint/#usage","title":"Usage:","text":"Bash<pre><code>usage: telescope [-h] [-r] [-f] [-i] [address] [count]\n</code></pre>"},{"location":"commands/peda/xprint/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to telescope at. (default: %(default)s) <code>count</code> The number of lines to show. (default: %(default)s)"},{"location":"commands/peda/xprint/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-r</code> <code>--reverse</code> Show  previous addresses instead of next ones (default: %(default)s) <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show the stack reverse growth (default: %(default)s)"},{"location":"commands/peda/xuntil/","title":"xuntil","text":""},{"location":"commands/peda/xuntil/#description","title":"Description","text":"<p>Continue execution until an address or function.</p>"},{"location":"commands/peda/xuntil/#usage","title":"Usage:","text":"Bash<pre><code>usage: xuntil [-h] target\n</code></pre>"},{"location":"commands/peda/xuntil/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>target</code> Address or function to stop execution at"},{"location":"commands/peda/xuntil/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/pie/breakrva/","title":"breakrva","text":""},{"location":"commands/pie/breakrva/#description","title":"Description","text":"<p>Break at RVA from PIE base.</p>"},{"location":"commands/pie/breakrva/#usage","title":"Usage:","text":"Bash<pre><code>usage: breakrva [-h] [offset] [module]\n</code></pre>"},{"location":"commands/pie/breakrva/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>offset</code> Offset to add. (default: %(default)s) <code>module</code> Module to choose as base. Defaults to the target executable. (default: %(default)s)"},{"location":"commands/pie/breakrva/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/pie/piebase/","title":"piebase","text":""},{"location":"commands/pie/piebase/#description","title":"Description","text":"<p>Calculate VA of RVA from PIE base.</p>"},{"location":"commands/pie/piebase/#usage","title":"Usage:","text":"Bash<pre><code>usage: piebase [-h] [offset] [module]\n</code></pre>"},{"location":"commands/pie/piebase/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>offset</code> Offset from PIE base. (default: %(default)s) <code>module</code> Module to choose as base. Defaults to the target executable. (default: %(default)s)"},{"location":"commands/pie/piebase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/plist/plist/","title":"plist","text":""},{"location":"commands/plist/plist/#description","title":"Description","text":"<p>Dumps the elements of a linked list.</p> <p>This command traverses the linked list beginning at a given element, dumping its contents and the contents of all the elements that come after it in the list. Traversal is configurable and can handle multiple types of linked lists, but will always stop when a cycle is detected.</p> <p>The path to the first element can be any GDB expression that evaluates to either the first element directly, or a to pointer to it. The next element is the name of the field containing the next pointer, in either the structure itself or in the structure given by --inner.</p> <p>An address value may be given with --sentinel that signals the end of the list. By default, the value used is NULL (0).</p> <p>If only one field inside each node is desired, it can be printed exclusively by specifying its name with --field.</p> <p>This command supports traversing three types of linked lists, classified by how the next pointer can be found in the structure and what type it is:     1 - Next pointer is field of structure, type is the same as structure.     2 - Next pointer is field of inner nested structure, pointed to type is the         same as outer structure.     3 - Next pointer is field of inner nested structure, pointed to type is the         same as inner structure. Types 2 and 3 require --inner to be specified.</p> <p>Example 1:</p> Text Only<pre><code>struct node {\n    int value;\n    struct node *next;\n};\nstruct node node_c = { 2, NULL };\nstruct node node_b = { 1, &amp;node_c };\nstruct node node_a = { 0, &amp;node_b };\n</code></pre> <p>pwndbg&gt; plist node_a next 0x4000011050 : {   value = 0,   next = 0x4000011040  } 0x4000011040 : {   value = 1,   next = 0x4000011010  } 0x4000011010 : {   value = 2,   next = 0x0 } <p>Example 2:</p> Text Only<pre><code>struct node_inner_a {\n    struct node_inner_a *next;\n};\nstruct inner_a_node {\n    int value;\n    struct node_inner_a inner;\n};\nstruct inner_a_node inner_a_node_c = { 2, { NULL } };\nstruct inner_a_node inner_a_node_b = { 1, { &amp;inner_a_node_c.inner } };\nstruct inner_a_node inner_a_node_a = { 0, { &amp;inner_a_node_b.inner } };\n</code></pre> <p>pwndbg&gt; plist inner_a_node_a -i inner next 0x4000011070 : {   value = 0,   inner = {     next = 0x4000011068    } } 0x4000011060 : {   value = 1,   inner = {     next = 0x4000011028    } } 0x4000011020 : {   value = 2,   inner = {     next = 0x0   } } <p>Example 3:</p> Text Only<pre><code>struct inner_b_node;\nstruct node_inner_b {\n    struct inner_b_node *next;\n};\nstruct inner_b_node {\n    int value;\n    struct node_inner_b inner;\n};\nstruct inner_b_node inner_b_node_c = { 2, { NULL } };\nstruct inner_b_node inner_b_node_b = { 1, { &amp;inner_b_node_c } };\nstruct inner_b_node inner_b_node_a = { 0, { &amp;inner_b_node_b } };\n</code></pre> <p>pwndbg&gt; plist inner_b_node_a -i inner next 0x4000011090 : {   value = 0,   inner = {     next = 0x4000011080    } } 0x4000011080 : {   value = 1,   inner = {     next = 0x4000011030    } } 0x4000011030 : {   value = 2,   inner = {     next = 0x0   } }"},{"location":"commands/plist/plist/#usage","title":"Usage:","text":"Bash<pre><code>usage: plist [-h] [-s SENTINEL] [-i INNER_NAME] [-f FIELD_NAME] path next\n</code></pre>"},{"location":"commands/plist/plist/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>path</code> The first element of the linked list <code>next</code> The name of the field pointing to the next element in the list"},{"location":"commands/plist/plist/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-s</code> <code>--sentinel</code> <code>0</code> The address that stands in for an end of list marker in a non-cyclic list (default: %(default)s) <code>-i</code> <code>--inner</code> <code>None</code> The name of the inner nested structure where the next pointer is stored <code>-f</code> <code>--field</code> <code>None</code> The name of the field to be displayed, if only one is desired"},{"location":"commands/probeleak/probeleak/","title":"probeleak","text":""},{"location":"commands/probeleak/probeleak/#description","title":"Description","text":"<p>Pointer scan for possible offset leaks. Examples:     probeleak $rsp 0x64 - leaks 0x64 bytes starting at stack pointer and search for valid pointers     probeleak $rsp 0x64 --max-dist 0x10 - as above, but pointers may point 0x10 bytes outside of memory page     probeleak $rsp 0x64 --point-to libc --max-ptrs 1 --flags rwx - leaks 0x64 bytes starting at stack pointer and search for one valid pointer which points to a libc rwx page</p>"},{"location":"commands/probeleak/probeleak/#usage","title":"Usage:","text":"Bash<pre><code>usage: probeleak [-h] [--max-distance MAX_DISTANCE] [--point-to POINT_TO] [--max-ptrs MAX_PTRS] [--flags FLAGS] [address] [count]\n</code></pre>"},{"location":"commands/probeleak/probeleak/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Leak memory address (default: %(default)s) <code>count</code> Leak size in bytes (default: %(default)s)"},{"location":"commands/probeleak/probeleak/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--max-distance</code> <code>0</code> Max acceptable distance between memory page boundary and leaked pointer (default: %(default)s) <code>--point-to</code> <code>None</code> Mapping name of the page that you want the pointers point to <code>--max-ptrs</code> <code>0</code> Stop search after find n pointers, default 0 (default: %(default)s) <code>--flags</code> <code>None</code> flags of the page that you want the pointers point to. [e.g. rwx]"},{"location":"commands/procinfo/pid/","title":"pid","text":""},{"location":"commands/procinfo/pid/#description","title":"Description","text":"<p>Gets the pid.</p>"},{"location":"commands/procinfo/pid/#usage","title":"Usage:","text":"Bash<pre><code>usage: pid [-h]\n</code></pre>"},{"location":"commands/procinfo/pid/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/procinfo/procinfo/","title":"procinfo","text":""},{"location":"commands/procinfo/procinfo/#description","title":"Description","text":"<p>Display information about the running process.</p>"},{"location":"commands/procinfo/procinfo/#usage","title":"Usage:","text":"Bash<pre><code>usage: procinfo [-h]\n</code></pre>"},{"location":"commands/procinfo/procinfo/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/radare2/r2/","title":"r2","text":""},{"location":"commands/radare2/r2/#description","title":"Description","text":"<p>Launches radare2.</p>"},{"location":"commands/radare2/r2/#usage","title":"Usage:","text":"Bash<pre><code>usage: r2 [-h] [--no-seek] [--no-rebase] [arguments ...]\n</code></pre>"},{"location":"commands/radare2/r2/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to radare"},{"location":"commands/radare2/r2/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--no-seek</code> Do not seek to current pc (default: %(default)s) <code>--no-rebase</code> Do not set the base address for PIE according to the current mapping (default: %(default)s)"},{"location":"commands/radare2/r2pipe/","title":"r2pipe","text":""},{"location":"commands/radare2/r2pipe/#description","title":"Description","text":"<p>Execute stateful radare2 commands through r2pipe.</p>"},{"location":"commands/radare2/r2pipe/#usage","title":"Usage:","text":"Bash<pre><code>usage: r2pipe [-h] arguments [arguments ...]\n</code></pre>"},{"location":"commands/radare2/r2pipe/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to r2pipe"},{"location":"commands/radare2/r2pipe/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/reload/reinit_pwndbg/","title":"reinit_pwndbg","text":""},{"location":"commands/reload/reinit_pwndbg/#description","title":"Description","text":"<p>Makes pwndbg reinitialize all state.</p>"},{"location":"commands/reload/reinit_pwndbg/#usage","title":"Usage:","text":"Bash<pre><code>usage: reinit_pwndbg [-h]\n</code></pre>"},{"location":"commands/reload/reinit_pwndbg/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/reload/reload/","title":"reload","text":""},{"location":"commands/reload/reload/#description","title":"Description","text":"<p>Reload pwndbg.</p>"},{"location":"commands/reload/reload/#usage","title":"Usage:","text":"Bash<pre><code>usage: reload [-h]\n</code></pre>"},{"location":"commands/reload/reload/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/rizin/rz/","title":"rz","text":""},{"location":"commands/rizin/rz/#description","title":"Description","text":"<p>Launches rizin.</p>"},{"location":"commands/rizin/rz/#usage","title":"Usage:","text":"Bash<pre><code>usage: rz [-h] [--no-seek] [--no-rebase] [arguments ...]\n</code></pre>"},{"location":"commands/rizin/rz/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to rizin"},{"location":"commands/rizin/rz/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--no-seek</code> Do not seek to current pc (default: %(default)s) <code>--no-rebase</code> Do not set the base address for PIE according to the current mapping (default: %(default)s)"},{"location":"commands/rizin/rzpipe/","title":"rzpipe","text":""},{"location":"commands/rizin/rzpipe/#description","title":"Description","text":"<p>Execute stateful rizin commands through rzpipe.</p>"},{"location":"commands/rizin/rzpipe/#usage","title":"Usage:","text":"Bash<pre><code>usage: rzpipe [-h] arguments [arguments ...]\n</code></pre>"},{"location":"commands/rizin/rzpipe/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to rzpipe"},{"location":"commands/rizin/rzpipe/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/rop/rop/","title":"rop","text":""},{"location":"commands/rop/rop/#description","title":"Description","text":"<p>Dump ROP gadgets with Jon Salwan's ROPgadget tool.</p>"},{"location":"commands/rop/rop/#usage","title":"Usage:","text":"Bash<pre><code>usage: rop [-h] [--grep GREP] [argument ...]\n</code></pre>"},{"location":"commands/rop/rop/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>argument</code> Arguments to pass to ROPgadget"},{"location":"commands/rop/rop/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--grep</code> <code>None</code> String to grep the output for"},{"location":"commands/ropper/ropper/","title":"ropper","text":""},{"location":"commands/ropper/ropper/#description","title":"Description","text":"<p>ROP gadget search with ropper.</p>"},{"location":"commands/ropper/ropper/#usage","title":"Usage:","text":"Bash<pre><code>usage: ropper [-h] [argument ...]\n</code></pre>"},{"location":"commands/ropper/ropper/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>argument</code> Arguments to pass to ropper"},{"location":"commands/ropper/ropper/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/search/search/","title":"search","text":""},{"location":"commands/search/search/#description","title":"Description","text":"<p>Search memory for byte sequences, strings, pointers, and integer values.</p> <p>By default search results are cached. If you want to cache all results, but only print a subset, use --trunc-out. If you want to cache only a subset of results, and print the results immediately, use --limit. The latter is specially useful if you're searching a huge section of memory.</p>"},{"location":"commands/search/search/#usage","title":"Usage:","text":"Bash<pre><code>usage: search [-h] [-t {byte,short,word,dword,qword,pointer,string,bytes}] [-1] [-2] [-4] [-8] [-p] [-x] [-e] [-w] [-s STEP] [-l LIMIT] [-a ALIGNED] [--save] [--no-save] [-n]\n              [--trunc-out]\n              value [mapping_name]\n</code></pre>"},{"location":"commands/search/search/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>value</code> Value to search for <code>mapping_name</code> Mapping to search [e.g. libc]"},{"location":"commands/search/search/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-t</code> <code>--type</code> <code>bytes</code> Size of search target (default: %(default)s) <code>-1</code> <code>--byte</code> <code>None</code> Search for a 1-byte integer <code>-2</code> <code>--short</code> <code>None</code> Search for a 2-byte integer <code>-4</code> <code>--dword</code> <code>None</code> Search for a 4-byte integer <code>-8</code> <code>--qword</code> <code>None</code> Search for an 8-byte integer <code>-p</code> <code>--pointer</code> <code>None</code> Search for a pointer-width integer <code>-x</code> <code>--hex</code> Target is a hex-encoded (for bytes/strings) (default: %(default)s) <code>-e</code> <code>--executable</code> Search executable segments only (default: %(default)s) <code>-w</code> <code>--writable</code> Search writable segments only (default: %(default)s) <code>-s</code> <code>--step</code> <code>None</code> Step search address forward to next alignment after each hit (ex: 0x1000) <code>-l</code> <code>--limit</code> <code>None</code> Max results before quitting the search. Differs from --trunc-out in that it will not save all search results before quitting <code>-a</code> <code>--aligned</code> <code>None</code> Result must be aligned to this byte boundary <code>--save</code> <code>None</code> Save results for further searches with --next. Default comes from config 'auto-save-search' <code>--no-save</code> <code>None</code> Invert --save <code>-n</code> <code>--next</code> Search only locations returned by previous search with --save (default: %(default)s) <code>--trunc-out</code> Truncate the output to 20 results. Differs from --limit in that it will first save all search results (default: %(default)s)"},{"location":"commands/segments/fsbase/","title":"fsbase","text":""},{"location":"commands/segments/fsbase/#description","title":"Description","text":"<p>Prints out the FS base address. See also $fsbase.</p>"},{"location":"commands/segments/fsbase/#usage","title":"Usage:","text":"Bash<pre><code>usage: fsbase [-h]\n</code></pre>"},{"location":"commands/segments/fsbase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/segments/gsbase/","title":"gsbase","text":""},{"location":"commands/segments/gsbase/#description","title":"Description","text":"<p>Prints out the GS base address. See also $gsbase.</p>"},{"location":"commands/segments/gsbase/#usage","title":"Usage:","text":"Bash<pre><code>usage: gsbase [-h]\n</code></pre>"},{"location":"commands/segments/gsbase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/sigreturn/sigreturn/","title":"sigreturn","text":""},{"location":"commands/sigreturn/sigreturn/#description","title":"Description","text":"<p>Display the SigreturnFrame at the specific address</p>"},{"location":"commands/sigreturn/sigreturn/#usage","title":"Usage:","text":"Bash<pre><code>usage: sigreturn [-h] [-a] [-p] [address]\n</code></pre>"},{"location":"commands/sigreturn/sigreturn/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to read the frame from"},{"location":"commands/sigreturn/sigreturn/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--all</code> Show all values in the frame in addition to common registers (default: %(default)s) <code>-p</code> <code>--print</code> Show addresses of frame values (default: %(default)s)"},{"location":"commands/slab/slab/","title":"slab","text":""},{"location":"commands/slab/slab/#description","title":"Description","text":"<p>Prints information about the slab allocator</p>"},{"location":"commands/slab/slab/#usage","title":"Usage:","text":"Bash<pre><code>usage: slab [-h] {list,info,contains} ...\n</code></pre>"},{"location":"commands/slab/slab/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>command</code> <code>None</code>"},{"location":"commands/slab/slab/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/spray/spray/","title":"spray","text":""},{"location":"commands/spray/spray/#description","title":"Description","text":"<p>Spray memory with cyclic() generated values</p>"},{"location":"commands/spray/spray/#usage","title":"Usage:","text":"Bash<pre><code>usage: spray [-h] [--value VALUE] [-x] addr [length]\n</code></pre>"},{"location":"commands/spray/spray/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address to spray <code>length</code> Length of byte sequence, when unspecified sprays until the end of vmmap which address belongs to (default: %(default)s)"},{"location":"commands/spray/spray/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--value</code> <code>None</code> Value to spray memory with, when prefixed with '0x' treated as hex string encoded big-endian <code>-x</code> <code>--only-funcptrs</code> Spray only addresses whose values points to executable pages (default: %(default)s)"},{"location":"commands/stack/retaddr/","title":"retaddr","text":""},{"location":"commands/stack/retaddr/#description","title":"Description","text":"<p>Print out the stack addresses that contain return addresses.</p>"},{"location":"commands/stack/retaddr/#usage","title":"Usage:","text":"Bash<pre><code>usage: retaddr [-h]\n</code></pre>"},{"location":"commands/stack/retaddr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/start/entry/","title":"entry","text":""},{"location":"commands/start/entry/#description","title":"Description","text":"<p>Start the debugged program stopping at its entrypoint address.</p> <p>Note that the entrypoint may not be the first instruction executed by the program. If you want to stop on the first executed instruction, use the GDB's <code>starti</code> command.</p> <p>Args may include \"*\", or \"[...]\"; they are expanded using the shell that will start the program (specified by the \"$SHELL\" environment variable).  Input and output redirection with \"&gt;\", \"&lt;\", or \"&gt;&gt;\" are also allowed.</p> <p>With no arguments, uses arguments last specified (with \"run\" or \"set args\").  To cancel previous arguments and run with no arguments, use \"set args\" without arguments.</p> <p>To start the inferior without using a shell, use \"set startup-with-shell off\".</p>"},{"location":"commands/start/entry/#usage","title":"Usage:","text":"Bash<pre><code>usage: entry [-h] [args ...]\n</code></pre>"},{"location":"commands/start/entry/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>args</code> The arguments to run the binary with. (default: %(default)s)"},{"location":"commands/start/entry/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/start/sstart/","title":"sstart","text":""},{"location":"commands/start/sstart/#description","title":"Description","text":"<p>Alias for 'tbreak __libc_start_main; run'.</p>"},{"location":"commands/start/sstart/#usage","title":"Usage:","text":"Bash<pre><code>usage: sstart [-h]\n</code></pre>"},{"location":"commands/start/sstart/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/start/start/","title":"start","text":""},{"location":"commands/start/start/#description","title":"Description","text":"<p>Start the debugged program stopping at the first convenient location from this list: main, _main, start, _start, init or _init. You may specify arguments to give it.</p> <p>Args may include \"*\", or \"[...]\"; they are expanded using the shell that will start the program (specified by the \"$SHELL\" environment variable).  Input and output redirection with \"&gt;\", \"&lt;\", or \"&gt;&gt;\" are also allowed.</p> <p>With no arguments, uses arguments last specified (with \"run\" or \"set args\").  To cancel previous arguments and run with no arguments, use \"set args\" without arguments.</p> <p>To start the inferior without using a shell, use \"set startup-with-shell off\".</p>"},{"location":"commands/start/start/#usage","title":"Usage:","text":"Bash<pre><code>usage: start [-h] [args ...]\n</code></pre>"},{"location":"commands/start/start/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>args</code> The arguments to run the binary with."},{"location":"commands/start/start/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/telescope/stack/","title":"stack","text":""},{"location":"commands/telescope/stack/#description","title":"Description","text":"<p>Dereferences on stack data with specified count and offset.</p>"},{"location":"commands/telescope/stack/#usage","title":"Usage:","text":"Bash<pre><code>usage: stack [-h] [-f] [-i] [count] [offset]\n</code></pre>"},{"location":"commands/telescope/stack/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> number of element to dump (default: %(default)s) <code>offset</code> Element offset from $sp (support negative offset) (default: %(default)s)"},{"location":"commands/telescope/stack/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show reverse stack growth (default: %(default)s)"},{"location":"commands/telescope/stackf/","title":"stackf","text":""},{"location":"commands/telescope/stackf/#description","title":"Description","text":"<p>Dereferences on stack data, printing the entire stack frame with specified count and offset .</p>"},{"location":"commands/telescope/stackf/#usage","title":"Usage:","text":"Bash<pre><code>usage: stackf [-h] [count] [offset]\n</code></pre>"},{"location":"commands/telescope/stackf/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> number of element to dump (default: %(default)s) <code>offset</code> Element offset from $sp (support negative offset) (default: %(default)s)"},{"location":"commands/telescope/stackf/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/telescope/telescope/","title":"telescope","text":""},{"location":"commands/telescope/telescope/#description","title":"Description","text":"<p>Recursively dereferences pointers starting at the specified address.</p>"},{"location":"commands/telescope/telescope/#usage","title":"Usage:","text":"Bash<pre><code>usage: telescope [-h] [-r] [-f] [-i] [address] [count]\n</code></pre>"},{"location":"commands/telescope/telescope/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to telescope at. (default: %(default)s) <code>count</code> The number of lines to show. (default: %(default)s)"},{"location":"commands/telescope/telescope/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-r</code> <code>--reverse</code> Show  previous addresses instead of next ones (default: %(default)s) <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show the stack reverse growth (default: %(default)s)"},{"location":"commands/tips/tips/","title":"tips","text":""},{"location":"commands/tips/tips/#description","title":"Description","text":"<p>Shows tips.</p>"},{"location":"commands/tips/tips/#usage","title":"Usage:","text":"Bash<pre><code>usage: tips [-h] [-a]\n</code></pre>"},{"location":"commands/tips/tips/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--all</code> Show all tips. (default: %(default)s)"},{"location":"commands/tls/threads/","title":"threads","text":""},{"location":"commands/tls/threads/#description","title":"Description","text":"<p>List all threads belonging to the selected inferior.</p>"},{"location":"commands/tls/threads/#usage","title":"Usage:","text":"Bash<pre><code>usage: threads [-h] [-c] [num_threads]\n</code></pre>"},{"location":"commands/tls/threads/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>num_threads</code> Number of threads to display. Omit to display all threads."},{"location":"commands/tls/threads/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-c</code> <code>--config</code> Respect context-max-threads config to limit number of threads displayed. (default: %(default)s)"},{"location":"commands/tls/tls/","title":"tls","text":""},{"location":"commands/tls/tls/#description","title":"Description","text":"<p>Print out base address of the current Thread Local Storage (TLS).</p>"},{"location":"commands/tls/tls/#usage","title":"Usage:","text":"Bash<pre><code>usage: tls [-h] [-p]\n</code></pre>"},{"location":"commands/tls/tls/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-p</code> <code>--pthread-self</code> Try to get the address of TLS by calling pthread_self(). (default: %(default)s)"},{"location":"commands/valist/valist/","title":"valist","text":""},{"location":"commands/valist/valist/#description","title":"Description","text":"<p>Dumps the arguments of a va_list.</p>"},{"location":"commands/valist/valist/#usage","title":"Usage:","text":"Bash<pre><code>usage: valist [-h] addr [count]\n</code></pre>"},{"location":"commands/valist/valist/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the va_list <code>count</code> Number of arguments to dump (default: %(default)s)"},{"location":"commands/valist/valist/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/version/bugreport/","title":"bugreport","text":""},{"location":"commands/version/bugreport/#description","title":"Description","text":"<p>Generate a bug report.</p>"},{"location":"commands/version/bugreport/#usage","title":"Usage:","text":"Bash<pre><code>usage: bugreport [-h] [--run-browser | --use-gh]\n</code></pre>"},{"location":"commands/version/bugreport/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-b</code> <code>--run-browser</code> Open browser on github/issues/new (default: %(default)s) <code>-g</code> <code>--use-gh</code> Create issue using Github CLI (default: %(default)s)"},{"location":"commands/version/version/","title":"version","text":""},{"location":"commands/version/version/#description","title":"Description","text":"<p>Displays GDB, Python, and pwndbg versions.</p>"},{"location":"commands/version/version/#usage","title":"Usage:","text":"Bash<pre><code>usage: version [-h]\n</code></pre>"},{"location":"commands/version/version/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/vmmap/vmmap/","title":"vmmap","text":""},{"location":"commands/vmmap/vmmap/#description","title":"Description","text":"<p>Print virtual memory map pages.</p> <p>Unnamed mappings are named as [anon_%#x] where %#x is high part of their start address. This is useful for filtering with <code>vmmap</code> or <code>search</code> commands.</p> <p>Known issues with vmmap: For QEMU user targets, the QEMU's gdbstub does not provide memory maps information to GDB until [0] is finished &amp; merged. We try to deal with it without parsing the QEMU process' /proc/$pid/maps file, but if our approach fails, we simply create a [0, 0xffff...] vmmap which is not great and may result in lack of proper colors or inability to search memory with the <code>search</code> command.</p> <p>For QEMU kernel, we use gdb-pt-dump that parses page tables from the guest by reading /proc/$pid/mem of QEMU process. If this does not work for you, use <code>set kernel-vmmap-via-page-tables off</code> to refer to our old method of reading vmmap info from <code>monitor info mem</code> command exposed by QEMU. Note that the latter may be slower and will not give full vmmaps permission information.</p> <p>For coredump debugging, GDB also lacks all vmmap info but we do our best to get it back by using the <code>info proc mappings</code> and <code>maintenance info sections</code> commands.</p> <p>As a last resort, we sometimes try to explore the addresses in CPU registers and if they are readable by GDB, we determine their bounds and create an \"\" vmmap. However, this method is slow and is not used on each GDB stop. <p>Memory pages can also be added manually with the use of vmmap_add, vmmap_clear and vmmap_load commands. This may be useful for bare metal debugging.</p> <p>[0] https://lore.kernel.org/all/20220221030910.3203063-1-dominik.b.czarnota@gmail.com/</p>"},{"location":"commands/vmmap/vmmap/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap [-h] [-w] [-x] [-A LINES_AFTER] [-B LINES_BEFORE] [gdbval_or_str]\n</code></pre>"},{"location":"commands/vmmap/vmmap/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>gdbval_or_str</code> Address or module name filter"},{"location":"commands/vmmap/vmmap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-w</code> <code>--writable</code> Display writable maps only (default: %(default)s) <code>-x</code> <code>--executable</code> Display executable maps only (default: %(default)s) <code>-A</code> <code>--lines-after</code> <code>1</code> Number of pages to display after result (default: %(default)s) <code>-B</code> <code>--lines-before</code> <code>1</code> Number of pages to display before result (default: %(default)s)"},{"location":"commands/vmmap/vmmap_add/","title":"vmmap_add","text":""},{"location":"commands/vmmap/vmmap_add/#description","title":"Description","text":"<p>Add virtual memory map page.</p>"},{"location":"commands/vmmap/vmmap_add/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap_add [-h] start size [flags] [offset]\n</code></pre>"},{"location":"commands/vmmap/vmmap_add/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>start</code> Starting virtual address <code>size</code> Size of the address space, in bytes <code>flags</code> Flags set by the ELF file, see PF_X, PF_R, PF_W (default: %(default)s) <code>offset</code> Offset into the original ELF file that the data is loaded from (default: %(default)s)"},{"location":"commands/vmmap/vmmap_add/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/vmmap/vmmap_clear/","title":"vmmap_clear","text":""},{"location":"commands/vmmap/vmmap_clear/#description","title":"Description","text":"<p>Clear the vmmap cache.</p>"},{"location":"commands/vmmap/vmmap_clear/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap_clear [-h]\n</code></pre>"},{"location":"commands/vmmap/vmmap_clear/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/vmmap/vmmap_load/","title":"vmmap_load","text":""},{"location":"commands/vmmap/vmmap_load/#description","title":"Description","text":"<p>Load virtual memory map pages from ELF file.</p>"},{"location":"commands/vmmap/vmmap_load/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap_load [-h] [filename]\n</code></pre>"},{"location":"commands/vmmap/vmmap_load/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filename</code> ELF filename, by default uses current loaded filename."},{"location":"commands/vmmap/vmmap_load/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bc/","title":"bc","text":""},{"location":"commands/windbg/bc/#description","title":"Description","text":"<p>Clear the breakpoint with the specified index.</p>"},{"location":"commands/windbg/bc/#usage","title":"Usage:","text":"Bash<pre><code>usage: bc [-h] [which]\n</code></pre>"},{"location":"commands/windbg/bc/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>which</code> Index of the breakpoint to clear. (default: %(default)s)"},{"location":"commands/windbg/bc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bd/","title":"bd","text":""},{"location":"commands/windbg/bd/#description","title":"Description","text":"<p>Disable the breakpoint with the specified index.</p>"},{"location":"commands/windbg/bd/#usage","title":"Usage:","text":"Bash<pre><code>usage: bd [-h] [which]\n</code></pre>"},{"location":"commands/windbg/bd/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>which</code> Index of the breakpoint to disable. (default: %(default)s)"},{"location":"commands/windbg/bd/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/be/","title":"be","text":""},{"location":"commands/windbg/be/#description","title":"Description","text":"<p>Enable the breakpoint with the specified index.</p>"},{"location":"commands/windbg/be/#usage","title":"Usage:","text":"Bash<pre><code>usage: be [-h] [which]\n</code></pre>"},{"location":"commands/windbg/be/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>which</code> Index of the breakpoint to enable. (default: %(default)s)"},{"location":"commands/windbg/be/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bl/","title":"bl","text":""},{"location":"commands/windbg/bl/#description","title":"Description","text":"<p>List breakpoints.</p>"},{"location":"commands/windbg/bl/#usage","title":"Usage:","text":"Bash<pre><code>usage: bl [-h]\n</code></pre>"},{"location":"commands/windbg/bl/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bp/","title":"bp","text":""},{"location":"commands/windbg/bp/#description","title":"Description","text":"<p>Set a breakpoint at the specified address.</p>"},{"location":"commands/windbg/bp/#usage","title":"Usage:","text":"Bash<pre><code>usage: bp [-h] where\n</code></pre>"},{"location":"commands/windbg/bp/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>where</code> The address to break at."},{"location":"commands/windbg/bp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/da/","title":"da","text":""},{"location":"commands/windbg/da/#description","title":"Description","text":"<p>Dump a string at the specified address.</p>"},{"location":"commands/windbg/da/#usage","title":"Usage:","text":"Bash<pre><code>usage: da [-h] address [max]\n</code></pre>"},{"location":"commands/windbg/da/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to dump <code>max</code> Maximum string length (default: %(default)s)"},{"location":"commands/windbg/da/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/db/","title":"db","text":""},{"location":"commands/windbg/db/#description","title":"Description","text":"<p>Starting at the specified address, dump N bytes.</p>"},{"location":"commands/windbg/db/#usage","title":"Usage:","text":"Bash<pre><code>usage: db [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/db/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of bytes to dump. (default: %(default)s)"},{"location":"commands/windbg/db/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dc/","title":"dc","text":""},{"location":"commands/windbg/dc/#description","title":"Description","text":"<p>Starting at the specified address, hexdump.</p>"},{"location":"commands/windbg/dc/#usage","title":"Usage:","text":"Bash<pre><code>usage: dc [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dc/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of bytes to hexdump. (default: %(default)s)"},{"location":"commands/windbg/dc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dd/","title":"dd","text":""},{"location":"commands/windbg/dd/#description","title":"Description","text":"<p>Starting at the specified address, dump N dwords.</p>"},{"location":"commands/windbg/dd/#usage","title":"Usage:","text":"Bash<pre><code>usage: dd [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dd/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of dwords to dump. (default: %(default)s)"},{"location":"commands/windbg/dd/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dds/","title":"dds","text":""},{"location":"commands/windbg/dds/#description","title":"Description","text":"<p>Dump pointers and symbols at the specified address.</p>"},{"location":"commands/windbg/dds/#usage","title":"Usage:","text":"Bash<pre><code>usage: dds [-h] addr\n</code></pre>"},{"location":"commands/windbg/dds/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> The address to dump from."},{"location":"commands/windbg/dds/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dq/","title":"dq","text":""},{"location":"commands/windbg/dq/#description","title":"Description","text":"<p>Starting at the specified address, dump N qwords.</p>"},{"location":"commands/windbg/dq/#usage","title":"Usage:","text":"Bash<pre><code>usage: dq [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dq/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of qwords to dump. (default: %(default)s)"},{"location":"commands/windbg/dq/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ds/","title":"ds","text":""},{"location":"commands/windbg/ds/#description","title":"Description","text":"<p>Dump a string at the specified address.</p>"},{"location":"commands/windbg/ds/#usage","title":"Usage:","text":"Bash<pre><code>usage: ds [-h] address [max]\n</code></pre>"},{"location":"commands/windbg/ds/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to dump <code>max</code> Maximum string length (default: %(default)s)"},{"location":"commands/windbg/ds/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dw/","title":"dw","text":""},{"location":"commands/windbg/dw/#description","title":"Description","text":"<p>Starting at the specified address, dump N words.</p>"},{"location":"commands/windbg/dw/#usage","title":"Usage:","text":"Bash<pre><code>usage: dw [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dw/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of words to dump. (default: %(default)s)"},{"location":"commands/windbg/dw/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/eb/","title":"eb","text":""},{"location":"commands/windbg/eb/#description","title":"Description","text":"<p>Write hex bytes at the specified address.</p>"},{"location":"commands/windbg/eb/#usage","title":"Usage:","text":"Bash<pre><code>usage: eb [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/eb/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The bytes to write."},{"location":"commands/windbg/eb/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ed/","title":"ed","text":""},{"location":"commands/windbg/ed/#description","title":"Description","text":"<p>Write hex dwords at the specified address.</p>"},{"location":"commands/windbg/ed/#usage","title":"Usage:","text":"Bash<pre><code>usage: ed [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/ed/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The dwords to write."},{"location":"commands/windbg/ed/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/eq/","title":"eq","text":""},{"location":"commands/windbg/eq/#description","title":"Description","text":"<p>Write hex qwords at the specified address.</p>"},{"location":"commands/windbg/eq/#usage","title":"Usage:","text":"Bash<pre><code>usage: eq [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/eq/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The qwords to write."},{"location":"commands/windbg/eq/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ew/","title":"ew","text":""},{"location":"commands/windbg/ew/#description","title":"Description","text":"<p>Write hex words at the specified address.</p>"},{"location":"commands/windbg/ew/#usage","title":"Usage:","text":"Bash<pre><code>usage: ew [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/ew/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The words to write."},{"location":"commands/windbg/ew/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ez/","title":"ez","text":""},{"location":"commands/windbg/ez/#description","title":"Description","text":"<p>Write a string at the specified address.</p>"},{"location":"commands/windbg/ez/#usage","title":"Usage:","text":"Bash<pre><code>usage: ez [-h] address data\n</code></pre>"},{"location":"commands/windbg/ez/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The string to write."},{"location":"commands/windbg/ez/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/eza/","title":"eza","text":""},{"location":"commands/windbg/eza/#description","title":"Description","text":"<p>Write a string at the specified address.</p>"},{"location":"commands/windbg/eza/#usage","title":"Usage:","text":"Bash<pre><code>usage: eza [-h] address data\n</code></pre>"},{"location":"commands/windbg/eza/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The string to write."},{"location":"commands/windbg/eza/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/go/","title":"go","text":""},{"location":"commands/windbg/go/#description","title":"Description","text":"<p>Windbg compatibility alias for 'continue' command.</p>"},{"location":"commands/windbg/go/#usage","title":"Usage:","text":"Bash<pre><code>usage: go [-h]\n</code></pre>"},{"location":"commands/windbg/go/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/k/","title":"k","text":""},{"location":"commands/windbg/k/#description","title":"Description","text":"<p>Print a backtrace (alias 'bt').</p>"},{"location":"commands/windbg/k/#usage","title":"Usage:","text":"Bash<pre><code>usage: k [-h]\n</code></pre>"},{"location":"commands/windbg/k/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ln/","title":"ln","text":""},{"location":"commands/windbg/ln/#description","title":"Description","text":"<p>List the symbols nearest to the provided value.</p>"},{"location":"commands/windbg/ln/#usage","title":"Usage:","text":"Bash<pre><code>usage: ln [-h] [value]\n</code></pre>"},{"location":"commands/windbg/ln/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>value</code> The address you want the name of."},{"location":"commands/windbg/ln/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/pc/","title":"pc","text":""},{"location":"commands/windbg/pc/#description","title":"Description","text":"<p>Windbg compatibility alias for 'nextcall' command.</p>"},{"location":"commands/windbg/pc/#usage","title":"Usage:","text":"Bash<pre><code>usage: pc [-h]\n</code></pre>"},{"location":"commands/windbg/pc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/peb/","title":"peb","text":""},{"location":"commands/windbg/peb/#description","title":"Description","text":"<p>Not be windows.</p>"},{"location":"commands/windbg/peb/#usage","title":"Usage:","text":"Bash<pre><code>usage: peb [-h]\n</code></pre>"},{"location":"commands/windbg/peb/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/xinfo/xinfo/","title":"xinfo","text":""},{"location":"commands/xinfo/xinfo/#description","title":"Description","text":"<p>Shows offsets of the specified address from various useful locations.</p>"},{"location":"commands/xinfo/xinfo/#usage","title":"Usage:","text":"Bash<pre><code>usage: xinfo [-h] [address]\n</code></pre>"},{"location":"commands/xinfo/xinfo/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to inspect (default: %(default)s)"},{"location":"commands/xinfo/xinfo/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/xor/memfrob/","title":"memfrob","text":""},{"location":"commands/xor/memfrob/#description","title":"Description","text":"<p>Memfrobs a region of memory (xor with '*').</p>"},{"location":"commands/xor/memfrob/#usage","title":"Usage:","text":"Bash<pre><code>usage: memfrob [-h] address count\n</code></pre>"},{"location":"commands/xor/memfrob/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to start xoring at. <code>count</code> The number of bytes to xor."},{"location":"commands/xor/memfrob/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/xor/xor/","title":"xor","text":""},{"location":"commands/xor/xor/#description","title":"Description","text":"<p>XOR <code>count</code> bytes at <code>address</code> with the key <code>key</code>.</p>"},{"location":"commands/xor/xor/#usage","title":"Usage:","text":"Bash<pre><code>usage: xor [-h] address key count\n</code></pre>"},{"location":"commands/xor/xor/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to start xoring at. <code>key</code> The key to use. <code>count</code> The number of bytes to xor."},{"location":"commands/xor/xor/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"source/","title":"Source","text":"<ul> <li>pwndbg<ul> <li>aglib<ul> <li>arch</li> <li>argv</li> <li>ctypes</li> <li>disasm<ul> <li>aarch64</li> <li>arch</li> <li>arm</li> <li>instruction</li> <li>mips</li> <li>ppc</li> <li>riscv</li> <li>sparc</li> <li>x86</li> </ul> </li> <li>dt</li> <li>dynamic</li> <li>elf</li> <li>file</li> <li>godbg</li> <li>heap<ul> <li>heap</li> <li>jemalloc</li> <li>ptmalloc</li> <li>structs</li> </ul> </li> <li>kernel<ul> <li>kallsyms</li> <li>macros</li> <li>rbtree</li> <li>slab</li> <li>vmmap</li> </ul> </li> <li>memory</li> <li>nearpc</li> <li>next</li> <li>onegadget</li> <li>proc</li> <li>qemu</li> <li>regs</li> <li>remote</li> <li>shellcode</li> <li>stack</li> <li>strings</li> <li>symbol</li> <li>tls</li> <li>typeinfo</li> <li>vmmap</li> <li>vmmap_custom</li> </ul> </li> <li>arguments</li> <li>auxv</li> <li>chain</li> <li>color<ul> <li>context</li> <li>disasm</li> <li>enhance</li> <li>hexdump</li> <li>memory</li> <li>message</li> <li>syntax_highlight</li> <li>telescope</li> <li>theme</li> </ul> </li> <li>commands<ul> <li>ai</li> <li>argv</li> <li>aslr</li> <li>asm</li> <li>attachp</li> <li>auxv</li> <li>binder</li> <li>binja</li> <li>binja_functions</li> <li>branch</li> <li>canary</li> <li>checksec</li> <li>comments</li> <li>config</li> <li>context</li> <li>cpsr</li> <li>cyclic</li> <li>cymbol</li> <li>dev</li> <li>distance</li> <li>dt</li> <li>dumpargs</li> <li>elf</li> <li>flags</li> <li>gdt</li> <li>ghidra</li> <li>godbg</li> <li>got</li> <li>got_tracking</li> <li>hex2ptr</li> <li>hexdump</li> <li>hijack_fd</li> <li>ida</li> <li>ignore</li> <li>integration</li> <li>ipython_interactive</li> <li>jemalloc</li> <li>kbase</li> <li>kchecksec</li> <li>kcmdline</li> <li>kconfig</li> <li>killthreads</li> <li>klookup</li> <li>kversion</li> <li>leakfind</li> <li>linkmap</li> <li>memoize</li> <li>misc</li> <li>mmap</li> <li>mprotect</li> <li>nearpc</li> <li>next</li> <li>onegadget</li> <li>p2p</li> <li>patch</li> <li>pcplist</li> <li>peda</li> <li>pie</li> <li>plist</li> <li>probeleak</li> <li>procinfo</li> <li>profiler</li> <li>ptmalloc2</li> <li>ptmalloc2_tracking</li> <li>radare2</li> <li>reload</li> <li>retaddr</li> <li>rizin</li> <li>rop</li> <li>ropper</li> <li>search</li> <li>segments</li> <li>shell</li> <li>sigreturn</li> <li>slab</li> <li>spray</li> <li>start</li> <li>strings</li> <li>telescope</li> <li>tips</li> <li>tls</li> <li>valist</li> <li>version</li> <li>vmmap</li> <li>windbg</li> <li>xinfo</li> <li>xor</li> </ul> </li> <li>dbg<ul> <li>gdb<ul> <li>debug_sym</li> <li>symbol</li> </ul> </li> <li>lldb<ul> <li>hooks</li> <li>pset</li> <li>repl<ul> <li>io</li> <li>proc</li> <li>readline</li> </ul> </li> <li>util</li> </ul> </li> </ul> </li> <li>decorators</li> <li>emu<ul> <li>emulator</li> </ul> </li> <li>enhance</li> <li>exception</li> <li>gdblib<ul> <li>bpoint</li> <li>config</li> <li>events</li> <li>functions</li> <li>got</li> <li>hooks</li> <li>info</li> <li>prompt</li> <li>ptmalloc2_tracking</li> <li>scheduler</li> <li>shellcode</li> <li>symbol</li> <li>tui<ul> <li>context</li> <li>control</li> </ul> </li> <li>vmmap</li> </ul> </li> <li>ghidra</li> <li>glibc</li> <li>hexdump</li> <li>integration<ul> <li>binja</li> <li>ida</li> </ul> </li> <li>lib<ul> <li>abi</li> <li>android</li> <li>arch</li> <li>cache</li> <li>common</li> <li>config</li> <li>disasm<ul> <li>helpers</li> </ul> </li> <li>elftypes</li> <li>funcparser</li> <li>functions</li> <li>functions_data</li> <li>gcc</li> <li>heap<ul> <li>helpers</li> </ul> </li> <li>memory</li> <li>net</li> <li>regs</li> <li>stdio</li> <li>strings</li> <li>tempfile</li> <li>tips</li> <li>version</li> <li>which</li> </ul> </li> <li>log</li> <li>profiling</li> <li>radare2</li> <li>rizin</li> <li>search</li> <li>ui</li> <li>wrappers<ul> <li>checksec</li> <li>readelf</li> </ul> </li> </ul> </li> </ul>"},{"location":"source/__init__/","title":"init","text":""},{"location":"source/__init__/#pwndbg.__version__","title":"<code>__version__ = pwndbg.lib.version.__version__</code>  <code>module-attribute</code>","text":""},{"location":"source/__init__/#pwndbg.config","title":"<code>config: pwndbg.lib.config.Config = pwndbg.lib.config.Config()</code>  <code>module-attribute</code>","text":""},{"location":"source/__init__/#pwndbg.version","title":"<code>version = __version__</code>  <code>module-attribute</code>","text":""},{"location":"source/arguments/","title":"Arguments","text":"<p>Allows describing functions, specifically enumerating arguments which may be passed in a combination of registers and stack values.</p>"},{"location":"source/arguments/#pwndbg.arguments.argname","title":"<code>argname(n, abi=None)</code>","text":""},{"location":"source/arguments/#pwndbg.arguments.argument","title":"<code>argument(n, abi=None)</code>","text":"<p>Returns the nth argument, as if $pc were a 'call' or 'bl' type instruction. Works only for ABIs that use registers for arguments.</p>"},{"location":"source/arguments/#pwndbg.arguments.arguments","title":"<code>arguments(abi=None)</code>","text":"<p>Yields (arg_name, arg_value) tuples for arguments from a given ABI. Works only for ABIs that use registers for arguments.</p>"},{"location":"source/arguments/#pwndbg.arguments.format_args","title":"<code>format_args(instruction)</code>","text":""},{"location":"source/arguments/#pwndbg.arguments.get","title":"<code>get(instruction)</code>","text":"<p>Returns an array containing the arguments to the current function, if $pc is a 'call', 'bl', or 'jalr' type instruction.</p> <p>Otherwise, returns None.</p>"},{"location":"source/auxv/","title":"Auxv","text":""},{"location":"source/auxv/#pwndbg.auxv.auto_explore","title":"<code>auto_explore = pwndbg.config.add_param('auto-explore-auxv', 'warn', 'Enable or disable stack exploration for AUXV information; it may be really slow.', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['warn', 'yes', 'no'])</code>  <code>module-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.example_info_auxv_linux","title":"<code>example_info_auxv_linux = '\\n33   AT_SYSINFO_EHDR      System-supplied DSO\\'s ELF header 0x7ffff7ffa000\\n16   AT_HWCAP             Machine-dependent CPU capability hints 0xfabfbff\\n6    AT_PAGESZ            System page size               4096\\n17   AT_CLKTCK            Frequency of times()           100\\n3    AT_PHDR              Program headers for program    0x400040\\n4    AT_PHENT             Size of program header entry   56\\n5    AT_PHNUM             Number of program headers      9\\n7    AT_BASE              Base address of interpreter    0x7ffff7dda000\\n8    AT_FLAGS             Flags                          0x0\\n9    AT_ENTRY             Entry point of program         0x42020b\\n11   AT_UID               Real user ID                   1000\\n12   AT_EUID              Effective user ID              1000\\n13   AT_GID               Real group ID                  1000\\n14   AT_EGID              Effective group ID             1000\\n23   AT_SECURE            Boolean, was exec setuid-like? 0\\n25   AT_RANDOM            Address of 16 random bytes     0x7fffffffdb39\\n31   AT_EXECFN            File name of executable        0x7fffffffefee \"/bin/bash\"\\n15   AT_PLATFORM          String identifying platform    0x7fffffffdb49 \"x86_64\"\\n0    AT_NULL              End of vector                  0x0\\n'</code>  <code>module-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.explore_stack_auxv","title":"<code>explore_stack_auxv()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.get","title":"<code>get()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.procfs_auxv","title":"<code>procfs_auxv()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.use_info_auxv","title":"<code>use_info_auxv()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.walk_stack2","title":"<code>walk_stack2(offset=0)</code>","text":""},{"location":"source/chain/","title":"Chain","text":""},{"location":"source/chain/#pwndbg.chain.LIMIT","title":"<code>LIMIT = pwndbg.config.add_param('dereference-limit', 5, 'max number of pointers to dereference in a chain')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.c","title":"<code>c = ColorConfig('chain', [ColorParamSpec('arrow', 'normal', 'color of chain formatting (arrow)'), ColorParamSpec('contiguous-marker', 'normal', 'color of chain formatting (contiguous marker)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.config_arrow_left","title":"<code>config_arrow_left = theme.add_param('chain-arrow-left', '\u25c2\u2014', 'left arrow of chain formatting')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.config_arrow_right","title":"<code>config_arrow_right = theme.add_param('chain-arrow-right', '\u2014\u25b8', 'right arrow of chain formatting')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.config_contiguous","title":"<code>config_contiguous = theme.add_param('chain-contiguous-marker', '...', 'contiguous marker of chain formatting')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.format","title":"<code>format(value, limit=LIMIT, code=True, offset=0, hard_stop=None, hard_end=0, safe_linking=False, enhance_string_len=None)</code>","text":"<p>Recursively dereferences an address into string representation, or convert the list representation of address dereferences into string representation.</p> <p>Parameters:</p> Name Type Description Default <code>value(int|list)</code> <p>Either the starting address to be sent to get, or the result of get (a list)</p> required <code>limit(int)</code> <p>Number of valid pointers</p> required <code>code(bool)</code> <p>Hint that indicates the value may be an instruction</p> required <code>offset(int)</code> <p>Offset into the address to get the next pointer</p> required <code>hard_stop(int)</code> <p>Value to stop on</p> required <code>hard_end</code> <code>int</code> <p>Value to append when hard_stop is reached: null, value of hard stop, a string.</p> <code>0</code> <code>safe_linking(bool)</code> <p>whether this chain use safe-linking</p> required <code>enhance_string_len(int)</code> <p>The length of string to display for enhancement of the last pointer</p> required <p>Returns:     A string representing pointers of each address and reference     Strings format: 0x0804a10 \u2014\u25b8 0x08061000 \u25c2\u2014 0x41414141</p>"},{"location":"source/chain/#pwndbg.chain.get","title":"<code>get(address, limit=LIMIT, offset=0, hard_stop=None, hard_end=0, include_start=True, safe_linking=False)</code>","text":"<p>Recursively dereferences an address. For bare metal, it will stop when the address is not in any of vmmap pages to avoid redundant dereference.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>the first address to begin dereferencing</p> required <code>limit(int)</code> <p>number of valid pointers</p> required <code>offset(int)</code> <p>offset into the address to get the next pointer</p> required <code>hard_stop(int)</code> <p>address to stop at</p> required <code>hard_end</code> <code>int</code> <p>value to append when hard_stop is reached</p> <code>0</code> <code>include_start(bool)</code> <p>whether to include starting address or not</p> required <code>safe_linking(bool)</code> <p>whether this chain use safe-linking</p> required <p>Returns:</p> Type Description <code>List[int] | None</code> <p>A list representing pointers of each <code>address</code> and reference</p>"},{"location":"source/decorators/","title":"Decorators","text":""},{"location":"source/decorators/#pwndbg.decorators.K","title":"<code>K = TypeVar('K')</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.first_prompt","title":"<code>first_prompt = False</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.only_after_first_prompt","title":"<code>only_after_first_prompt(value_before=None)</code>","text":"<p>Decorator to prevent a function from running before the first prompt was displayed. The 'value_before' parameter can be used to specify the value that is returned if the function is called before the first prompt was displayed.</p>"},{"location":"source/decorators/#pwndbg.decorators.suppress_errors","title":"<code>suppress_errors(fallback=None, should_warn=True)</code>","text":"<p>Decorator to make a function return a fallback value when it would otherwise error. The 'fallback' parameter can be used to specify the fallback value. If the 'should_warn' parameter is set, a warning will be printed whenever an error is suppressed.</p>"},{"location":"source/enhance/","title":"Enhance","text":"<p>Given an address in memory which does not contain a pointer elsewhere into memory, attempt to describe the data as best as possible.</p> <p>Currently prints out code, integers, or strings, in a best-effort manner dependent on page permissions, the contents of the data, and any supplemental information sources (e.g. active IDA Pro connection).</p>"},{"location":"source/enhance/#pwndbg.enhance.enhance","title":"<code>enhance(value, code=True, safe_linking=False, attempt_dereference=True, enhance_string_len=None)</code>","text":"<p>Given the last pointer in a chain, attempt to characterize</p> <p>Note that 'the last pointer in a chain' may not at all actually be a pointer.</p> <p>Additionally, optimizations are made based on various sources of data for 'value'. For example, if it is set to RWX, we try to get information on whether it resides on the stack, or in a RW section that happens to be RWX, to determine which order to print the fields.</p> <p>Parameters:</p> Name Type Description Default <code>value(obj)</code> <p>Value to enhance</p> required <code>code(bool)</code> <p>Hint that indicates the value may be an instruction</p> required <code>safe_linking(bool)</code> <p>Whether this chain use safe-linking</p> required <code>enhance_string_len(int)</code> <p>The length of string to display for enhancement of the last pointer</p> required"},{"location":"source/enhance/#pwndbg.enhance.format_small_int","title":"<code>format_small_int(value)</code>","text":""},{"location":"source/enhance/#pwndbg.enhance.format_small_int_pair","title":"<code>format_small_int_pair(first, second)</code>","text":""},{"location":"source/enhance/#pwndbg.enhance.int_str","title":"<code>int_str(value)</code>","text":""},{"location":"source/exception/","title":"Exception","text":""},{"location":"source/exception/#pwndbg.exception.debug","title":"<code>debug = config.add_param('exception-debugger', False, 'whether to debug exceptions raised in Pwndbg commands')</code>  <code>module-attribute</code>","text":""},{"location":"source/exception/#pwndbg.exception.verbose","title":"<code>verbose = config.add_param('exception-verbose', False, 'whether to print a full stacktrace for exceptions raised in Pwndbg commands')</code>  <code>module-attribute</code>","text":""},{"location":"source/exception/#pwndbg.exception.handle","title":"<code>handle(name='Error')</code>","text":"<p>Displays an exception to the user, optionally displaying a full traceback and spawning an interactive post-moretem debugger.</p> Notes <ul> <li><code>set exception-verbose on</code> enables stack traces.</li> <li><code>set exception-debugger on</code> enables the post-mortem debugger.</li> </ul>"},{"location":"source/exception/#pwndbg.exception.inform_report_issue","title":"<code>inform_report_issue(exception_msg)</code>","text":"<p>Informs user that he can report an issue. The use of caching makes it reporting only once for a given exception message.</p>"},{"location":"source/exception/#pwndbg.exception.inform_unmet_dependencies","title":"<code>inform_unmet_dependencies(errors)</code>","text":"<p>Informs user about unmet dependencies</p>"},{"location":"source/exception/#pwndbg.exception.inform_verbose_and_debug","title":"<code>inform_verbose_and_debug()</code>","text":""},{"location":"source/exception/#pwndbg.exception.print_exception","title":"<code>print_exception(exception_msg)</code>","text":""},{"location":"source/exception/#pwndbg.exception.set_trace","title":"<code>set_trace()</code>","text":"<p>Enable sane debugging in Pwndbg by switching to the \"real\" stdio.</p>"},{"location":"source/exception/#pwndbg.exception.update","title":"<code>update()</code>","text":""},{"location":"source/ghidra/","title":"Ghidra","text":""},{"location":"source/ghidra/#pwndbg.ghidra.r2decompiler","title":"<code>r2decompiler = pwndbg.config.add_param('r2decompiler', 'radare2', 'framework that your ghidra plugin installed (radare2/rizin)')</code>  <code>module-attribute</code>","text":""},{"location":"source/ghidra/#pwndbg.ghidra.decompile","title":"<code>decompile(func=None)</code>","text":"<p>Return the source of the given function decompiled by ghidra.</p> <p>If no function is given, decompile the function within the current pc. This function requires radare2, r2pipe and r2ghidra, or their related rizin counterparts.</p> <p>Raises Exception if any fatal error occurs.</p>"},{"location":"source/ghidra/#pwndbg.ghidra.set_r2decompiler","title":"<code>set_r2decompiler()</code>","text":""},{"location":"source/glibc/","title":"Glibc","text":"<p>Get information about the GLibc</p>"},{"location":"source/glibc/#pwndbg.glibc.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.glibc_version","title":"<code>glibc_version = pwndbg.config.add_param('glibc', '', 'GLIBC version for heap heuristics resolution (e.g. 2.31)', scope='heap')</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.safe_lnk","title":"<code>safe_lnk = pwndbg.config.add_param('safe-linking', None, 'whether glibc use safe-linking (on/off/auto)', param_class=pwndbg.lib.config.PARAM_AUTO_BOOLEAN)</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.OnlyWhenGlibcLoaded","title":"<code>OnlyWhenGlibcLoaded(function)</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.check_safe_linking","title":"<code>check_safe_linking()</code>","text":"<p>Safe-linking is a glibc 2.32 mitigation; see: - https://lanph3re.blogspot.com/2020/08/blog-post.html - https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-old-malloc-exploit-primitive/</p>"},{"location":"source/glibc/#pwndbg.glibc.dump_elf_data_section","title":"<code>dump_elf_data_section()</code>","text":"<p>Dump .data section of libc ELF file</p>"},{"location":"source/glibc/#pwndbg.glibc.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(section_name)</code>","text":"<p>Dump relocations of a section by section name of libc ELF file</p>"},{"location":"source/glibc/#pwndbg.glibc.get_libc_filename_from_info_sharedlibrary","title":"<code>get_libc_filename_from_info_sharedlibrary()</code>","text":"<p>Get the filename of the libc by parsing the output of <code>info sharedlibrary</code>.</p>"},{"location":"source/glibc/#pwndbg.glibc.get_section_address_by_name","title":"<code>get_section_address_by_name(section_name)</code>","text":"<p>Find section address of libc by section name</p>"},{"location":"source/glibc/#pwndbg.glibc.get_version","title":"<code>get_version()</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.set_glibc_version","title":"<code>set_glibc_version()</code>","text":""},{"location":"source/hexdump/","title":"Hexdump","text":"<p>Hexdump implementation, ~= stolen from pwntools.</p>"},{"location":"source/hexdump/#pwndbg.hexdump.color_scheme","title":"<code>color_scheme = None</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.config_byte_separator","title":"<code>config_byte_separator = theme.add_param('hexdump-byte-separator', ' ', 'separator of single bytes in hexdump (does NOT affect group separator)')</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.config_colorize_ascii","title":"<code>config_colorize_ascii = theme.add_param('hexdump-colorize-ascii', True, 'whether to colorize the hexdump command ascii section')</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.config_separator","title":"<code>config_separator = theme.add_param('hexdump-ascii-block-separator', '\u2502', 'block separator char of the hexdump command')</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.printable","title":"<code>printable = None</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.groupby","title":"<code>groupby(width, array, fill=None)</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.hexdump","title":"<code>hexdump(data, address=0, width=16, group_width=4, flip_group_endianness=False, skip=True, offset=0, size=0, count=0, repeat=False, dX_call=False)</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.load_color_scheme","title":"<code>load_color_scheme()</code>","text":""},{"location":"source/log/","title":"Log","text":""},{"location":"source/log/#pwndbg.log.ColorFormatter","title":"<code>ColorFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p>"},{"location":"source/log/#pwndbg.log.ColorFormatter.log_funcs","title":"<code>log_funcs = {logging.DEBUG: pwndbg.color.message.debug, logging.INFO: pwndbg.color.message.info, logging.WARNING: pwndbg.color.message.warn, logging.ERROR: pwndbg.color.message.error, logging.CRITICAL: pwndbg.color.message.error}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/log/#pwndbg.log.ColorFormatter.format","title":"<code>format(record)</code>","text":""},{"location":"source/profiling/","title":"Profiling","text":""},{"location":"source/profiling/#pwndbg.profiling.profiler","title":"<code>profiler: Profiler | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler","title":"<code>Profiler</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.__init__","title":"<code>__init__(p)</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.print_time_elapsed","title":"<code>print_time_elapsed()</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.start","title":"<code>start()</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.stop","title":"<code>stop(filename=None)</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.init","title":"<code>init(p, _start_time)</code>","text":""},{"location":"source/radare2/","title":"Radare2","text":""},{"location":"source/radare2/#pwndbg.radare2.r2pipe","title":"<code>r2pipe()</code>","text":"<p>Spawn and return a r2pipe handle for the current process file.</p> <p>This function requires a radare2 installation plus the r2pipe python library. The base address is automatically set for PIE when loading the binary. After opening the handle, the binary is automatically analyzed.</p> <p>Raises ImportError if r2pipe python library is not available. Raises Exception if anything goes fatally wrong.</p> <p>Returns a r2pipe.open handle.</p>"},{"location":"source/rizin/","title":"Rizin","text":""},{"location":"source/rizin/#pwndbg.rizin.rzpipe","title":"<code>rzpipe()</code>","text":"<p>Spawn and return a rzpipe handle for the current process file. This function requires a rizin installation plus the rzpipe python library. The base address is automatically set for PIE when loading the binary. After opening the handle, the binary is automatically analyzed. Raises ImportError if rzpipe python library is not available. Raises Exception if anything goes fatally wrong. Returns a rzpipe.open handle.</p>"},{"location":"source/search/","title":"Search","text":"<p>Search the address space for byte patterns.</p>"},{"location":"source/search/#pwndbg.search.search","title":"<code>search(searchfor, mappings=None, start=None, end=None, step=None, aligned=None, limit=None, executable=False, writable=False)</code>","text":"<p>Search inferior memory for a byte sequence.</p> <p>Parameters:</p> Name Type Description Default <code>searchfor(bytes)</code> <p>Byte sequence to find</p> required <code>mappings(list)</code> <p>List of pwndbg.lib.memory.Page objects to search By default, uses all available mappings.</p> required <code>start(int)</code> <p>First address to search, inclusive.</p> required <code>end(int)</code> <p>Last address to search, exclusive.</p> required <code>step(int)</code> <p>Size of memory region to skip each result</p> required <code>aligned(int)</code> <p>Strict byte alignment for search result</p> required <code>limit(int)</code> <p>Maximum number of results to return</p> required <code>executable(bool)</code> <p>Restrict search to executable pages</p> required <code>writable(bool)</code> <p>Restrict search to writable pages</p> required <p>Yields:</p> Type Description <code>int</code> <p>An iterator on the address matches</p>"},{"location":"source/ui/","title":"Ui","text":"<p>A few helpers for making things print pretty-like.</p>"},{"location":"source/ui/#pwndbg.ui.title_position","title":"<code>title_position = theme.add_param('banner-title-position', 'center', 'banner title position')</code>  <code>module-attribute</code>","text":""},{"location":"source/ui/#pwndbg.ui.addrsz","title":"<code>addrsz(address)</code>","text":""},{"location":"source/ui/#pwndbg.ui.banner","title":"<code>banner(title, target=sys.stdout, width=None, extra='')</code>","text":""},{"location":"source/ui/#pwndbg.ui.check_title_position","title":"<code>check_title_position()</code>","text":""},{"location":"source/ui/#pwndbg.ui.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":""},{"location":"source/ui/#pwndbg.ui.get_window_size","title":"<code>get_window_size(target=sys.stdout)</code>","text":""},{"location":"source/aglib/__init__/","title":"init","text":""},{"location":"source/aglib/__init__/#pwndbg.aglib.load_aglib","title":"<code>load_aglib()</code>","text":""},{"location":"source/aglib/arch/","title":"Arch","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.ARCHS","title":"<code>ARCHS = ('x86-64', 'i386', 'aarch64', 'mips', 'powerpc', 'sparc', 'arm', 'armcm', 'riscv:rv32', 'riscv:rv64', 'riscv')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.arch","title":"<code>arch: Arch = Arch('i386', 4, 'little')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.pwnlib_archs_mapping","title":"<code>pwnlib_archs_mapping = {'x86-64': 'amd64', 'i386': 'i386', 'aarch64': 'aarch64', 'mips': 'mips', 'powerpc': 'powerpc', 'sparc': 'sparc', 'arm': 'arm', 'iwmmxt': 'arm', 'armcm': 'thumb', 'rv32': 'riscv32', 'rv64': 'riscv64'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.get_thumb_mode_string","title":"<code>get_thumb_mode_string()</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.read_thumb_bit","title":"<code>read_thumb_bit()</code>","text":"<p>Return 0 or 1, representing the status of the Thumb bit in the current Arm architecture</p> <p>Return None if the Thumb bit is not relevent to the current architecture</p>"},{"location":"source/aglib/arch/#pwndbg.aglib.arch.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/argv/","title":"Argv","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.argc","title":"<code>argc()</code>","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.argv","title":"<code>argv(number)</code>","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.envc","title":"<code>envc()</code>","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.environ","title":"<code>environ(name)</code>","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.envp","title":"<code>envp(number)</code>","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/argv/#pwndbg.aglib.argv.update_state","title":"<code>update_state()</code>","text":""},{"location":"source/aglib/ctypes/","title":"Ctypes","text":"<p>On-the-fly endianness switching for ctypes structures.</p> <p>We cannot make use of ctypes.LittleEndianStructure and ctypes.BigEndianStructure, since these use metaclass hooks to catch fields being set when the class is declared.</p> <p>We need to catch on the fly.  We do this by swapping out the base classes of the Structure type, and incurring a performance penalty for foreign-endianness targets.</p>"},{"location":"source/aglib/ctypes/#pwndbg.aglib.ctypes.Structure","title":"<code>Structure = ctypes.LittleEndianStructure</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/ctypes/#pwndbg.aglib.ctypes.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/ctypes/#pwndbg.aglib.ctypes.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/dt/","title":"Dt","text":"<p>Prints structures in a manner similar to Windbg's \"dt\" command.</p>"},{"location":"source/aglib/dt/#pwndbg.aglib.dt.dt","title":"<code>dt(name='', addr=None, obj=None)</code>","text":"<p>Dump out a structure type Windbg style.</p>"},{"location":"source/aglib/dynamic/","title":"Dynamic","text":"<p>Dynamic linking interface.</p> <p>This module provides an interface to analyze various aspects of dynamically linked programs.</p> <p>It also defines a hook that watches for changes to the link map communicated by ld.so, and exposes an event that other parts of pwndbg can tap into, but one that may have a somewhat obtuse beahvior, due to limitations in GDB. See <code>r_debug_install_link_map_changed_hook</code> for more information.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DYNAMIC_SECTION_ALLOW_MULTIPLE","title":"<code>DYNAMIC_SECTION_ALLOW_MULTIPLE = {elf.DT_NEEDED}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DYNAMIC_SECTION_REQUIRED_TAGS","title":"<code>DYNAMIC_SECTION_REQUIRED_TAGS = {elf.DT_STRTAB, elf.DT_STRSZ, elf.DT_SYMTAB, elf.DT_SYMENT}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.R_DEBUG_LINK_MAP_CHANGED_HOOK","title":"<code>R_DEBUG_LINK_MAP_CHANGED_HOOK = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.R_DEBUG_LINK_MAP_CHANGED_LISTENERS","title":"<code>R_DEBUG_LINK_MAP_CHANGED_LISTENERS: Set[Callable[..., Any]] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct","title":"<code>CStruct</code>","text":"<p>Utility class for reading fields off of C structs.</p> <p>Without proper debug information it cannot be guaranteed that the calculated field offsets are correct, therefore, reasonable caution should be exercised when using this class. The assumptions made are:  - Padding is added between fields so that all internal members are    correctly aligned, as long as the struct itself is correctly aligned.  - The alignment of the struct is the same as the alignment of its most    strictly aligned member.  - Padding is added to the end of the struct so that sequentially laid out    instances are always correctly aligned.  - Stuct sizes must be greater than or equal to 1 byte.</p> <p>While these assumptions do not apply in all cases, they should be good enough for the structs in ld.so and in the ELF program images.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.align","title":"<code>align = alignment</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.converters","title":"<code>converters: Dict[str, type] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.offsets","title":"<code>offsets: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.size","title":"<code>size = current_offset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.types","title":"<code>types: Dict[str, pwndbg.dbg_mod.Type] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.__init__","title":"<code>__init__(fields)</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elf32_sym","title":"<code>elf32_sym()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the Elf32_Sym srtucture.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elf64_sym","title":"<code>elf64_sym()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the Elf64_Sym structure.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elfNN_dyn","title":"<code>elfNN_dyn()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ElfNN_Dyn structure, suitable for the architecture of the inferior.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elfNN_rel","title":"<code>elfNN_rel()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ElfNN_Rel structure, suitable for the architecture of the inferior.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elfNN_rela","title":"<code>elfNN_rela()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ElfNN_Rela structure, suitable for the architecture of the inferior.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.has_field","title":"<code>has_field(name)</code>","text":"<p>Returns whether a field with the given name exists in this struct.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.link_map","title":"<code>link_map()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ABI-stable part of the link_map struct.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.r_debug","title":"<code>r_debug()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ABI-stable part of the r_debug struct.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.read","title":"<code>read(address, name)</code>","text":"<p>Reads the field with the given name from the struct instance located at the given address.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment","title":"<code>DynamicSegment</code>","text":"<p>Parser for the DYNAMIC segment present in a binary image.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.address","title":"<code>address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.elf_dyn","title":"<code>elf_dyn = elf_dyn</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.entries","title":"<code>entries = count</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.entries_by_tag","title":"<code>entries_by_tag: Dict[Any, Any] = sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.has_jmprel","title":"<code>has_jmprel = elf.DT_JMPREL in sections and elf.DT_PLTREL in sections and elf.DT_PLTRELSZ in sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.has_rel","title":"<code>has_rel = elf.DT_REL in sections and elf.DT_RELSZ in sections and elf.DT_RELENT in sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.has_rela","title":"<code>has_rela = elf.DT_RELA in sections and elf.DT_RELASZ in sections and elf.DT_RELAENT in sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_addr","title":"<code>jmprel_addr = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_elem","title":"<code>jmprel_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_info_fn","title":"<code>jmprel_r_info_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_sym","title":"<code>jmprel_r_sym = elf32_r_sym</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_sym_fn","title":"<code>jmprel_r_sym_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_type","title":"<code>jmprel_r_type = elf32_r_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.load_bias","title":"<code>load_bias = load_bias</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_addr","title":"<code>rel_addr = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_elem","title":"<code>rel_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_info_fn","title":"<code>rel_r_info_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_sym","title":"<code>rel_r_sym = elf32_r_sym</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_sym_fn","title":"<code>rel_r_sym_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_type","title":"<code>rel_r_type = elf32_r_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_addr","title":"<code>rela_addr = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_elem","title":"<code>rela_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_info_fn","title":"<code>rela_r_info_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_sym","title":"<code>rela_r_sym = elf32_r_sym</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_sym_fn","title":"<code>rela_r_sym_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_type","title":"<code>rela_r_type = elf32_r_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.strtab_addr","title":"<code>strtab_addr = self.dyn_array_read_tag_val(elf.DT_STRTAB)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.strtab_size","title":"<code>strtab_size = self.dyn_array_read_tag_val(elf.DT_STRSZ)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.symtab_addr","title":"<code>symtab_addr = self.dyn_array_read_tag_val(elf.DT_SYMTAB)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.symtab_elem","title":"<code>symtab_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.__init__","title":"<code>__init__(address, load_bias)</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.dyn_array_read","title":"<code>dyn_array_read(i, field)</code>","text":"<p>Reads the requested field from the entry of given index in the dynamic array.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.dyn_array_read_tag_val","title":"<code>dyn_array_read_tag_val(tag)</code>","text":"<p>Reads the <code>d_un</code> field from the entry of given tag in the dynamic array. Must not be a tag that allows multiple entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_entry_count","title":"<code>jmprel_entry_count()</code>","text":"<p>Returns the number of JMPREL entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_has_addend","title":"<code>jmprel_has_addend()</code>","text":"<p>Returns whether the <code>r_addend</code> field is available in entries of JMPREL.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_read","title":"<code>jmprel_read(i, field)</code>","text":"<p>Reads the requested field from the entry of the given index in JMPREL.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_entry_count","title":"<code>rel_entry_count()</code>","text":"<p>Returns the number of REL entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_read","title":"<code>rel_read(i, field)</code>","text":"<p>Reads the requested field from the entry of the given index in REL.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_entry_count","title":"<code>rela_entry_count()</code>","text":"<p>Returns the number of RELA entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_read","title":"<code>rela_read(i, field)</code>","text":"<p>Reads the requested field from the entry of the given index in RELA.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.string","title":"<code>string(i)</code>","text":"<p>Reads the string at index i from the string table.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.symtab_read","title":"<code>symtab_read(i, field)</code>","text":"<p>Reads the requested field from the entry of given index in the symbol table.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry","title":"<code>LinkMapEntry</code>","text":"<p>An entry in the link map.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.link_map","title":"<code>link_map = CStruct.link_map()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.link_map_address","title":"<code>link_map_address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.__init__","title":"<code>__init__(address)</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.dynamic","title":"<code>dynamic()</code>","text":"<p>The pointer to the memory mapped dynamic segment of the binary image.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.load_bias","title":"<code>load_bias()</code>","text":"<p>The difference between the addresses in the data structures of the binary image and the actual location of the data being pointed to by them in the address space of the inferior. This number will never be negative.</p> <p>Aditionally, for DYN images, such as PIE executables and shared libraries, this value is the same as the base load address of the image.</p> <p>The term \"load bias\" comes from the ELF binary format loading procedure in the Linux Kernel.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.name","title":"<code>name()</code>","text":"<p>The name of the binary image this entry describes.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.next","title":"<code>next()</code>","text":"<p>The next entry in the chain, if any.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.prev","title":"<code>prev()</code>","text":"<p>The previous entry in the chain, if any.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf32_r_sym","title":"<code>elf32_r_sym(r_info)</code>","text":"<p>Returns the r_sym portion of the r_info relocation field for ELF32.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf32_r_type","title":"<code>elf32_r_type(r_info)</code>","text":"<p>Returns the r_type portion of the r_info relocation field for ELF32.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf64_r_sym","title":"<code>elf64_r_sym(r_info)</code>","text":"<p>Returns the r_sym portion of the r_info relocation field for ELF64.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf64_r_type","title":"<code>elf64_r_type(r_info)</code>","text":"<p>Returns the r_type portion of the r_info relocation field for ELF64.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.is_dynamic","title":"<code>is_dynamic()</code>","text":"<p>Returns whether the current inferior is dynamic.</p> <p>Not all programs are dynamically linked, or even need the dynamic loader at all. Since this module is entirely reliant on at least the presence of the dynamic loader, and really only makes sense for dynamic programs, it should not be used at all with programs that don't participate in dynamic linkage, or when there is a dynamic linker, but we have no way to talk to it.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.link_map","title":"<code>link_map()</code>","text":"<p>Iterator over all the entries in the link map.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.link_map_head","title":"<code>link_map_head()</code>","text":"<p>Acquires a reference to the head entry of the link map.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_install_link_map_changed_hook","title":"<code>r_debug_install_link_map_changed_hook()</code>","text":"<p>Installs the r_debug-based hook to the change event of the link map.</p> <p>This function is a bit tricky, because ideally we want it to be run as soon as possible, before even the dynamic linker runs, but after both it and the main binary have been mapped into the address space of the inferior. While doing this manually would be trivial - seeing as there is a command in GDB that gives the user control at the exact place we would like -, there does not seem to be a way of easily doing this from inside Python.</p> <p>Because of this, parts of the code that rely on the hook should try calling this function and firing their own listeners manually at least once.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_link_map_changed_add_listener","title":"<code>r_debug_link_map_changed_add_listener(handler)</code>","text":"<p>Install a callback to be called whenever r_debug signal of there being a change in the link map link map is triggered.</p> <p>Keep in mind this function may be called before the hook that calls the listeners is installed, and, until it is installed, no listener callbacks will actually be triggered. See <code>r_debug_install_link_map_changed_hook</code>.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_link_map_changed_hook","title":"<code>r_debug_link_map_changed_hook()</code>","text":"<p>Hook that gets activated whenever the link map changes.</p> <p>The r_debug structure, in addition to having a refence to the head of the link map, also has, in its ABI-stable part, a reference to an address that can have a breakpoint attached to it, such that whenever the contents of the link map change, that breakpoint will be triggered1.</p> <p>We take advantage of that here, by installing our own breakpoint in that location, and watching for trigger events, so that we can notify other bits of pwndbg that the contents of the <code>link_map()</code> function will be different.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_link_map_changed_remove_listener","title":"<code>r_debug_link_map_changed_remove_listener(handler)</code>","text":"<p>Removes a listener previously installed with r_debug_link_map_changed_add_listener().</p>"},{"location":"source/aglib/elf/","title":"Elf","text":"<p>This file declares types and methods useful for enumerating all of the address spaces and permissions of an ELF file in memory.</p> <p>This is necessary for when access to /proc is restricted, or when working on a BSD system which simply does not have /proc.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.Ehdr","title":"<code>Ehdr = Union[pwndbg.lib.elftypes.Elf32_Ehdr, pwndbg.lib.elftypes.Elf64_Ehdr]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.Phdr","title":"<code>Phdr = Union[pwndbg.lib.elftypes.Elf32_Phdr, pwndbg.lib.elftypes.Elf64_Phdr]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.T","title":"<code>T = TypeVar('T', Union[pwndbg.lib.elftypes.Elf32_Ehdr, pwndbg.lib.elftypes.Elf64_Ehdr], Union[pwndbg.lib.elftypes.Elf32_Phdr, pwndbg.lib.elftypes.Elf64_Phdr])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ehdr_type_loaded","title":"<code>ehdr_type_loaded = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo","title":"<code>ELFInfo</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>ELF metadata and structures.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.header","title":"<code>header: Dict[str, int | str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.is_pic","title":"<code>is_pic: bool</code>  <code>property</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.is_pie","title":"<code>is_pie: bool</code>  <code>property</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.sections","title":"<code>sections: List[Dict[str, int | str]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.segments","title":"<code>segments: List[Dict[str, int | str]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(filepath, section_name, try_local_path=False)</code>","text":"<p>Dump the relocation entries of a section from an ELF file, return a generator of Relocation objects.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.dump_section_by_name","title":"<code>dump_section_by_name(filepath, section_name, try_local_path=False)</code>","text":"<p>Dump the content of a section from an ELF file, return the start address, size and content.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.entry","title":"<code>entry()</code>","text":"<p>Return the address of the entry point for the main executable.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.exe","title":"<code>exe()</code>","text":"<p>Return a loaded ELF header object pointing to the Ehdr of the main executable.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_containing_sections","title":"<code>get_containing_sections(elf_filepath, elf_loadaddr, vaddr)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_containing_segments","title":"<code>get_containing_segments(elf_filepath, elf_loadaddr, vaddr)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_ehdr","title":"<code>get_ehdr(pointer)</code>","text":"<p>Returns an ehdr object for the ELF pointer points into.</p> <p>We expect the <code>pointer</code> to be an address from the binary.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_elf_info","title":"<code>get_elf_info(filepath)</code>","text":"<p>Parse and return ELFInfo.</p> <p>Adds various calculated properties to the ELF header, segments and sections. Such added properties are those with prefix 'x_' in the returned dicts.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_elf_info_rebased","title":"<code>get_elf_info_rebased(filepath, vaddr)</code>","text":"<p>Parse and return ELFInfo with all virtual addresses rebased to vaddr</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_phdrs","title":"<code>get_phdrs(pointer)</code>","text":"<p>Returns a tuple containing (phnum, phentsize, gdb.Value), where the gdb.Value object is an ELF Program Header with the architecture-appropriate structure type.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.iter_phdrs","title":"<code>iter_phdrs(ehdr)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.load","title":"<code>load(pointer)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.map","title":"<code>map(pointer, objfile='')</code>","text":"<p>Given a pointer into an ELF module, return a list of all loaded sections in the ELF.</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A sorted list of pwndbg.lib.memory.Page objects</p> <p>Example:</p> Text Only<pre><code>&gt;&gt;&gt; pwndbg.aglib.elf.load(pwndbg.aglib.regs.pc)\n[Page('400000-4ef000 r-xp 0'),\n Page('6ef000-6f0000 r--p ef000'),\n Page('6f0000-6ff000 rw-p f0000')]\n&gt;&gt;&gt; pwndbg.aglib.elf.load(0x7ffff77a2000)\n[Page('7ffff75e7000-7ffff77a2000 r-xp 0x1bb000 0'),\n Page('7ffff77a2000-7ffff79a2000 ---p 0x200000 1bb000'),\n Page('7ffff79a2000-7ffff79a6000 r--p 0x4000 1bb000'),\n Page('7ffff79a6000-7ffff79ad000 rw-p 0x7000 1bf000')]\n</code></pre>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.map_inner","title":"<code>map_inner(ei_class, ehdr, objfile)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.read","title":"<code>read(typ, address, blob=None)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.reset_ehdr_type_loaded","title":"<code>reset_ehdr_type_loaded()</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/file/","title":"File","text":"<p>Retrieve files from the debuggee's filesystem.  Useful when debugging a remote process over SSH or similar, where e.g. /proc/FOO/maps is needed from the remote system.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.can_download_remote_file","title":"<code>can_download_remote_file()</code>","text":""},{"location":"source/aglib/file/#pwndbg.aglib.file.get","title":"<code>get(path)</code>","text":"<p>Retrieves the contents of the specified file on the system where the current process is being debugged.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>A byte array, or None.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.get_file","title":"<code>get_file(path, try_local_path=False)</code>","text":"<p>Downloads the specified file from the system where the current process is being debugged.</p> <p>If the <code>path</code> is prefixed with \"target:\" the prefix is stripped (to support remote target paths properly).</p> <p>If the <code>try_local_path</code> is set to <code>True</code> and the <code>path</code> exists locally and \"target:\" prefix is not present, it will return the local path instead of downloading the file.</p> <p>Returns:</p> Type Description <code>str</code> <p>The local path to the file</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.get_proc_exe_file","title":"<code>get_proc_exe_file()</code>","text":"<p>Returns the local path to the debugged file name.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.is_vfile_qemu_user_bug","title":"<code>is_vfile_qemu_user_bug()</code>","text":""},{"location":"source/aglib/file/#pwndbg.aglib.file.readlink","title":"<code>readlink(path)</code>","text":"<p>readlink(path) -&gt; str</p> <p>Read the link specified by 'path' on the system being debugged.</p> <p>Handles local, qemu-usermode, and remote debugging cases.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.remote_files_dir","title":"<code>remote_files_dir()</code>","text":""},{"location":"source/aglib/file/#pwndbg.aglib.file.reset_remote_files","title":"<code>reset_remote_files()</code>","text":""},{"location":"source/aglib/file/#pwndbg.aglib.file.vfile_close","title":"<code>vfile_close(fd)</code>","text":"<p>Closes a previously opened file descriptor.</p> <p>:param fd: File descriptor (integer). :return: None, or raises an exception if an error occurs.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.vfile_open","title":"<code>vfile_open(filename, flags, mode)</code>","text":"<p>Opens a file on the remote system and returns the file descriptor.</p> <p>:param filename: The path to the file (string). :param flags: Flags passed to the open call (integer, base 16).     These correspond to the constant values in the enum <code>OpenOptions</code> from LLDB\u2019s <code>File.h</code>,     not the traditional <code>open(2)</code> flags. :param mode: Mode bits for the file (integer, base 16). :return: File descriptor (integer), or raises an exception if an error occurs.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.vfile_pread","title":"<code>vfile_pread(fd, size, offset)</code>","text":"<p>Reads data from a file descriptor.</p> <p>:param fd: File descriptor (integer). :param size: Number of bytes to read (integer, base 16). :param offset: Offset in the file to start reading from (integer, base 16). :return: Tuple of (bytes_read, data) where bytes_read is an integer and data is the binary data.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.vfile_readfile","title":"<code>vfile_readfile(filename, chunk_size=1000)</code>","text":"<p>Reads the entire content of a file on the remote system.</p> <p>:param filename: The path to the file (string). :param chunk_size: The number of bytes to read in each iteration (integer). :return: The complete content of the file as bytes.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.vfile_readlink","title":"<code>vfile_readlink(pathname)</code>","text":"<p>Reads the target of a symbolic link on the remote system.</p> <p>:param pathname: The path to the symbolic link (string). :param buffer_size: The size of the buffer to read into (integer). :return: The target of the symbolic link as a string.</p>"},{"location":"source/aglib/godbg/","title":"Godbg","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.debug_color","title":"<code>debug_color = theme.add_color_param('go-dump-debug', 'blue', \"color for 'go-dump' command's debug info when --debug is specified\")</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.hex_digits","title":"<code>hex_digits = set('0123456789abcdefABCDEFxX')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.indent_amount","title":"<code>indent_amount = pwndbg.config.add_param('go-dump-indent-amount', 4, 'the indent amount for go-dump pretty printing')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.line_width","title":"<code>line_width = pwndbg.config.add_param('go-dump-line-width', 80, 'the soft line width for go-dump pretty printing')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType","title":"<code>ArrayType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>An array type in Go, notated as [count]inner.</p> <p>Arrays are laid out as contiguous data.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.count","title":"<code>count: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.inner","title":"<code>inner: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.__init__","title":"<code>__init__(meta, inner, count)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.ArrayType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BackrefType","title":"<code>BackrefType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A temporary placeholder type used when dumping recursive types, e.g. type a []a</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BackrefType.key","title":"<code>key: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BackrefType.__init__","title":"<code>__init__(meta, key)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BackrefType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BackrefType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BackrefType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType","title":"<code>BasicType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A primitive Go type.</p> <p>Complex numbers are laid out as a real and imaginary part (both floats). Strings are laid out as a pointer and a length.</p> <p>Methodless interfaces (the interface{} type) are denoted as any, and interfaces with methods are denoted as interface.</p> <p>Function pointers are denoted as funcptr.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.extra_meta","title":"<code>extra_meta: List[str] = dataclasses.field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.sz","title":"<code>sz: int = dataclasses.field(init=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.__init__","title":"<code>__init__(meta, name, extra_meta=list())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.__post_init__","title":"<code>__post_init__()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.BasicType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts","title":"<code>FormatOpts</code>  <code>dataclass</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.debug","title":"<code>debug: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.float_decimals","title":"<code>float_decimals: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.int_hex","title":"<code>int_hex: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.pretty","title":"<code>pretty: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.__init__","title":"<code>__init__(int_hex=False, debug=False, pretty=False, float_decimals=None)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_bytes","title":"<code>fmt_bytes(val)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_debug","title":"<code>fmt_debug(val, default='')</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_elems","title":"<code>fmt_elems(elems)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_float","title":"<code>fmt_float(val)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_int","title":"<code>fmt_int(val)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_ptr","title":"<code>fmt_ptr(val)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.FormatOpts.fmt_str","title":"<code>fmt_str(val)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind","title":"<code>GoTypeKind</code>","text":"<p>               Bases: <code>IntEnum</code></p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.ARRAY","title":"<code>ARRAY = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.BOOL","title":"<code>BOOL = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.CHAN","title":"<code>CHAN = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.COMPLEX128","title":"<code>COMPLEX128 = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.COMPLEX64","title":"<code>COMPLEX64 = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.FLOAT32","title":"<code>FLOAT32 = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.FLOAT64","title":"<code>FLOAT64 = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.FUNC","title":"<code>FUNC = 19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INT","title":"<code>INT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INT16","title":"<code>INT16 = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INT32","title":"<code>INT32 = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INT64","title":"<code>INT64 = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INT8","title":"<code>INT8 = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INTERFACE","title":"<code>INTERFACE = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.INVALID","title":"<code>INVALID = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.MAP","title":"<code>MAP = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.POINTER","title":"<code>POINTER = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.SLICE","title":"<code>SLICE = 23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.STRING","title":"<code>STRING = 24</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.STRUCT","title":"<code>STRUCT = 25</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UINT","title":"<code>UINT = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UINT16","title":"<code>UINT16 = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UINT32","title":"<code>UINT32 = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UINT64","title":"<code>UINT64 = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UINT8","title":"<code>UINT8 = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UINTPTR","title":"<code>UINTPTR = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.UNSAFEPOINTER","title":"<code>UNSAFEPOINTER = 26</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeKind.get_simple_name","title":"<code>get_simple_name()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta","title":"<code>GoTypeMeta</code>  <code>dataclass</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.addr","title":"<code>addr: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.align","title":"<code>align: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.direct_iface","title":"<code>direct_iface: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.kind","title":"<code>kind: GoTypeKind</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.size","title":"<code>size: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.GoTypeMeta.__init__","title":"<code>__init__(name, kind, addr, size=0, align=1, direct_iface=False)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType","title":"<code>MapType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A map type in Go, notated as map[key]val.</p> <p>Note that maps in Go are actually pointers to the inner map, but the map type printer here directly prints the inner map.</p> <p>Maps don't have a simple layout, and may reasonably change, but the last change was in 2017, so it probably won't.</p> <p>The layout assumed is as follows (taken from src/runtime/map.go commit 1b4f1dc):</p> <p>type hmap struct {     count      int     flags      uint8     B          uint8     noverflow  uint16     hash0      uint32     buckets    unsafe.Pointer     oldbuckets unsafe.Pointer     nevacuate  uintptr     extra      *mapextra }</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.key","title":"<code>key: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.val","title":"<code>val: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.__init__","title":"<code>__init__(meta, key, val)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.field_offsets","title":"<code>field_offsets()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.MapType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType","title":"<code>PointerType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A pointer type in Go, notated as *inner.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType.inner","title":"<code>inner: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType.__init__","title":"<code>__init__(meta, inner)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.PointerType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType","title":"<code>RuntimeType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A value of a runtime reflection type in Go, notated as runtime(SIZE)ADDRESS, where SIZE is the size of the type's value in bytes, and ADDRESS is the address of the type.</p> <p>This type is useful for serializing cyclic types.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType.addr","title":"<code>addr: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType.sz","title":"<code>sz: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType.__init__","title":"<code>__init__(meta, sz, addr)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.RuntimeType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType","title":"<code>SliceType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A slice type in Go, notated as []inner.</p> <p>Slices are laid out as a pointer, length, and capacity.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType.inner","title":"<code>inner: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType.__init__","title":"<code>__init__(meta, inner)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.SliceType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType","title":"<code>StructType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A struct type in Go, notated as struct(SIZE){FIELDS}, where SIZE is the size of the struct in bytes, and FIELDS is a semicolon-separated list of OFFSET:NAME:TYPE fields.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.fields","title":"<code>fields: List[Tuple[str, Type | str, int]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.sz","title":"<code>sz: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.__init__","title":"<code>__init__(meta, fields, sz, name=None)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.StructType.size","title":"<code>size()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type","title":"<code>Type</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.meta","title":"<code>meta: GoTypeMeta | None</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.__init__","title":"<code>__init__(meta)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.additional_metadata","title":"<code>additional_metadata()</code>","text":"<p>Returns a list of lines of additional metadata to dump from the <code>go-type</code> command.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>  <code>abstractmethod</code>","text":"<p>Dump a type from memory given an address and format.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.get_typename","title":"<code>get_typename()</code>  <code>abstractmethod</code>","text":"<p>Returns the typename of a type. Should be reparsable via _parse_ty.</p> <p>Also used to get the string representation.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.is_cyclic","title":"<code>is_cyclic()</code>","text":"<p>Checks if a type is cyclic (contains references to itself), e.g. type a []a</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.Type.size","title":"<code>size()</code>  <code>abstractmethod</code>","text":"<p>Returns the size of a type in bytes.</p> <p>Used for computing array and struct layouts.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.compute_named_offsets","title":"<code>compute_named_offsets(fields)</code>","text":"<p>Like compute_offsets, but takes in field names and returns a dictionary mapping field name to offset instead.</p> <p>Also maps in a special $size field with the size of the struct.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.compute_offsets","title":"<code>compute_offsets(fields)</code>","text":"<p>Given a list of (size, alignment) for struct field types, returns a list of field offsets for the struct. The last element will be the offset of the struct's end (the struct size).</p> <p>Layout computation taken from src/go/types/sizes.go commit 1b4f1dc</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.decode_runtime_type","title":"<code>decode_runtime_type(addr, keep_backrefs=False)</code>","text":"<p>Decodes a runtime reflection type from memory, returning a (meta, type) tuplee.</p> <p>The layout assumed is as follows (taken from src/internal/abi/type.go commit 1b4f1dc):</p> <p>type Type struct {     Size_       uintptr     PtrBytes    uintptr     Hash        uint32     TFlag       TFlag     Align_      uint8     FieldAlign_ uint8     Kind_       Kind     Equal       func(unsafe.Pointer, unsafe.Pointer) bool     GCData      *byte     Str         NameOff     PtrToThis   TypeOff }</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.emit_warning","title":"<code>emit_warning(msg)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.get_elf","title":"<code>get_elf()</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.get_go_version","title":"<code>get_go_version()</code>","text":"<p>Try to determine the Go version used to compile the binary.</p> <p>None can be returned if the version couldn't be inferred, at which point it's probably best to assume latest version.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.get_type_start","title":"<code>get_type_start(addr=None)</code>","text":"<p>Given the address to a type, try to find the moduledata types section containing it.</p> <p>Necessary to determine the base address that the type name is offset by.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.load_float","title":"<code>load_float(data)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.load_int","title":"<code>load_int(data)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.load_uint","title":"<code>load_uint(data, endian=None)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.parse_type","title":"<code>parse_type(ty)</code>","text":""},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.read_buildversion","title":"<code>read_buildversion(addr)</code>","text":"<p>Reads a Go runtime.buildVersion string to extract the version.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.read_type_name","title":"<code>read_type_name(addr)</code>","text":"<p>Reads a Go type name given the address to the name.</p> <p>Go type names are stored as a 1 byte bitfield followed by a varint length prefixed string after 1.17.</p> <p>Prior to 1.17, they were stored as a 1 byte bitfield followed by a 2 byte length prefixed string.</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.read_varint_str","title":"<code>read_varint_str(addr)</code>","text":"<p>Read a length-prefix string encoded with Go's variable length encoding.</p> <p>Implementation taken from https://github.com/golang/go/blob/9d33956503c0d96c0c5666d374173f7ac9756d98/src/internal/abi/type.go#L640-L649</p>"},{"location":"source/aglib/godbg/#pwndbg.aglib.godbg.word_size","title":"<code>word_size()</code>","text":"<p>Gets the Go word size for the current architecture.</p> <p>Values taken from https://github.com/golang/go/blob/20b79fd5775c39061d949569743912ad5e58b0e7/src/go/types/sizes.go#L233-L252</p>"},{"location":"source/aglib/memory/","title":"Memory","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.GdbDict","title":"<code>GdbDict = Dict[str, Union['GdbDict', int]]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.MMAP_MIN_ADDR","title":"<code>MMAP_MIN_ADDR = 32768</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.byte","title":"<code>byte(addr)</code>","text":"<p>byte(addr) -&gt; int</p> <p>Read one byte at the specified address</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.cast_pointer","title":"<code>cast_pointer(type, addr)</code>","text":"<p>Create a Value containing given address and cast it to the pointer of specified type</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.convert_pwndbg_value_to_python_value","title":"<code>convert_pwndbg_value_to_python_value(dbg_value)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.fetch_struct_as_dictionary","title":"<code>fetch_struct_as_dictionary(struct_name, struct_address, include_only_fields=None, exclude_fields=None)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.find_lower_boundary","title":"<code>find_lower_boundary(addr, max_pages=1024)</code>","text":"<p>find_lower_boundary(addr, max_pages=1024) -&gt; int</p> <p>Brute-force search the lower boundary of a memory mapping, by reading the first byte of each page, until an unmapped page is found.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.find_upper_boundary","title":"<code>find_upper_boundary(addr, max_pages=1024)</code>","text":"<p>find_upper_boundary(addr, max_pages=1024) -&gt; int</p> <p>Brute-force search the upper boundary of a memory mapping, by reading the first byte of each page, until an unmapped page is found.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.get_typed_pointer","title":"<code>get_typed_pointer(type, addr)</code>","text":"<p>Look up a type by name if necessary and return a Value of addr cast to that type</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.get_typed_pointer_value","title":"<code>get_typed_pointer_value(type_name, addr)</code>","text":"<p>Read the pointer value of addr cast to type specified by type_name</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.is_readable_address","title":"<code>is_readable_address(address)</code>","text":"<p>is_readable_address(address) -&gt; bool</p> <p>Check if the address can be read by GDB.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to read</p> required <p>Returns:</p> Type Description <code>bool</code> <p>class:<code>bool</code>: Whether the address is readable.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.pack_struct_into_dictionary","title":"<code>pack_struct_into_dictionary(fetched_struct, include_only_fields=None, exclude_fields=None)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.peek","title":"<code>peek(address)</code>","text":"<p>peek(address) -&gt; bytearray</p> <p>Read one byte from the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to read</p> required <p>Returns:</p> Type Description <code>bytearray | None</code> <p>class:<code>bytearray</code>: A single byte of data, or <code>None</code> if the</p> <code>bytearray | None</code> <p>address cannot be read.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.poke","title":"<code>poke(address)</code>","text":"<p>poke(address)</p> <p>Checks whether an address is writable.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>class:<code>bool</code>: Whether the address is writable.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.pvoid","title":"<code>pvoid(addr)</code>","text":"<p>pvoid(addr) -&gt; int</p> <p>Read one pointer from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.read","title":"<code>read(addr, count, partial=False)</code>","text":"<p>read(addr, count, partial=False) -&gt; bytearray</p> <p>Read memory from the program being debugged.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to read</p> required <code>count(int)</code> <p>Number of bytes to read</p> required <code>partial(bool)</code> <p>Whether less than <code>count</code> bytes can be returned</p> required <p>Returns:</p> Type Description <code>bytearray</code> <p>class:<code>bytearray</code>: The memory at the specified address,</p> <code>bytearray</code> <p>or <code>None</code>.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.readtype","title":"<code>readtype(type, addr)</code>","text":"<p>readtype(type, addr) -&gt; int</p> <p>Reads an integer-type (e.g. <code>uint64</code>) and returns a Python native integer representation of the same.</p> <p>Parameters:</p> Name Type Description Default <code>type(pwndbg.dbg_mod.Type)</code> <p>GDB type to read</p> required <code>addr(int)</code> <p>Address at which the value to be read resides</p> required <p>Returns:</p> Type Description <code>int</code> <p>class:<code>int</code></p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.resolve_renamed_struct_field","title":"<code>resolve_renamed_struct_field(struct_name, possible_field_names)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s16","title":"<code>s16(addr)</code>","text":"<p>s16(addr) -&gt; int</p> <p>Read one <code>int16_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s32","title":"<code>s32(addr)</code>","text":"<p>s32(addr) -&gt; int</p> <p>Read one <code>int32_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s64","title":"<code>s64(addr)</code>","text":"<p>s64(addr) -&gt; int</p> <p>Read one <code>int64_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s8","title":"<code>s8(addr)</code>","text":"<p>s8(addr) -&gt; int</p> <p>Read one <code>int8_t</code> from the specified address</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.string","title":"<code>string(addr, max=4096)</code>","text":"<p>Reads a null-terminated string from memory.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to read from</p> required <code>max(int)</code> <p>Maximum string length (default 4096)</p> required <p>Returns:</p> Type Description <code>bytearray</code> <p>An empty bytearray, or a NULL-terminated bytearray.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u","title":"<code>u(addr, size=None)</code>","text":"<p>u(addr, size=None) -&gt; int</p> <p>Read one <code>unsigned</code> integer from the specified address, with the bit-width specified by <code>size</code>, which defaults to the pointer width.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u16","title":"<code>u16(addr)</code>","text":"<p>u16(addr) -&gt; int</p> <p>Read one <code>uint16_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u32","title":"<code>u32(addr)</code>","text":"<p>u32(addr) -&gt; int</p> <p>Read one <code>uint32_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u64","title":"<code>u64(addr)</code>","text":"<p>u64(addr) -&gt; int</p> <p>Read one <code>uint64_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u8","title":"<code>u8(addr)</code>","text":"<p>u8(addr) -&gt; int</p> <p>Read one <code>uint8_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.uchar","title":"<code>uchar(addr)</code>","text":"<p>uchar(addr) -&gt; int</p> <p>Read one <code>unsigned char</code> at the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.uint","title":"<code>uint(addr)</code>","text":"<p>uint(addr) -&gt; int</p> <p>Read one <code>unsigned int</code> at the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.update_min_addr","title":"<code>update_min_addr()</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.ushort","title":"<code>ushort(addr)</code>","text":"<p>ushort(addr) -&gt; int</p> <p>Read one <code>unisgned short</code> at the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.write","title":"<code>write(addr, data)</code>","text":"<p>write(addr, data)</p> <p>Writes data into the memory of the process being debugged.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to write</p> required <code>data(str,bytes,bytearray)</code> <p>Data to write</p> required"},{"location":"source/aglib/nearpc/","title":"Nearpc","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.c","title":"<code>c = ColorConfig('nearpc', [ColorParamSpec('symbol', 'normal', 'color for nearpc command (symbol)'), ColorParamSpec('address', 'normal', 'color for nearpc command (address)'), ColorParamSpec('prefix', 'none', 'color for nearpc command (prefix marker)'), ColorParamSpec('syscall-name', 'red', 'color for nearpc command (resolved syscall name)'), ColorParamSpec('argument', 'bold', 'color for nearpc command (target argument)'), ColorParamSpec('integration-comments', 'bold', 'color for nearpc command (integration comments)'), ColorParamSpec('branch-marker', 'normal', 'color for nearpc command (branch marker line)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc_branch_marker","title":"<code>nearpc_branch_marker = pwndbg.color.theme.add_param('nearpc-branch-marker', '    \u2193', 'branch marker line for nearpc command')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc_branch_marker_contiguous","title":"<code>nearpc_branch_marker_contiguous = pwndbg.color.theme.add_param('nearpc-branch-marker-contiguous', ' ', 'contiguous branch marker line for nearpc command')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc_lines","title":"<code>nearpc_lines = pwndbg.config.add_param('nearpc-lines', 10, 'number of additional lines to print for the nearpc command')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.opcode_separator_bytes","title":"<code>opcode_separator_bytes = pwndbg.config.add_param('nearpc-opcode-separator-bytes', 1, 'number of spaces between opcode bytes', param_class=pwndbg.lib.config.PARAM_ZUINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.show_args","title":"<code>show_args = pwndbg.config.add_param('nearpc-show-args', True, 'whether to show call arguments below instruction')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.show_comments","title":"<code>show_comments = pwndbg.config.add_param('nearpc-integration-comments', True, 'whether to show comments from integration provider')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.show_opcode_bytes","title":"<code>show_opcode_bytes = pwndbg.config.add_param('nearpc-num-opcode-bytes', 0, 'number of opcode bytes to print for each instruction', param_class=pwndbg.lib.config.PARAM_ZUINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.ljust_padding","title":"<code>ljust_padding(lst)</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc","title":"<code>nearpc(pc=None, lines=None, emulate=False, repeat=False, use_cache=False, linear=False)</code>","text":"<p>Disassemble near a specified address.</p> <p>The <code>linear</code> argument specifies if we should disassemble linearly in memory, or take jumps into account</p>"},{"location":"source/aglib/next/","title":"Next","text":"<p>Commands for setting temporary breakpoints on the next instruction of some type (call, branch, etc.)</p>"},{"location":"source/aglib/next/#pwndbg.aglib.next.interrupts","title":"<code>interrupts = {capstone.CS_GRP_INT}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.break_next_branch","title":"<code>break_next_branch(ec, address=None)</code>  <code>async</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.break_next_call","title":"<code>break_next_call(ec, symbol_regex=None)</code>  <code>async</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.break_next_interrupt","title":"<code>break_next_interrupt(ec, address=None)</code>  <code>async</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.break_next_ret","title":"<code>break_next_ret(ec, address=None)</code>  <code>async</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.break_on_next","title":"<code>break_on_next(ec, address=None)</code>  <code>async</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.break_on_next_matching_instruction","title":"<code>break_on_next_matching_instruction(ec, mnemonic=None, op_str=None)</code>  <code>async</code>","text":"<p>Breaks on next instuction that matches the arguments.</p>"},{"location":"source/aglib/next/#pwndbg.aglib.next.break_on_program_code","title":"<code>break_on_program_code(ec)</code>  <code>async</code>","text":"<p>Breaks on next instruction that belongs to process' objfile code</p> <p>:return: True for success, False when process ended or when pc is not at the code or if a signal occurred</p>"},{"location":"source/aglib/next/#pwndbg.aglib.next.next_branch","title":"<code>next_branch(address=None)</code>","text":""},{"location":"source/aglib/next/#pwndbg.aglib.next.next_int","title":"<code>next_int(address=None)</code>","text":"<p>If there is a syscall in the current basic black, return the instruction of the one closest to $PC.</p> <p>Otherwise, return None.</p>"},{"location":"source/aglib/next/#pwndbg.aglib.next.next_matching_until_branch","title":"<code>next_matching_until_branch(address=None, mnemonic=None, op_str=None)</code>","text":"<p>Finds the next instruction that matches the arguments between the given address and the branch closest to it.</p>"},{"location":"source/aglib/onegadget/","title":"Onegadget","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.ADDRESS_WRITABLE_PATTERN","title":"<code>ADDRESS_WRITABLE_PATTERN = re.compile('address(?:es)? (.*) (?:is|are) writable')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CAST_DEREF_MAPPING","title":"<code>CAST_DEREF_MAPPING = {'(u16)': pwndbg.aglib.memory.u16, '(s16)': pwndbg.aglib.memory.s16, '(u32)': pwndbg.aglib.memory.u32, '(s32)': pwndbg.aglib.memory.s32, '(u64)': pwndbg.aglib.memory.u64, '(s64)': pwndbg.aglib.memory.s64}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CAST_MAPPING","title":"<code>CAST_MAPPING = {'(u16)': lambda x: ctypes.c_uint16(x).value, '(s16)': lambda x: ctypes.c_int16(x).value, '(u32)': lambda x: ctypes.c_uint32(x).value, '(s32)': lambda x: ctypes.c_int32(x).value, '(u64)': lambda x: ctypes.c_uint64(x).value, '(s64)': lambda x: ctypes.c_int64(x).value}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CAST_PATTERN","title":"<code>CAST_PATTERN = re.compile('^\\\\([s|u]\\\\d+\\\\)')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CONSTRAINT_SEPARATOR","title":"<code>CONSTRAINT_SEPARATOR = ' || '</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.EQUAL_NULL_PATTERN","title":"<code>EQUAL_NULL_PATTERN = re.compile('(.*) == NULL')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.IS_ALIGNED_PATTERN","title":"<code>IS_ALIGNED_PATTERN = re.compile('(.+) &amp; 0xf == (\\\\d+)')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.IS_GOT_ADDRESS_PATTERN","title":"<code>IS_GOT_ADDRESS_PATTERN = re.compile('(.+) is the GOT address of libc')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.ONEGADGET_CACHEDIR","title":"<code>ONEGADGET_CACHEDIR = pwndbg.lib.tempfile.cachedir('onegadget')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.ONEGADGET_COLOR","title":"<code>ONEGADGET_COLOR = {'light_green': lambda x: colorize(x, '\\x1b[38;5;82m'), 'light_purple': lambda x: colorize(x, '\\x1b[38;5;153m')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.SAT","title":"<code>SAT = CheckSatResult.SAT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.UNKNOWN","title":"<code>UNKNOWN = CheckSatResult.UNKNOWN</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.UNSAT","title":"<code>UNSAT = CheckSatResult.UNSAT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.VALID_ARGV_PATTERN","title":"<code>VALID_ARGV_PATTERN = re.compile('(.+) is a valid argv')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.VALID_ENVP_PATTERN","title":"<code>VALID_ENVP_PATTERN = re.compile('(.+) is a valid envp')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.VALID_POSIX_SPAWN_FILE_ACTIONS_PATTERN","title":"<code>VALID_POSIX_SPAWN_FILE_ACTIONS_PATTERN = re.compile('(.*) &lt;= 0')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.WRITABLE_COLON_PATTERN","title":"<code>WRITABLE_COLON_PATTERN = re.compile('writable: (.*)')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.XMM_SHIFT","title":"<code>XMM_SHIFT = ' &gt;&gt; '</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult","title":"<code>CheckSatResult</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult.SAT","title":"<code>SAT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult.UNKNOWN","title":"<code>UNKNOWN = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult.UNSAT","title":"<code>UNSAT = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult.__and__","title":"<code>__and__(other)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult.__or__","title":"<code>__or__(other)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.CheckSatResult.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda","title":"<code>Lambda</code>","text":"<p>Modified from onegadget's Lambda class</p> <p>https://github.com/david942j/one_gadget/blob/65ce1dade70bf89e7496346ccf452ce5b2d139b3/lib/one_gadget/emulators/lambda.rb#L13</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.color_str","title":"<code>color_str: str</code>  <code>property</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.deref_count","title":"<code>deref_count = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.gdb_expr","title":"<code>gdb_expr: str</code>  <code>property</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.immi","title":"<code>immi = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.obj","title":"<code>obj = obj</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.__add__","title":"<code>__add__(other)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.__init__","title":"<code>__init__(obj)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.__sub__","title":"<code>__sub__(other)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.deref","title":"<code>deref()</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.deref_","title":"<code>deref_()</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.evaluate","title":"<code>evaluate(context)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.mem_obj","title":"<code>mem_obj(arg)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.parse","title":"<code>parse(argument, predefined={})</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.Lambda.ref","title":"<code>ref()</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.check_argv","title":"<code>check_argv(expr)</code>","text":"<p>Check argv, return the result and the message</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.check_constraint","title":"<code>check_constraint(constraint)</code>","text":"<p>Parse constraint, return the result and the message</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.check_envp","title":"<code>check_envp(expr)</code>","text":"<p>Check envp, return the result and the message</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.check_gadget","title":"<code>check_gadget(gadget, show_unsat=False, no_unknown=False, verbose=False)</code>","text":"<p>Check status of each gadget, return the gadget's status</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.check_non_stack_argv","title":"<code>check_non_stack_argv(expr)</code>","text":"<p>Check argv that's not on the stack, return the result and the message</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.check_stack_argv","title":"<code>check_stack_argv(expr)</code>","text":"<p>Check argv that's on the stack, return the result and the message</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.colorize_integer","title":"<code>colorize_integer(x)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.colorize_psuedo_code","title":"<code>colorize_psuedo_code(code)</code>","text":"<p>Colorize the pseudo code of onegadget</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.colorize_reg","title":"<code>colorize_reg(x)</code>","text":""},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.compute_file_hash","title":"<code>compute_file_hash(filename)</code>","text":"<p>Compute the MD5 hash of the file, return the hash</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.find_gadgets","title":"<code>find_gadgets(show_unsat=False, no_unknown=False, verbose=False)</code>","text":"<p>Find gadgets by parsing the output of onegadget, return there's any valid gadget</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.parse_expression","title":"<code>parse_expression(expr)</code>","text":"<p>Parse expression, return the result, colorized string and error message</p>"},{"location":"source/aglib/onegadget/#pwndbg.aglib.onegadget.run_onegadget","title":"<code>run_onegadget()</code>","text":"<p>Run onegadget and return the output</p>"},{"location":"source/aglib/proc/","title":"Proc","text":"<p>Provides values which would be available from /proc which are not fulfilled by other modules and some process/gdb flow related information.</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.alive","title":"<code>alive: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.binary_base_addr","title":"<code>binary_base_addr: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.binary_vmmap","title":"<code>binary_vmmap: Tuple[pwndbg.lib.memory.Page, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.exe","title":"<code>exe: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.pid","title":"<code>pid: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.stopped_with_signal","title":"<code>stopped_with_signal: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.tether","title":"<code>tether = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.thread_id","title":"<code>thread_id: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.tid","title":"<code>tid: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module","title":"<code>module</code>","text":"<p>               Bases: <code>ModuleType</code></p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.alive","title":"<code>alive: bool</code>  <code>property</code>","text":"<p>Informs whether the process has a thread. However, note that it will still return True for a segfaulted thread. To detect that, consider using the <code>stopped_with_signal</code> method.</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.binary_base_addr","title":"<code>binary_base_addr: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.binary_vmmap","title":"<code>binary_vmmap: Tuple[pwndbg.lib.memory.Page, ...]</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.exe","title":"<code>exe: str | None</code>  <code>property</code>","text":"<p>Returns the executed file path.</p> <p>On remote targets, this path may not exist locally.</p> If you need the locally referenced file use <p><code>gdb.current_process().filename</code></p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.pid","title":"<code>pid: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.stopped_with_signal","title":"<code>stopped_with_signal: bool</code>  <code>property</code>","text":"<p>Returns whether the program has stopped with a signal</p> <p>Can be used to detect segfaults (but will also detect other signals)</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.thread_id","title":"<code>thread_id: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.tid","title":"<code>tid: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.OnlyWhenRunning","title":"<code>OnlyWhenRunning(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":"<p>Decorates function to work only with the specified archictectures.</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.dump_elf_data_section","title":"<code>dump_elf_data_section()</code>","text":"<p>Dump .data section of current process's ELF file</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(section_name)</code>","text":"<p>Dump relocations of a section by section name of current process's ELF file</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.get_section_address_by_name","title":"<code>get_section_address_by_name(section_name)</code>","text":"<p>Find section address of current process by section name</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.OnlyWhenRunning","title":"<code>OnlyWhenRunning(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":""},{"location":"source/aglib/qemu/","title":"Qemu","text":"<p>Determine whether the target is being run under QEMU.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.exec_file_supported","title":"<code>exec_file_supported()</code>","text":"<p>Returns <code>True</code> if the remote target understands the 'qXfer:exec-file:read' packet. A check for this feature is done in vmmap code, to warn against running legacy Qemu versions.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_old_qemu_user","title":"<code>is_old_qemu_user()</code>","text":""},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_qemu_kernel","title":"<code>is_qemu_kernel()</code>","text":""},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_qemu_usermode","title":"<code>is_qemu_usermode()</code>","text":"<p>Returns <code>True</code> if the target remote is being run under QEMU usermode emulation.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_usermode","title":"<code>is_usermode()</code>","text":""},{"location":"source/aglib/regs/","title":"Regs","text":"<p>Reading register value from the inferior, and provides a standardized interface to registers like \"sp\" and \"pc\".</p>"},{"location":"source/aglib/regs/#pwndbg.aglib.regs.ARCH_GET_FS","title":"<code>ARCH_GET_FS = 4099</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.ARCH_GET_GS","title":"<code>ARCH_GET_GS = 4100</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.PTRACE_ARCH_PRCTL","title":"<code>PTRACE_ARCH_PRCTL = 30</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.all","title":"<code>all: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.changed","title":"<code>changed: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.common","title":"<code>common: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.current","title":"<code>current: RegisterSet</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.extra_flags","title":"<code>extra_flags: Dict[str, BitFlags]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.fix","title":"<code>fix: Callable[[str], str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.flags","title":"<code>flags: Dict[str, BitFlags]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.frame","title":"<code>frame: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.fsbase","title":"<code>fsbase: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.gpr","title":"<code>gpr: Tuple[str, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.gsbase","title":"<code>gsbase: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.items","title":"<code>items: Callable[[], Generator[Tuple[str, Any], None, None]]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.last","title":"<code>last: Dict[str, int]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.pc","title":"<code>pc: int | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.previous","title":"<code>previous: Dict[str, int]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.retaddr","title":"<code>retaddr: Tuple[str, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.retval","title":"<code>retval: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.stack","title":"<code>stack: str</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.tether","title":"<code>tether = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module","title":"<code>module</code>","text":"<p>               Bases: <code>ModuleType</code></p>"},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.all","title":"<code>all: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.changed","title":"<code>changed: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.common","title":"<code>common: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.current","title":"<code>current: RegisterSet</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.extra_flags","title":"<code>extra_flags: Dict[str, BitFlags]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.flags","title":"<code>flags: Dict[str, BitFlags]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.frame","title":"<code>frame: str | None</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.fsbase","title":"<code>fsbase: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.gpr","title":"<code>gpr: Tuple[str, ...]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.gsbase","title":"<code>gsbase: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.idt","title":"<code>idt: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.idt_limit","title":"<code>idt_limit: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.last","title":"<code>last: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.previous","title":"<code>previous: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.reg_sets","title":"<code>reg_sets = reg_sets</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.retaddr","title":"<code>retaddr: Tuple[str, ...]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.retval","title":"<code>retval: str | None</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.stack","title":"<code>stack: str</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__contains__","title":"<code>__contains__(reg)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__getitem__","title":"<code>__getitem__(item)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__setattr__","title":"<code>__setattr__(attr, val)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.fix","title":"<code>fix(expression)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.items","title":"<code>items()</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.read_reg","title":"<code>read_reg(reg, frame=None)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.get_qemu_register","title":"<code>get_qemu_register(name)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.get_register","title":"<code>get_register(name, frame=None)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.regs_in_frame","title":"<code>regs_in_frame(frame)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.update_last","title":"<code>update_last()</code>","text":""},{"location":"source/aglib/remote/","title":"Remote","text":"<p>Information about whether the debuggee is local (under GDB) or remote (under GDBSERVER or QEMU stub).</p>"},{"location":"source/aglib/remote/#pwndbg.aglib.remote.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/aglib/shellcode/","title":"Shellcode","text":"<p>Shellcode</p> <p>This module implements functionality that allows for the execution of a small amount of code in the context of the inferior.</p>"},{"location":"source/aglib/shellcode/#pwndbg.aglib.shellcode.exec_shellcode","title":"<code>exec_shellcode(ec, blob, restore_context=True, disable_breakpoints=False)</code>  <code>async</code>","text":"<p>Tries executing the given blob of machine code in the current context of the inferior, optionally restoring the values of the registers as they were before the shellcode ran, as a means to allow for execution of the inferior to continue uninterrupted. The value of the program counter is always restored.</p> <p>Additionally, the caller may specify an object to be called before the context is restored, so that information stored in the registers after the shellcode finishes can be retrieved. The return value of that call will be returned by this function.</p>"},{"location":"source/aglib/shellcode/#pwndbg.aglib.shellcode.exec_shellcode--safety","title":"Safety","text":"<p>Seeing as this function injects code directly into the inferior and runs it, the caller must be careful to inject code that will (1) terminate and (2) not cause the inferior to misbehave. Otherwise, it is fairly easy to crash or currupt the memory in the inferior.</p>"},{"location":"source/aglib/shellcode/#pwndbg.aglib.shellcode.exec_syscall","title":"<code>exec_syscall(ec, syscall, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, disable_breakpoints=False)</code>  <code>async</code>","text":"<p>Tries executing the given syscall in the context of the inferior.</p>"},{"location":"source/aglib/stack/","title":"Stack","text":"<p>Helpers for finding address mappings which are used as a stack.</p> <p>Generally not needed, except under qemu-user and for when binaries do things to remap the stack (e.g. pwnies' postit).</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.auto_explore","title":"<code>auto_explore = pwndbg.config.add_param('auto-explore-stack', 'warn', 'Enable or disable stack exploration; it may be really slow.', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['warn', 'yes', 'no'])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/stack/#pwndbg.aglib.stack.callstack","title":"<code>callstack()</code>","text":"<p>Return the address of the return address for the current frame.</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.current","title":"<code>current()</code>","text":"<p>Returns the bounds for the stack for the current thread.</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.find","title":"<code>find(address)</code>","text":"<p>Returns a pwndbg.lib.memory.Page object which corresponds to given address stack or None if it does not exist</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.find_upper_stack_boundary","title":"<code>find_upper_stack_boundary(stack_ptr, max_pages=1024)</code>","text":""},{"location":"source/aglib/stack/#pwndbg.aglib.stack.get","title":"<code>get()</code>","text":"<p>For each running thread, return the known address range for its stack Returns a dict which should never be modified (since its cached)</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.is_executable","title":"<code>is_executable()</code>","text":""},{"location":"source/aglib/strings/","title":"Strings","text":"<p>Functionality for resolving ASCII printable strings within the debuggee's address space.</p>"},{"location":"source/aglib/strings/#pwndbg.aglib.strings.length","title":"<code>length = 15</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/strings/#pwndbg.aglib.strings.get","title":"<code>get(address, maxlen=None, maxread=None)</code>","text":"<p>Returns a printable C-string from address.</p> <p>Returns <code>None</code> if string contains non-printable chars or if the <code>maxlen</code> length data does not end up with a null byte.</p>"},{"location":"source/aglib/strings/#pwndbg.aglib.strings.update_length","title":"<code>update_length()</code>","text":"<p>Unfortunately there's not a better way to get at this info.</p> <p>gdb.execute('show print elements', from_tty=False, to_string=True) 'Limit on string chars or array elements to print is 21.\\n'</p>"},{"location":"source/aglib/symbol/","title":"Symbol","text":"<p>Looking up addresses for function names / symbols, and vice-versa.</p>"},{"location":"source/aglib/symbol/#pwndbg.aglib.symbol.lookup_frame_symbol","title":"<code>lookup_frame_symbol(name, *, type=SymbolLookupType.ANY)</code>","text":"<p>Returns the address of the given <code>symbol</code>, cast-ed to the appropriate symbol type.</p> <p>This function searches for (SymbolLookupType.ANY): - Function names - Variable names - (gdb only, please don't use) Typedef names - (gdb only, please don't use) Enum values</p> <p>The lookup order is as follows: 1. Local scope 2. Global scope within the current module 3. Global static scope within the current module 4. Global scope in other modules 5. Global static scope in other modules</p>"},{"location":"source/aglib/symbol/#pwndbg.aglib.symbol.lookup_symbol","title":"<code>lookup_symbol(name, *, prefer_static=False, type=SymbolLookupType.ANY, objfile_endswith=None)</code>","text":"<p>Returns the address of the given <code>symbol</code>, cast-ed to the appropriate symbol type.</p> <p>This function searches for (SymbolLookupType.ANY): - Function names - Variable names - (gdb only) Typedef names (if you need please use aglib.typeinfo.load) - (gdb only) Enum values (if you need please use aglib.typeinfo.enum_member)</p> <p>The lookup order is as follows (default): 1. Global scope within the current module 2. Global static scope within the current module 3. Global scope in other modules 4. Global static scope in other modules</p>"},{"location":"source/aglib/symbol/#pwndbg.aglib.symbol.lookup_symbol_addr","title":"<code>lookup_symbol_addr(name, *, prefer_static=False, type=SymbolLookupType.ANY, objfile_endswith=None)</code>","text":""},{"location":"source/aglib/symbol/#pwndbg.aglib.symbol.lookup_symbol_value","title":"<code>lookup_symbol_value(name, *, prefer_static=False, type=SymbolLookupType.ANY, objfile_endswith=None)</code>","text":""},{"location":"source/aglib/symbol/#pwndbg.aglib.symbol.resolve_addr","title":"<code>resolve_addr(addr)</code>","text":"<p>Resolves an address to its corresponding symbol name, if available.</p> <p>Note: - This function does not resolve TLS (Thread-Local Storage) addresses or addresses with local scope.</p> <p>Resolution is performed in the following order: - Global scope symbols.</p>"},{"location":"source/aglib/tls/","title":"Tls","text":"<p>Getting Thread Local Storage (TLS) information.</p>"},{"location":"source/aglib/tls/#pwndbg.aglib.tls.__call_pthread_self","title":"<code>__call_pthread_self()</code>","text":"<p>Retrieve the address of the <code>struct pthread_t</code> for the current thread by calling pthread_self(). This address can be used to locate the base address of the Thread Local Storage (TLS).</p>"},{"location":"source/aglib/tls/#pwndbg.aglib.tls.find_address_with_pthread_self","title":"<code>find_address_with_pthread_self()</code>","text":"<p>Get the base address of the Thread Local Storage (TLS) for the current thread using the pthread_self() function. The returned address points to the <code>struct tcbhead_t</code>, which serves as the header for TLS and thread-specific metadata.</p>"},{"location":"source/aglib/tls/#pwndbg.aglib.tls.find_address_with_register","title":"<code>find_address_with_register()</code>","text":"<p>Get the base address of the Thread Local Storage (TLS) for the current thread using a CPU register. The returned address points to the <code>struct tcbhead_t</code>, which is the entry point for TLS and thread-specific metadata.</p>"},{"location":"source/aglib/typeinfo/","title":"Typeinfo","text":"<p>Common types.</p>"},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.char","title":"<code>char: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int16","title":"<code>int16: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int32","title":"<code>int32: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int64","title":"<code>int64: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int8","title":"<code>int8: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.long","title":"<code>long: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.pchar","title":"<code>pchar: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ppvoid","title":"<code>ppvoid: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ptrdiff","title":"<code>ptrdiff: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ptrsize","title":"<code>ptrsize: int = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.pvoid","title":"<code>pvoid: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.signed","title":"<code>signed: Dict[int, pwndbg.dbg_mod.Type]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.size_t","title":"<code>size_t: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ssize_t","title":"<code>ssize_t: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uchar","title":"<code>uchar: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint","title":"<code>uint: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint16","title":"<code>uint16: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint32","title":"<code>uint32: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint64","title":"<code>uint64: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint8","title":"<code>uint8: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ulong","title":"<code>ulong: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.unsigned","title":"<code>unsigned: Dict[int, pwndbg.dbg_mod.Type]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ushort","title":"<code>ushort: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.void","title":"<code>void: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.get_type","title":"<code>get_type(size)</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.load","title":"<code>load(name)</code>","text":"<p>Load a symbol; note that new symbols can be added with <code>add-symbol-file</code> functionality</p>"},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.lookup_types","title":"<code>lookup_types(*types)</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/vmmap/","title":"Vmmap","text":""},{"location":"source/aglib/vmmap/#pwndbg.aglib.vmmap.find","title":"<code>find(address)</code>","text":""},{"location":"source/aglib/vmmap/#pwndbg.aglib.vmmap.get","title":"<code>get()</code>","text":""},{"location":"source/aglib/vmmap_custom/","title":"Vmmap custom","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.auto_explore","title":"<code>auto_explore = pwndbg.config.add_param('auto-explore-pages', 'warn', 'whether to try to infer page permissions when memory maps missing (can cause errors)', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['yes', 'warn', 'no'])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.custom_pages","title":"<code>custom_pages: List[pwndbg.lib.memory.Page] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.explored_pages","title":"<code>explored_pages: List[pwndbg.lib.memory.Page] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.add_custom_page","title":"<code>add_custom_page(page)</code>","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.clear_custom_page","title":"<code>clear_custom_page()</code>","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.clear_warn_cache","title":"<code>clear_warn_cache()</code>","text":""},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.explore","title":"<code>explore(address_maybe)</code>","text":"<p>Given a potential address, check to see what permissions it has.</p> <p>Returns:</p> Type Description <code>Page | None</code> <p>Page object</p> Note <p>Adds the Page object to a persistent list of pages which are only reset when the process dies. This means pages which are added this way will not be removed when unmapped.</p> <p>Also assumes the entire contiguous section has the same permission.</p>"},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.find_boundaries","title":"<code>find_boundaries(addr, name='', min=0)</code>","text":"<p>Given a single address, find all contiguous pages which are mapped.</p>"},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.get_custom_pages","title":"<code>get_custom_pages()</code>","text":"<p>Returns a tuple of <code>Page</code> objects representing the memory mappings of the target, sorted by virtual address ascending.</p>"},{"location":"source/aglib/vmmap_custom/#pwndbg.aglib.vmmap_custom.get_memory_flags","title":"<code>get_memory_flags(address_maybe)</code>","text":""},{"location":"source/aglib/disasm/__init__/","title":"init","text":"<p>Functionality for disassmebling code at an address, or at an address \u00b1 a few instructions.</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneArch","title":"<code>CapstoneArch = {'arm': CS_ARCH_ARM, 'armcm': CS_ARCH_ARM, 'aarch64': CS_ARCH_ARM64, 'i386': CS_ARCH_X86, 'i8086': CS_ARCH_X86, 'x86-64': CS_ARCH_X86, 'powerpc': CS_ARCH_PPC, 'mips': CS_ARCH_MIPS, 'sparc': CS_ARCH_SPARC, 'rv32': CS_ARCH_RISCV, 'rv64': CS_ARCH_RISCV}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneEndian","title":"<code>CapstoneEndian = {'little': CS_MODE_LITTLE_ENDIAN, 'big': CS_MODE_BIG_ENDIAN}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneMode","title":"<code>CapstoneMode = {4: CS_MODE_32, 8: CS_MODE_64}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneSyntax","title":"<code>CapstoneSyntax = {'intel': CS_OPT_SYNTAX_INTEL, 'att': CS_OPT_SYNTAX_ATT}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.VariableInstructionSizeMax","title":"<code>VariableInstructionSizeMax = {'i386': 16, 'x86-64': 16, 'i8086': 16, 'mips': 8, 'rv32': 22, 'rv64': 22}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.backward_cache","title":"<code>backward_cache: DefaultDict[int, int] = collections.defaultdict(lambda: None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.computed_instruction_cache","title":"<code>computed_instruction_cache: DefaultDict[int, PwndbgInstruction] = collections.defaultdict(lambda: None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.emulated_arm_mode_cache","title":"<code>emulated_arm_mode_cache: DefaultDict[int, int] = collections.defaultdict(lambda: None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.first_time_emulate","title":"<code>first_time_emulate = True</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.next_addresses_cache","title":"<code>next_addresses_cache: Set[int] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.can_run_first_emulate","title":"<code>can_run_first_emulate()</code>","text":"<p>Disable the emulate config variable if we don't have enough memory to use it See https://github.com/pwndbg/pwndbg/issues/1534 And https://github.com/unicorn-engine/unicorn/pull/1743</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.clear_on_reg_mem_change","title":"<code>clear_on_reg_mem_change()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.emulate_one","title":"<code>emulate_one()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.enhance_cache_listener","title":"<code>enhance_cache_listener()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get","title":"<code>get(address, instructions=1, emu=None, enhance=True, from_cache=False, put_cache=False)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get_disassembler","title":"<code>get_disassembler(address)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get_disassembler_cached","title":"<code>get_disassembler_cached(arch, ptrsize, endian, extra=None)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get_one_instruction","title":"<code>get_one_instruction(address, emu=None, enhance=True, from_cache=False, put_cache=False)</code>","text":"<p>If passed an emulator, this will pass it to the DisassemblyAssistant which will single_step the emulator to determine the operand values before and after the instruction executes.</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.near","title":"<code>near(address, instructions=1, emulate=False, show_prev_insns=True, use_cache=False, linear=False)</code>","text":"<p>Disasms instructions near given <code>address</code>. Passing <code>emulate</code> makes use of unicorn engine to emulate instructions to predict branches that will be taken. <code>show_prev_insns</code> makes this show previously cached instructions (this is mostly used by context's disasm display, so user see what was previously)</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.no_emulate_one","title":"<code>no_emulate_one()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.one","title":"<code>one(address=None, emu=None, enhance=True, from_cache=False, put_cache=False, put_backward_cache=True)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.one_raw","title":"<code>one_raw(address=None)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.one_with_config","title":"<code>one_with_config()</code>","text":"<p>Returns a single Pwndbg Instruction at the current PC.</p> <p>Emulation determined by the <code>pwndbg.config.emulate</code> setting.</p>"},{"location":"source/aglib/disasm/aarch64/","title":"Aarch64","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_BIT_SHIFT_MAP","title":"<code>AARCH64_BIT_SHIFT_MAP: Dict[int, Callable[[int, int, int], int]] = {ARM64_SFT_LSL: bit_math.logical_shift_left, ARM64_SFT_LSR: bit_math.logical_shift_right, ARM64_SFT_ASR: bit_math.arithmetic_shift_right, ARM64_SFT_ROR: bit_math.rotate_right}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_EMULATED_ANNOTATIONS","title":"<code>AARCH64_EMULATED_ANNOTATIONS = CONDITIONAL_SELECT_INSTRUCTIONS | {ARM64_INS_SXTB, ARM64_INS_SXTH, ARM64_INS_SXTW, ARM64_INS_UXTB, ARM64_INS_UXTH, ARM64_INS_UXTW, ARM64_INS_RBIT, ARM64_INS_CLS, ARM64_INS_CLZ, ARM64_INS_BFXIL, ARM64_INS_UBFIZ, ARM64_INS_UBFM, ARM64_INS_UBFX, ARM64_INS_SBFIZ, ARM64_INS_SBFM, ARM64_INS_SBFX, ARM64_INS_BFI, ARM64_INS_NEG, ARM64_INS_NEGS, ARM64_INS_REV, ARM64_INS_BIC, ARM64_INS_BICS}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_EXCLUSIVE_STORE_INSTRUCTIONS","title":"<code>AARCH64_EXCLUSIVE_STORE_INSTRUCTIONS = {ARM64_INS_STXRB: 1, ARM64_INS_STXRH: 2, ARM64_INS_STXR: None, ARM64_INS_STLXRB: 1, ARM64_INS_STLXRH: 2, ARM64_INS_STLXR: None}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_EXTEND_MAP","title":"<code>AARCH64_EXTEND_MAP: Dict[int, Callable[[int], int]] = {ARM64_EXT_UXTB: lambda x: x &amp; 1 &lt;&lt; 8 - 1, ARM64_EXT_UXTH: lambda x: x &amp; 1 &lt;&lt; 16 - 1, ARM64_EXT_UXTW: lambda x: x &amp; 1 &lt;&lt; 32 - 1, ARM64_EXT_UXTX: lambda x: x, ARM64_EXT_SXTB: lambda x: bit_math.to_signed(x, 8), ARM64_EXT_SXTH: lambda x: bit_math.to_signed(x, 16), ARM64_EXT_SXTW: lambda x: bit_math.to_signed(x, 32), ARM64_EXT_SXTX: lambda x: bit_math.to_signed(x, 64)}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_MATH_INSTRUCTIONS","title":"<code>AARCH64_MATH_INSTRUCTIONS = {ARM64_INS_ADD: '+', ARM64_INS_ADDS: '+', ARM64_INS_SUB: '-', ARM64_INS_SUBS: '-', ARM64_INS_AND: '&amp;', ARM64_INS_ANDS: '&amp;', ARM64_INS_ORR: '&amp;', ARM64_INS_ASR: '&gt;&gt;s', ARM64_INS_ASRV: '&gt;&gt;s', ARM64_INS_EOR: '^', ARM64_INS_LSL: '&lt;&lt;', ARM64_INS_LSLV: '&lt;&lt;', ARM64_INS_LSR: '&gt;&gt;', ARM64_INS_LSRV: '&gt;&gt;', ARM64_INS_UDIV: '/', ARM64_INS_SDIV: '/', ARM64_INS_SMULH: '*', ARM64_INS_SMULL: '*', ARM64_INS_UMULH: '*', ARM64_INS_UMULL: '*', ARM64_INS_MUL: '*'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_SINGLE_LOAD_INSTRUCTIONS","title":"<code>AARCH64_SINGLE_LOAD_INSTRUCTIONS: Dict[int, int | None] = {ARM64_INS_LDRB: 1, ARM64_INS_LDURB: 1, ARM64_INS_LDRSB: -1, ARM64_INS_LDURSB: -1, ARM64_INS_LDRH: 2, ARM64_INS_LDURH: 2, ARM64_INS_LDRSH: -2, ARM64_INS_LDURSH: -2, ARM64_INS_LDURSW: -4, ARM64_INS_LDRSW: -4, ARM64_INS_LDUR: None, ARM64_INS_LDR: None, ARM64_INS_LDTRB: 1, ARM64_INS_LDTRSB: -1, ARM64_INS_LDTRH: 2, ARM64_INS_LDTRSH: -2, ARM64_INS_LDTRSW: -4, ARM64_INS_LDTR: None, ARM64_INS_LDXRB: 1, ARM64_INS_LDXRH: 2, ARM64_INS_LDXR: None, ARM64_INS_LDARB: 1, ARM64_INS_LDARH: 2, ARM64_INS_LDAR: None}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_SINGLE_STORE_INSTRUCTIONS","title":"<code>AARCH64_SINGLE_STORE_INSTRUCTIONS: Dict[int, int | None] = {ARM64_INS_STRB: 1, ARM64_INS_STURB: 1, ARM64_INS_STRH: 2, ARM64_INS_STURH: 2, ARM64_INS_STUR: None, ARM64_INS_STR: None, ARM64_INS_STTRB: 1, ARM64_INS_STTRH: 2, ARM64_INS_STTR: None, ARM64_INS_STLRB: 1, ARM64_INS_STLRH: 2, ARM64_INS_STLR: None}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.CONDITIONAL_SELECT_INSTRUCTIONS","title":"<code>CONDITIONAL_SELECT_INSTRUCTIONS = {ARM64_INS_CSEL, ARM64_INS_CSINC, ARM64_INS_CSINV, ARM64_INS_CSNEG, ARM64_INS_CSET, ARM64_INS_CSETM, ARM64_INS_CINC, ARM64_INS_CINV, ARM64_INS_CNEG}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.assistant","title":"<code>assistant = DisassemblyAssistant('aarch64')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {ARM64_INS_MOV: self._common_move_annotator, ARM64_INS_MOVK: self._common_generic_register_destination, ARM64_INS_ADR: self._common_generic_register_destination, ARM64_INS_ADRP: self._handle_adrp, ARM64_INS_CMP: self._common_cmp_annotator_builder('cpsr', '-'), ARM64_INS_CMN: self._common_cmp_annotator_builder('cpsr', '+'), ARM64_INS_TST: self._common_cmp_annotator_builder('cpsr', '&amp;'), ARM64_INS_CCMP: self._common_cmp_annotator_builder('cpsr', ''), ARM64_INS_CCMN: self._common_cmp_annotator_builder('cpsr', '')}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.resolve_condition","title":"<code>resolve_condition(condition, cpsr)</code>","text":"<p>Given a condition and the NZCV flag bits, determine when the condition is satisfied</p> <p>The condition is a Capstone constant</p>"},{"location":"source/aglib/disasm/arch/","title":"Arch","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DEBUG_ENHANCEMENT","title":"<code>DEBUG_ENHANCEMENT = False</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DO_NOT_EMULATE","title":"<code>DO_NOT_EMULATE = {CS_GRP_INT, CS_GRP_INVALID, CS_GRP_IRET}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.access","title":"<code>access = {v: kfor (k, v) in globals().items() if k.startswith('CS_AC_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.generic_assistant","title":"<code>generic_assistant = DisassemblyAssistant(None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.groups","title":"<code>groups = {v: kfor (k, v) in globals().items() if k.startswith('CS_GRP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.ops","title":"<code>ops = {v: kfor (k, v) in globals().items() if k.startswith('CS_OP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.assistants","title":"<code>assistants: Dict[str, DisassemblyAssistant] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.op_handlers","title":"<code>op_handlers: Dict[int, Callable[[PwndbgInstruction, EnhancedOperand, Emulator], int | None]] = {CS_OP_IMM: self._parse_immediate, CS_OP_REG: self._parse_register, CS_OP_MEM: self._parse_memory}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.op_names","title":"<code>op_names: Dict[int, Callable[[PwndbgInstruction, EnhancedOperand], str | None]] = {CS_OP_IMM: self._immediate_string, CS_OP_REG: self._register_string, CS_OP_MEM: self._memory_string}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.can_reason_about_process_state","title":"<code>can_reason_about_process_state(instruction)</code>","text":"<p>Determine if the program counter of the process equals the address of the instruction being enhanced. If so, it means we can safely reason and read from registers and memory to enhance values that we can add to the annotation string. This becomes relevent when NOT emulating, and is meant to allow more details when the PC is at the instruction being enhanced</p>"},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.dump","title":"<code>dump(instruction)</code>","text":"<p>Debug-only method.</p>"},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.enhance","title":"<code>enhance(instruction, emu=None)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.for_current_arch","title":"<code>for_current_arch()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.memory_assign","title":"<code>memory_assign(left, right)</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.memory_or_register_assign","title":"<code>memory_or_register_assign(left, right, mem_assign)</code>","text":"<p>Used when we don't know until runtime whether a codepath will annotate a register or memory location.</p>"},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.register_assign","title":"<code>register_assign(left, right)</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.syntax_highlight","title":"<code>syntax_highlight(ins)</code>","text":""},{"location":"source/aglib/disasm/arm/","title":"Arm","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_BIT_SHIFT_MAP","title":"<code>ARM_BIT_SHIFT_MAP: Dict[int, Callable[[int, int, int], int]] = {ARM_SFT_ASR: bit_math.arithmetic_shift_right, ARM_SFT_LSL: bit_math.logical_shift_left, ARM_SFT_LSR: bit_math.logical_shift_right, ARM_SFT_ROR: bit_math.rotate_right}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_CAN_WRITE_TO_PC","title":"<code>ARM_CAN_WRITE_TO_PC: Dict[int, Callable[[PwndbgInstruction], bool]] = {ARM_INS_ADD: first_op_is_pc, ARM_INS_SUB: first_op_is_pc, ARM_INS_SUBS: first_op_is_pc, ARM_INS_MOV: first_op_is_pc, ARM_INS_LDR: first_op_is_pc, ARM_INS_POP: ops_contain_pc, ARM_INS_LDM: ops_contain_pc}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_EXCLUSIVE_STORE_INSTRUCTIONS","title":"<code>ARM_EXCLUSIVE_STORE_INSTRUCTIONS = {ARM_INS_STREXB: 1, ARM_INS_STREXH: 2, ARM_INS_STREX: 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_MATH_INSTRUCTIONS","title":"<code>ARM_MATH_INSTRUCTIONS = {ARM_INS_ADD: '+', ARM_INS_ADDW: '+', ARM_INS_SUB: '-', ARM_INS_ORR: '|', ARM_INS_AND: '&amp;', ARM_INS_EOR: '^', ARM_INS_UDIV: '/', ARM_INS_SDIV: '/', ARM_INS_MUL: '*', ARM_INS_UMULL: '*', ARM_INS_SMULL: '*'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_SHIFT_INSTRUCTIONS","title":"<code>ARM_SHIFT_INSTRUCTIONS = {ARM_INS_ASR: '&gt;&gt;s', ARM_INS_LSR: '&gt;&gt;', ARM_INS_LSL: '&lt;&lt;'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_SINGLE_LOAD_INSTRUCTIONS","title":"<code>ARM_SINGLE_LOAD_INSTRUCTIONS = {ARM_INS_LDRB: 1, ARM_INS_LDRSB: -1, ARM_INS_LDRH: 2, ARM_INS_LDRSH: -2, ARM_INS_LDR: 4, ARM_INS_LDRBT: 1, ARM_INS_LDRSBT: -1, ARM_INS_LDRHT: 2, ARM_INS_LDRSHT: -2, ARM_INS_LDRT: 4, ARM_INS_LDREXB: 1, ARM_INS_LDREXH: 2, ARM_INS_LDREX: 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_SINGLE_STORE_INSTRUCTIONS","title":"<code>ARM_SINGLE_STORE_INSTRUCTIONS = {ARM_INS_STRB: 1, ARM_INS_STRH: 2, ARM_INS_STR: 4, ARM_INS_STRBT: 1, ARM_INS_STRHT: 2, ARM_INS_STRT: 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.assistant","title":"<code>assistant = DisassemblyAssistant('armcm', 'xpsr')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {ARM_INS_MOV: self._common_move_annotator, ARM_INS_MOVW: self._common_move_annotator, ARM_INS_MOVT: self._common_generic_register_destination, ARM_INS_MVN: self._common_generic_register_destination, ARM_INS_CMP: self._common_cmp_annotator_builder(flags_reg, '-'), ARM_INS_CMN: self._common_cmp_annotator_builder(flags_reg, '+'), ARM_INS_TST: self._common_cmp_annotator_builder(flags_reg, '&amp;'), ARM_INS_TEQ: self._common_cmp_annotator_builder(flags_reg, '^')}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.flags_reg","title":"<code>flags_reg = flags_reg</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.__init__","title":"<code>__init__(architecture, flags_reg)</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.read_thumb_bit","title":"<code>read_thumb_bit(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.first_op_is_pc","title":"<code>first_op_is_pc(i)</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ops_contain_pc","title":"<code>ops_contain_pc(i)</code>","text":""},{"location":"source/aglib/disasm/instruction/","title":"Instruction","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.ALL_JUMP_GROUPS","title":"<code>ALL_JUMP_GROUPS = GENERIC_JUMP_GROUPS | GENERIC_UNCONDITIONAL_JUMP_GROUPS</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.BRANCH_AND_LINK_INSTRUCTIONS","title":"<code>BRANCH_AND_LINK_INSTRUCTIONS: Dict[int, Set[int]] = defaultdict(set)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.CAPSTONE_ARCH_MAPPING_STRING","title":"<code>CAPSTONE_ARCH_MAPPING_STRING = {CS_ARCH_ARM: 'arm', CS_ARCH_ARM64: 'aarch64', CS_ARCH_X86: 'x86', CS_ARCH_PPC: 'powerpc', CS_ARCH_MIPS: 'mips', CS_ARCH_SPARC: 'sparc', CS_ARCH_RISCV: 'RISCV'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.FORWARD_JUMP_GROUP","title":"<code>FORWARD_JUMP_GROUP = {CS_GRP_CALL} | GENERIC_JUMP_GROUPS</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.GENERIC_JUMP_GROUPS","title":"<code>GENERIC_JUMP_GROUPS = {CS_GRP_JUMP, CS_GRP_BRANCH_RELATIVE}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.GENERIC_UNCONDITIONAL_JUMP_GROUPS","title":"<code>GENERIC_UNCONDITIONAL_JUMP_GROUPS = {CS_GRP_CALL, CS_GRP_RET, CS_GRP_IRET}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.UNCONDITIONAL_JUMP_INSTRUCTIONS","title":"<code>UNCONDITIONAL_JUMP_INSTRUCTIONS: Dict[int, Set[int]] = {CS_ARCH_X86: {X86_INS_JMP}, CS_ARCH_MIPS: {MIPS_INS_J, MIPS_INS_JR, MIPS_INS_JAL, MIPS_INS_JALR, MIPS_INS_BAL, MIPS_INS_B}, CS_ARCH_SPARC: {SPARC_INS_JMP, SPARC_INS_JMPL}, CS_ARCH_ARM: {ARM_INS_TBB, ARM_INS_TBH}, CS_ARCH_ARM64: {ARM64_INS_BL, ARM64_INS_BLR, ARM64_INS_BR}, CS_ARCH_RISCV: {RISCV_INS_JAL, RISCV_INS_JALR, RISCV_INS_C_JAL, RISCV_INS_C_JALR, RISCV_INS_C_J, RISCV_INS_C_JR}, CS_ARCH_PPC: {PPC_INS_B, PPC_INS_BA, PPC_INS_BL, PPC_INS_BLA}}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand","title":"<code>EnhancedOperand</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.after_value","title":"<code>after_value: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The value of the operand after the instruction executes. Only set when using emulation.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.after_value_resolved","title":"<code>after_value_resolved: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The 'resolved' value of the operand after the instruction executes.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.before_value","title":"<code>before_value: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The value of the operand before the instruction executes. This is set only if the operand value can be reasoned about.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.before_value_no_modifiers","title":"<code>before_value_no_modifiers: int | None = None</code>  <code>instance-attribute</code>","text":"<p>This is a special field used in some architectures that allow operand modifiers, such as shifts and extends in Arm. Capstone bundles the modifier with the operand, and when we are resolving concrete operand values, we apply the modifier. However, in some annotations we need to un-modified raw register value, which is what this field is for.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.before_value_resolved","title":"<code>before_value_resolved: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The 'resolved' value of the operand that is actually used in the instruction logic, before the instruction executes. This is the same as before_value if it's not a memory operand, in which cases it's the dereferenced value.</p> <p>Helpful for cases like  <code>cmp    byte ptr [rip + 0x166669], 0</code>, where first operand could be a register or a memory value to dereference, and we want the actual value used.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.cs_op","title":"<code>cs_op: typing.Any = cs_op</code>  <code>instance-attribute</code>","text":"<p>Underlying Capstone operand. Takes on a different value depending on the architecture.</p> <p>x86 = capstone.x86.X86Op, arm = capstone.arm.ArmOp, mips = capstone.mips.MipsOp</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.imm","title":"<code>imm: int</code>  <code>property</code>","text":"<p>The immediate value of the operand (if applicable)</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.mem","title":"<code>mem: typing.Any</code>  <code>property</code>","text":"<p>Return the underlying Capstone mem object (if applicable)</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.reg","title":"<code>reg: int</code>  <code>property</code>","text":"<p>The underlying Capstone ID for the register</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.str","title":"<code>str: str | None = ''</code>  <code>instance-attribute</code>","text":"<p>String representing the operand</p> <p>Ex: \"RAX\", or \"[0x7fffffffd9e8]\". None if value cannot be determined.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.symbol","title":"<code>symbol: str | None = None</code>  <code>instance-attribute</code>","text":"<p>Colorized symbol name for this operand, if .before_value is set and symbol exists, else None.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.type","title":"<code>type: int</code>  <code>property</code>","text":"<p>CS_OP_REG | CS_OP_MEM | CS_OP_IMM | CS_OP_INVALID | CS_OP_FP</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.__init__","title":"<code>__init__(cs_op)</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition","title":"<code>InstructionCondition</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition.FALSE","title":"<code>FALSE = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition.TRUE","title":"<code>TRUE = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition.UNDETERMINED","title":"<code>UNDETERMINED = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction","title":"<code>PwndbgInstruction</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.address","title":"<code>address: int = cs_insn.address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.annotation","title":"<code>annotation: str | None = None</code>  <code>instance-attribute</code>","text":"<p>The string is set in the \"DisassemblyAssistant.enhance\" function. It is used in the disasm print view to add context to the instruction, mostly operand value. This string is not used for all cases - if the instruction is a call or a jump, the 'target'. variables is used instead. See 'pwndbg.color.disasm.instruction()' for specific usage.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.annotation_padding","title":"<code>annotation_padding: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The left adjustment padding that was used to previously print this. We retain it so the output is consistent between prints</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.asm_string","title":"<code>asm_string: str = '%-06s %s' % (self.mnemonic, self.op_str)</code>  <code>instance-attribute</code>","text":"<p>The full string representing the instruction - <code>mov    rdi, rsp</code> with appropriate padding.</p> <p>This is syntax highlighted during enhancement.</p> <p>This is additionally modified during enhancement for the purposes of replacing immediate values with their corresponding symbols</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.bytes","title":"<code>bytes: bytearray</code>  <code>property</code>","text":"<p>Raw machine instruction bytes</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.call_like","title":"<code>call_like: bool</code>  <code>property</code>","text":"<p>True if this is a call-like instruction, meaning either it's a CALL or a branch and link.</p> <p>Checking for the CS_GRP_CALL is insufficient, as there are many \"branch and link\" instructions that are not labeled as a call</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.causes_branch_delay","title":"<code>causes_branch_delay: bool = False</code>  <code>instance-attribute</code>","text":"<p>Whether or not this instruction has a single branch delay slot</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.condition","title":"<code>condition: InstructionCondition = InstructionCondition.UNDETERMINED</code>  <code>instance-attribute</code>","text":"<p>Does the condition that the instruction checks for pass?</p> <p>For example, \"JNE\" jumps if Zero Flag is 0, else it does nothing. \"CMOVA\" conditionally performs a move depending on a flag. See 'condition' function in pwndbg.aglib.disasm.x86 for example on setting this.</p> <p>UNDETERMINED if we cannot reason about the condition, or if the instruction always executes unconditionally (most instructions).</p> <p>TRUE if the instruction has a conditional action, and we determine it is taken.</p> <p>FALSE if the instruction has a conditional action, and we know it is not taken.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.cs_insn","title":"<code>cs_insn: CsInsn = cs_insn</code>  <code>instance-attribute</code>","text":"<p>The underlying Capstone instruction, if present. Ideally, only the enhancement code will access the 'cs_insn' property</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.declare_conditional","title":"<code>declare_conditional: bool | None = None</code>  <code>instance-attribute</code>","text":"<p>This field is used to declare if the instruction is a conditional instruction. In most cases, we can determine this purely based on the instruction ID, and this field is irrelevent. However, in some arches, like Arm, the same instruction can be made conditional by certain instruction attributes. Ex:     Arm, <code>bls</code> instruction. This is encoded as a <code>b</code> (Capstone ID 11) under the code, with an additional condition code field.     In this case, sometimes a <code>b</code> instruction (ID 11) is unconditional (always branches), in other cases it is conditional.     We use this field to disambiguate these cases.</p> <p>True if we manually determine this instruction is a conditional instruction False if it's not a conditional instruction None if we don't have a determination (most cases)</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.declare_is_unconditional_jump","title":"<code>declare_is_unconditional_jump: bool = False</code>  <code>instance-attribute</code>","text":"<p>This field is used to declare that this instruction is an unconditional jump. Most of the type, we depend on Capstone groups to check for jump instructions, but sometimes these are lacking, such as in the case of general-purpose instructions where the PC is the destination register, such as Arm <code>add</code>, <code>sub</code>, <code>ldr</code>, and <code>pop</code> instructions.</p> <p>In these cases, we want to forcefully state that this instruction mutates the PC, so we set this attribute to True.</p> <p>This helps in two cases: 1. Disassembly splits 2. Instructions like <code>stepuntilasm</code> work better, as they detect these as branches to stop at.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.emulated","title":"<code>emulated: bool = False</code>  <code>instance-attribute</code>","text":"<p>If the enhancement successfully used emulation for this instruction</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.force_unconditional_jump_target","title":"<code>force_unconditional_jump_target: bool = False</code>  <code>instance-attribute</code>","text":"<p>This asserts that the .target attribute is the real target of the instruction. This is only relevent in the edge case that the target is the next instruction in memory (address + size). The normal check for \"target\" checks that the target is NOT the next address in memory, and here we can assert that even if that is the case, we know that the jump really does just go to where self.target is.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.groups","title":"<code>groups: Set[int] = set(cs_insn.groups)</code>  <code>instance-attribute</code>","text":"<p>Capstone instruction groups that we belong to. Groups that apply to all architectures: CS_GRP_INVALID | CS_GRP_JUMP | CS_GRP_CALL | CS_GRP_RET | CS_GRP_INT | CS_GRP_IRET | CS_GRP_PRIVILEGE | CS_GRP_BRANCH_RELATIVE</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.has_jump_target","title":"<code>has_jump_target: bool</code>  <code>property</code>","text":"<p>True if we have determined that this instruction can explicitly change the program counter, and we have determined the jump target.</p> <p>Edge case - the jump target MAY be the next address in memory - so we check force_unconditional_jump_target</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.id","title":"<code>id: int = cs_insn.id</code>  <code>instance-attribute</code>","text":"<p>The underlying Capstone ID for the instruction Examples: X86_INS_JMP, X86_INS_CALL, RISCV_INS_C_JAL</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.is_conditional_jump","title":"<code>is_conditional_jump: bool</code>  <code>property</code>","text":"<p>True if this instruction can change the program counter conditionally.</p> <p>This is used, in part, to determine if the instruction deserves a \"checkmark\" in the disasm view.</p> <p>This does not imply that we have resolved the .target</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.is_conditional_jump_taken","title":"<code>is_conditional_jump_taken: bool</code>  <code>property</code>","text":"<p>True if this is a conditional jump, and we predicted that we will take the jump</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.is_unconditional_jump","title":"<code>is_unconditional_jump: bool</code>  <code>property</code>","text":"<p>True if we know the instruction can change the program counter, and does so unconditionally.</p> <p>This includes things like RET, CALL, and JMP (in x86).</p> <p>This property is used in enhancement to determine certain codepaths when resolving .next for this instruction.</p> <p>This does not imply that we have resolved the .target</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.jump_like","title":"<code>jump_like: bool</code>  <code>property</code>","text":"<p>True if this instruction is \"jump-like\", such as a JUMP, CALL, or RET. Basically, the PC is set to some target by means of this instruction.</p> <p>It may still be a conditional jump - this property does not indicate whether the jump is taken or not.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.mnemonic","title":"<code>mnemonic: str = cs_insn.mnemonic</code>  <code>instance-attribute</code>","text":"<p>Ex: 'MOV'</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.next","title":"<code>next: int = self.address + self.size</code>  <code>instance-attribute</code>","text":"<p>This is the address that the instruction pointer will be set to after using the \"nexti\" GDB command. This means it is the address of the next instruction to be executed in all cases except \"call\" instructions.</p> <p>Typically, it is <code>self.address + self.size</code> (the next instruction in memory)</p> <p>If it is a jump and we know it is taken, then it is the value of the jump target.</p> <p>Not set to \"call\" instruction targets, to indicate we will eventually (probably) return to this address</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.op_str","title":"<code>op_str: str = cs_insn.op_str</code>  <code>instance-attribute</code>","text":"<p>Ex: 'RAX, RDX'</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.operands","title":"<code>operands: List[EnhancedOperand] = [EnhancedOperand(op) for op in self.cs_insn.operands]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.size","title":"<code>size: int = cs_insn.size</code>  <code>instance-attribute</code>","text":"<p>Length of the instruction</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.split","title":"<code>split: SplitType = SplitType.NO_SPLIT</code>  <code>instance-attribute</code>","text":"<p>The type of split in the disasm display this instruction causes:</p> Text Only<pre><code>NO_SPLIT            - no extra spacing between this and the next instruction\nBRANCH_TAKEN        - a newline with an arrow pointing down\nBRANCH_NOT_TAKEN    - an empty newline\n</code></pre>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.syscall","title":"<code>syscall: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The syscall number for this instruction, if it is a syscall. Otherwise None.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.syscall_name","title":"<code>syscall_name: str | None = None</code>  <code>instance-attribute</code>","text":"<p>The syscall name as a string</p> <p>Ex: \"openat\", \"read\"</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.target","title":"<code>target: int = None</code>  <code>instance-attribute</code>","text":"<p>This is target of instructions that change the PC, regardless of if it's conditional or not, and whether or not we take the jump. This includes \"call\" and all other instructions that set the PC</p> <p>If the instruction is not one that changes the PC, target is set to \"next\"</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.target_const","title":"<code>target_const: bool | None = None</code>  <code>instance-attribute</code>","text":"<p>Whether the target is a constant expression</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.target_string","title":"<code>target_string: str | None = None</code>  <code>instance-attribute</code>","text":"<p>String representation of the target address.</p> <p>Colorized symbol if a symbol exists at address, else colorized address</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.__init__","title":"<code>__init__(cs_insn)</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.op_count","title":"<code>op_count(op_type)</code>","text":"<p>Return number of operands having same operand Capstone type 'op_type'</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.op_find","title":"<code>op_find(op_type, position)</code>","text":"<p>Get the operand at position @position of all operands having the same type @op_type</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType","title":"<code>SplitType</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType.BRANCH_NOT_TAKEN","title":"<code>BRANCH_NOT_TAKEN = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType.BRANCH_TAKEN","title":"<code>BRANCH_TAKEN = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType.NO_SPLIT","title":"<code>NO_SPLIT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.boolean_to_instruction_condition","title":"<code>boolean_to_instruction_condition(condition)</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.make_simple_instruction","title":"<code>make_simple_instruction(address)</code>","text":"<p>Instantiate a PwndbgInstruction for an architecture that Capstone/pwndbg doesn't support (as defined in the CapstoneArch structure)</p>"},{"location":"source/aglib/disasm/mips/","title":"Mips","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.BRANCH_LIKELY_INSTRUCTIONS","title":"<code>BRANCH_LIKELY_INSTRUCTIONS = {MIPS_INS_BC0TL, MIPS_INS_BC1TL, MIPS_INS_BC0FL, MIPS_INS_BC1FL, MIPS_INS_BEQL, MIPS_INS_BGEZALL, MIPS_INS_BGEZL, MIPS_INS_BGTZL, MIPS_INS_BLEZL, MIPS_INS_BLTZALL, MIPS_INS_BLTZL, MIPS_INS_BNEL}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.CONDITION_RESOLVERS","title":"<code>CONDITION_RESOLVERS: Dict[int, Callable[[List[int]], bool]] = {MIPS_INS_BEQZ: lambda ops: ops[0] == 0, MIPS_INS_BNEZ: lambda ops: ops[0] != 0, MIPS_INS_BEQ: lambda ops: ops[0] == ops[1], MIPS_INS_BNE: lambda ops: ops[0] != ops[1], MIPS_INS_BGEZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &gt;= 0, MIPS_INS_BGEZAL: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &gt;= 0, MIPS_INS_BGTZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &gt; 0, MIPS_INS_BLEZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &lt;= 0, MIPS_INS_BLTZAL: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &lt; 0, MIPS_INS_BLTZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &lt; 0}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_BINARY_OPERATIONS","title":"<code>MIPS_BINARY_OPERATIONS = {MIPS_INS_ADD: '+', MIPS_INS_ADDI: '+', MIPS_INS_ADDIU: '+', MIPS_INS_ADDU: '+', MIPS_INS_DADD: '+', MIPS_INS_DADDI: '+', MIPS_INS_DADDIU: '+', MIPS_INS_DADDU: '+', MIPS_INS_SUB: '-', MIPS_INS_SUBU: '-', MIPS_INS_DSUB: '-', MIPS_INS_DSUBU: '-', MIPS_INS_ANDI: '&amp;', MIPS_INS_AND: '&amp;', MIPS_INS_ORI: '|', MIPS_INS_OR: '|', MIPS_INS_XOR: '^', MIPS_INS_XORI: '^', MIPS_INS_SLL: '&lt;&lt;', MIPS_INS_SLLV: '&lt;&lt;', MIPS_INS_DSLL: '&lt;&lt;', MIPS_INS_DSLLV: '&lt;&lt;', MIPS_INS_SRL: '&gt;&gt;', MIPS_INS_SRLV: '&gt;&gt;', MIPS_INS_DSRL: '&gt;&gt;', MIPS_INS_DSRLV: '&gt;&gt;'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_LOAD_INSTRUCTIONS","title":"<code>MIPS_LOAD_INSTRUCTIONS = {MIPS_INS_LB: -1, MIPS_INS_LBU: 1, MIPS_INS_LH: -2, MIPS_INS_LHU: 2, MIPS_INS_LW: -4, MIPS_INS_LWU: 4, MIPS_INS_LWPC: -4, MIPS_INS_LWUPC: 4, MIPS_INS_LD: -8, MIPS_INS_LDPC: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_SIMPLE_DESTINATION_INSTRUCTIONS","title":"<code>MIPS_SIMPLE_DESTINATION_INSTRUCTIONS = {MIPS_INS_CLO, MIPS_INS_CLZ, MIPS_INS_DCLO, MIPS_INS_DCLZ, MIPS_INS_LSA, MIPS_INS_DLSA, MIPS_INS_MFHI, MIPS_INS_MFLO, MIPS_INS_SEB, MIPS_INS_SEH, MIPS_INS_WSBH, MIPS_INS_SLT, MIPS_INS_SLTI, MIPS_INS_SLTIU, MIPS_INS_SLTU, MIPS_INS_MOVN, MIPS_INS_LDL, MIPS_INS_LDR, MIPS_INS_LWL, MIPS_INS_LWR}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_STORE_INSTRUCTIONS","title":"<code>MIPS_STORE_INSTRUCTIONS = {MIPS_INS_SB: 1, MIPS_INS_SH: 2, MIPS_INS_SW: 4, MIPS_INS_SD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.assistant","title":"<code>assistant = DisassemblyAssistant('mips')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {MIPS_INS_MOVE: self._common_move_annotator, MIPS_INS_LI: self._common_move_annotator, MIPS_INS_LUI: self._lui_annotator}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/ppc/","title":"Ppc","text":""},{"location":"source/aglib/disasm/riscv/","title":"Riscv","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_COMPRESSED_LOAD_INSTRUCTIONS","title":"<code>RISCV_COMPRESSED_LOAD_INSTRUCTIONS = {RISCV_INS_C_LW: -4, RISCV_INS_C_LD: 8, RISCV_INS_C_LDSP: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_COMPRESSED_STORE_INSTRUCTIONS","title":"<code>RISCV_COMPRESSED_STORE_INSTRUCTIONS = {RISCV_INS_C_SW: 4, RISCV_INS_C_SWSP: 4, RISCV_INS_C_SD: 8, RISCV_INS_C_SDSP: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_EMULATED_ANNOTATIONS","title":"<code>RISCV_EMULATED_ANNOTATIONS = {RISCV_INS_SLT, RISCV_INS_SLTU, RISCV_INS_SLTI, RISCV_INS_SLTIU}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_LOAD_INSTRUCTIONS","title":"<code>RISCV_LOAD_INSTRUCTIONS = {RISCV_INS_LB: -1, RISCV_INS_LH: -2, RISCV_INS_LW: -4, RISCV_INS_LBU: 1, RISCV_INS_LHU: 2, RISCV_INS_LWU: 4, RISCV_INS_LD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_MATH_INSTRUCTIONS","title":"<code>RISCV_MATH_INSTRUCTIONS = {RISCV_INS_ADDI: '+', RISCV_INS_ADD: '+', RISCV_INS_C_ADDI: '+', RISCV_INS_C_ADD: '+', RISCV_INS_SUB: '-', RISCV_INS_C_SUB: '-', RISCV_INS_XORI: '^', RISCV_INS_XOR: '^', RISCV_INS_C_XOR: '^', RISCV_INS_ORI: '|', RISCV_INS_OR: '|', RISCV_INS_C_OR: '|', RISCV_INS_ANDI: '&amp;', RISCV_INS_C_ANDI: '&amp;', RISCV_INS_AND: '&amp;', RISCV_INS_C_AND: '&amp;', RISCV_INS_SLLI: '&lt;&lt;', RISCV_INS_C_SLLI: '&lt;&lt;', RISCV_INS_SLL: '&lt;&lt;', RISCV_INS_SRLI: '&gt;&gt;', RISCV_INS_C_SRLI: '&gt;&gt;', RISCV_INS_SRL: '&gt;&gt;', RISCV_INS_SRAI: '&gt;&gt;s', RISCV_INS_C_SRAI: '&gt;&gt;s', RISCV_INS_SRA: '&gt;&gt;s', RISCV_INS_MUL: '*', RISCV_INS_MULH: '*', RISCV_INS_MULHSU: '*', RISCV_INS_MULHU: '*', RISCV_INS_DIV: '/', RISCV_INS_DIVU: '/', RISCV_INS_REM: '%', RISCV_INS_REMU: '%', RISCV_INS_C_ADDI4SPN: '+', RISCV_INS_C_ADDI16SP: '+', RISCV_INS_ADDIW: '+', RISCV_INS_ADDW: '+', RISCV_INS_SUBW: '-', RISCV_INS_SLLIW: '&lt;&lt;', RISCV_INS_SLLW: '&lt;&lt;', RISCV_INS_SRLIW: '&gt;&gt;', RISCV_INS_SRLW: '&gt;&gt;', RISCV_INS_SRAIW: '&gt;&gt;s', RISCV_INS_SRAW: '&gt;&gt;s', RISCV_INS_MULW: '*', RISCV_INS_DIVW: '/', RISCV_INS_DIVUW: '/', RISCV_INS_REMW: '%', RISCV_INS_REMUW: '%', RISCV_INS_C_ADDIW: '+', RISCV_INS_C_ADDW: '+', RISCV_INS_C_SUBW: '-'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_STORE_INSTRUCTIONS","title":"<code>RISCV_STORE_INSTRUCTIONS = {RISCV_INS_SB: 1, RISCV_INS_SH: 2, RISCV_INS_SW: 4, RISCV_INS_SD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.assistant_rv32","title":"<code>assistant_rv32 = DisassemblyAssistant('rv32')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.assistant_rv64","title":"<code>assistant_rv64 = DisassemblyAssistant('rv64')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {RISCV_INS_AUIPC: self._auipc_annotator, RISCV_INS_C_MV: self._common_move_annotator, RISCV_INS_C_LI: self._common_move_annotator, RISCV_INS_LUI: self._lui_annotator, RISCV_INS_C_LUI: self._lui_annotator}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant.architecture","title":"<code>architecture = architecture</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/sparc/","title":"Sparc","text":""},{"location":"source/aglib/disasm/sparc/#pwndbg.aglib.disasm.sparc.SPARC_LOAD_INSTRUCTIONS","title":"<code>SPARC_LOAD_INSTRUCTIONS = {SPARC_INS_LDUB: 1, SPARC_INS_LDSB: 1, SPARC_INS_LDUH: 2, SPARC_INS_LDSH: 2, SPARC_INS_LD: 4, SPARC_INS_LDD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/sparc/#pwndbg.aglib.disasm.sparc.SPARC_STORE_INSTRUCTIONS","title":"<code>SPARC_STORE_INSTRUCTIONS = {SPARC_INS_STB: 1, SPARC_INS_STH: 2, SPARC_INS_ST: 4, SPARC_INS_STD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/","title":"X86","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.X86_MATH_INSTRUCTIONS","title":"<code>X86_MATH_INSTRUCTIONS = {X86_INS_ADD: '+', X86_INS_SUB: '-', X86_INS_AND: '&amp;', X86_INS_OR: '|'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.access","title":"<code>access = {v: kfor (k, v) in globals().items() if k.startswith('CS_AC_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.assistant","title":"<code>assistant = DisassemblyAssistant('x86-64')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.groups","title":"<code>groups = {v: kfor (k, v) in globals().items() if k.startswith('X86_GRP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.ops","title":"<code>ops = {v: kfor (k, v) in globals().items() if k.startswith('X86_OP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.regs","title":"<code>regs = {v: kfor (k, v) in globals().items() if k.startswith('X86_REG_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {X86_INS_MOV: self.handle_mov, X86_INS_MOVABS: self.handle_mov, X86_INS_MOVZX: self.handle_mov, X86_INS_MOVD: self.handle_mov, X86_INS_MOVQ: self.handle_mov, X86_INS_MOVSXD: self.handle_mov, X86_INS_MOVSX: self.handle_mov, X86_INS_MOVAPS: self.handle_vmovaps, X86_INS_VMOVAPS: self.handle_vmovaps, X86_INS_LEA: self.handle_lea, X86_INS_XCHG: self.handle_xchg, X86_INS_POP: self.handle_pop, X86_INS_CMP: self._common_cmp_annotator_builder('eflags', '-'), X86_INS_TEST: self._common_cmp_annotator_builder('eflags', '&amp;'), X86_INS_XOR: self.handle_xor, X86_INS_INC: self.handle_inc, X86_INS_DEC: self.handle_dec}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_dec","title":"<code>handle_dec(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_inc","title":"<code>handle_inc(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_lea","title":"<code>handle_lea(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_mov","title":"<code>handle_mov(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_pop","title":"<code>handle_pop(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_vmovaps","title":"<code>handle_vmovaps(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_xchg","title":"<code>handle_xchg(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_xor","title":"<code>handle_xor(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.memory_string_with_components_resolved","title":"<code>memory_string_with_components_resolved(instruction, op)</code>","text":""},{"location":"source/aglib/heap/__init__/","title":"init","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.current","title":"<code>current: pwndbg.aglib.heap.heap.MemoryAllocator | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.global_max_fast","title":"<code>global_max_fast = add_heap_param('global-max-fast', '0', 'the address of global_max_fast')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.heap_chain_limit","title":"<code>heap_chain_limit = add_heap_param('heap-dereference-limit', 8, 'number of chunks to dereference in each bin', param_class=pwndbg.lib.config.PARAM_UINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.heap_corruption_check_limit","title":"<code>heap_corruption_check_limit = add_heap_param('heap-corruption-check-limit', 64, 'amount of chunks to traverse (forwards and backwards) for the bin corruption check', param_class=pwndbg.lib.config.PARAM_UINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.main_arena","title":"<code>main_arena = add_heap_param('main-arena', '0', 'the address of main_arena')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.mp_","title":"<code>mp_ = add_heap_param('mp', '0', 'the address of mp_')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.resolve_heap_via_heuristic","title":"<code>resolve_heap_via_heuristic = add_heap_param('resolve-heap-via-heuristic', 'auto', 'the strategy to resolve heap via heuristic', help_docstring=\"resolve-heap-via-heuristic can be:\\nauto    - pwndbg will try to use heuristics if debug symbols are missing\\nforce   - pwndbg will always try to use heuristics, even if debug symbols are available\\nnever   - pwndbg will never use heuristics to resolve the heap\\n\\nIf the output of the heap related command produces errors with heuristics, you can try manually setting the libc symbol addresses.\\nFor this, see the `heap_config` command output and set the `main_arena`, `mp_`, `global_max_fast`, `tcache` and `thread_arena` addresses.\\n\\nNote: pwndbg will generate more reliable results with proper debug symbols.\\nTherefore, when debug symbols are missing, you should try to install them first if you haven't already.\\n\\nThey can probably be installed via the package manager of your choice.\\nSee also: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html\\n\\nE.g. on Ubuntu/Debian you might need to do the following steps (for 64-bit and 32-bit binaries):\\nsudo apt-get install libc6-dbg\\nsudo dpkg --add-architecture i386\\nsudo apt-get install libc-dbg:i386\\n\\nIf you used setup.sh on Arch based distro you'll need to do a power cycle or set environment variable manually like this: export DEBUGINFOD_URLS=https://debuginfod.archlinux.org\\n\", param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['auto', 'force', 'never'])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.symbol_list","title":"<code>symbol_list = [main_arena, thread_arena, mp_, tcache, global_max_fast]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.tcache","title":"<code>tcache = add_heap_param('tcache', '0', 'the address pointed by tcache')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.thread_arena","title":"<code>thread_arena = add_heap_param('thread-arena', '0', 'the address pointed by thread_arena')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.add_heap_param","title":"<code>add_heap_param(name, default, set_show_doc, *, help_docstring='', param_class=None, enum_sequence=None)</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.reset","title":"<code>reset()</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.resolve_heap","title":"<code>resolve_heap(is_first_run=False)</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/heap/heap/","title":"Heap","text":""},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator","title":"<code>MemoryAllocator</code>","text":"<p>Heap abstraction layer.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.containing","title":"<code>containing(address)</code>","text":"<p>Returns the address of the allocation which contains 'address'.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to look up.</p> required <p>Returns:</p> Type Description <code>int</code> <p>An integer.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.is_initialized","title":"<code>is_initialized()</code>","text":"<p>Returns whether the allocator is initialized or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>A boolean.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.libc_has_debug_syms","title":"<code>libc_has_debug_syms()</code>","text":"<p>Returns whether the libc has debug symbols or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>A boolean.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.summarize","title":"<code>summarize(address, **kwargs)</code>","text":"<p>Returns a textual summary of the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address of the heap block to summarize.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string.</p>"},{"location":"source/aglib/heap/jemalloc/","title":"Jemalloc","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_ARENA_MASK","title":"<code>EDATA_BITS_ARENA_MASK = mask(EDATA_BITS_ARENA_WIDTH, EDATA_BITS_ARENA_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_ARENA_SHIFT","title":"<code>EDATA_BITS_ARENA_SHIFT = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_ARENA_WIDTH","title":"<code>EDATA_BITS_ARENA_WIDTH = MALLOCX_ARENA_BITS</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_BINSHARD_MASK","title":"<code>EDATA_BITS_BINSHARD_MASK = mask(EDATA_BITS_BINSHARD_WIDTH, EDATA_BITS_BINSHARD_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_BINSHARD_SHIFT","title":"<code>EDATA_BITS_BINSHARD_SHIFT = EDATA_BITS_NFREE_WIDTH + EDATA_BITS_NFREE_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_BINSHARD_WIDTH","title":"<code>EDATA_BITS_BINSHARD_WIDTH = 6</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_COMMITTED_MASK","title":"<code>EDATA_BITS_COMMITTED_MASK = mask(EDATA_BITS_COMMITTED_WIDTH, EDATA_BITS_COMMITTED_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_COMMITTED_SHIFT","title":"<code>EDATA_BITS_COMMITTED_SHIFT = EDATA_BITS_SLAB_WIDTH + EDATA_BITS_SLAB_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_COMMITTED_WIDTH","title":"<code>EDATA_BITS_COMMITTED_WIDTH = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_GUARDED_MASK","title":"<code>EDATA_BITS_GUARDED_MASK = mask(EDATA_BITS_GUARDED_WIDTH, EDATA_BITS_GUARDED_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_GUARDED_SHIFT","title":"<code>EDATA_BITS_GUARDED_SHIFT = EDATA_BITS_ZEROED_WIDTH + EDATA_BITS_ZEROED_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_GUARDED_WIDTH","title":"<code>EDATA_BITS_GUARDED_WIDTH = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_IS_HEAD_MASK","title":"<code>EDATA_BITS_IS_HEAD_MASK = mask(EDATA_BITS_IS_HEAD_WIDTH, EDATA_BITS_IS_HEAD_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_IS_HEAD_SHIFT","title":"<code>EDATA_BITS_IS_HEAD_SHIFT = EDATA_BITS_BINSHARD_WIDTH + EDATA_BITS_BINSHARD_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_IS_HEAD_WIDTH","title":"<code>EDATA_BITS_IS_HEAD_WIDTH = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_NFREE_MASK","title":"<code>EDATA_BITS_NFREE_MASK = mask(EDATA_BITS_NFREE_WIDTH, EDATA_BITS_NFREE_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_NFREE_SHIFT","title":"<code>EDATA_BITS_NFREE_SHIFT = EDATA_BITS_SZIND_WIDTH + EDATA_BITS_SZIND_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_NFREE_WIDTH","title":"<code>EDATA_BITS_NFREE_WIDTH = SC_LG_SLAB_MAXREGS + 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_PAI_MASK","title":"<code>EDATA_BITS_PAI_MASK = mask(EDATA_BITS_PAI_WIDTH, EDATA_BITS_PAI_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_PAI_SHIFT","title":"<code>EDATA_BITS_PAI_SHIFT = EDATA_BITS_COMMITTED_WIDTH + EDATA_BITS_COMMITTED_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_PAI_WIDTH","title":"<code>EDATA_BITS_PAI_WIDTH = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_SLAB_MASK","title":"<code>EDATA_BITS_SLAB_MASK = mask(EDATA_BITS_SLAB_WIDTH, EDATA_BITS_SLAB_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_SLAB_SHIFT","title":"<code>EDATA_BITS_SLAB_SHIFT = EDATA_BITS_ARENA_WIDTH + EDATA_BITS_ARENA_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_SLAB_WIDTH","title":"<code>EDATA_BITS_SLAB_WIDTH = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_STATE_MASK","title":"<code>EDATA_BITS_STATE_MASK = mask(EDATA_BITS_STATE_WIDTH, EDATA_BITS_STATE_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_STATE_SHIFT","title":"<code>EDATA_BITS_STATE_SHIFT = EDATA_BITS_GUARDED_WIDTH + EDATA_BITS_GUARDED_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_STATE_WIDTH","title":"<code>EDATA_BITS_STATE_WIDTH = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_SZIND_MASK","title":"<code>EDATA_BITS_SZIND_MASK = mask(EDATA_BITS_SZIND_WIDTH, EDATA_BITS_SZIND_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_SZIND_SHIFT","title":"<code>EDATA_BITS_SZIND_SHIFT = EDATA_BITS_STATE_WIDTH + EDATA_BITS_STATE_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_SZIND_WIDTH","title":"<code>EDATA_BITS_SZIND_WIDTH = lg_ceil(SC_NSIZES)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_ZEROED_MASK","title":"<code>EDATA_BITS_ZEROED_MASK = mask(EDATA_BITS_ZEROED_WIDTH, EDATA_BITS_ZEROED_SHIFT)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_ZEROED_SHIFT","title":"<code>EDATA_BITS_ZEROED_SHIFT = EDATA_BITS_PAI_WIDTH + EDATA_BITS_PAI_SHIFT</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.EDATA_BITS_ZEROED_WIDTH","title":"<code>EDATA_BITS_ZEROED_WIDTH = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.LG_PAGE","title":"<code>LG_PAGE = 12</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.LG_QUANTUM","title":"<code>LG_QUANTUM = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.LG_SIZEOF_PTR","title":"<code>LG_SIZEOF_PTR = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.LG_VADDR","title":"<code>LG_VADDR = 48</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.MALLOCX_ARENA_BITS","title":"<code>MALLOCX_ARENA_BITS = 12</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTREE_HEIGHT","title":"<code>RTREE_HEIGHT = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTREE_NHIB","title":"<code>RTREE_NHIB = 1 &lt;&lt; LG_SIZEOF_PTR + 3 - LG_VADDR</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTREE_NLIB","title":"<code>RTREE_NLIB = LG_PAGE</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTREE_NSB","title":"<code>RTREE_NSB = LG_VADDR - RTREE_NLIB</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_LG_BASE_MAX","title":"<code>SC_LG_BASE_MAX = SC_PTR_BITS - 2</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_LG_FIRST_REGULAR_BASE","title":"<code>SC_LG_FIRST_REGULAR_BASE = LG_QUANTUM + SC_LG_NGROUP</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_LG_NGROUP","title":"<code>SC_LG_NGROUP = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_LG_SLAB_MAXREGS","title":"<code>SC_LG_SLAB_MAXREGS = LG_PAGE - SC_LG_TINY_MIN</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_LG_TINY_MIN","title":"<code>SC_LG_TINY_MIN = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_NGROUP","title":"<code>SC_NGROUP = 1 &lt;&lt; SC_LG_NGROUP</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_NPSEUDO","title":"<code>SC_NPSEUDO = SC_NGROUP</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_NREGULAR","title":"<code>SC_NREGULAR = SC_NGROUP * SC_LG_BASE_MAX - SC_LG_FIRST_REGULAR_BASE + 1 - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_NSIZES","title":"<code>SC_NSIZES = SC_NTINY + SC_NPSEUDO + SC_NREGULAR</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_NTINY","title":"<code>SC_NTINY = LG_QUANTUM - SC_LG_TINY_MIN</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.SC_PTR_BITS","title":"<code>SC_PTR_BITS = 1 &lt;&lt; LG_SIZEOF_PTR * 8</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.rtree_levels","title":"<code>rtree_levels = [[{'bits': RTREE_NSB, 'cumbits': RTREE_NHIB + RTREE_NSB}], [{'bits': RTREE_NSB // 2, 'cumbits': RTREE_NHIB + RTREE_NSB // 2}, {'bits': RTREE_NSB // 2 + RTREE_NSB % 2, 'cumbits': RTREE_NHIB + RTREE_NSB}], [{'bits': RTREE_NSB // 3, 'cumbits': RTREE_NHIB + RTREE_NSB // 3}, {'bits': RTREE_NSB // 3 + RTREE_NSB % 3 // 2, 'cumbits': RTREE_NHIB + RTREE_NSB // 3 * 2 + RTREE_NSB % 3 // 2}, {'bits': RTREE_NSB // 3 + RTREE_NSB % 3 - RTREE_NSB % 3 // 2, 'cumbits': RTREE_NHIB + RTREE_NSB}]]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent","title":"<code>Extent</code>","text":"<p>Concept of extent (edata) is similar to chunk in glibc malloc but allocation algorithm differs a lot. - Extents are used to manage memory blocks (including jemalloc metadata) where extents sizes can vary but each block is always a multiple of the page size. - jemalloc will either allocate one large class request or multiple small class request (called slab) depending on request size. - Unlike chunks in glibc malloc, extents are not doubly linked list but are managed using rtree. - This tree is mostly used during deallocation to find the extent belonging to a pointer that is being freed. - Extents are also not stored as a header structure but externally (therefore extent metadata and actually mapped data may be very far apart).</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.allocated_address","title":"<code>allocated_address: int</code>  <code>property</code>","text":"<p>Starting address of allocated memory cache-oblivious large allocation alignment:     When a large class allocation is made, jemalloc selects the closest size class that can fit the request and allocates that size + 4 KiB (0x1000).     However, the pointer returned to user is randomized between the 'base' and 'base + 4 KiB' (0x1000) range.     Source code: https://github.com/jemalloc/jemalloc/blob/a25b9b8ba91881964be3083db349991bbbbf1661/include/jemalloc/internal/arena_inlines_b.h#L505</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.bitfields","title":"<code>bitfields: Dict[str, int]</code>  <code>property</code>","text":"<p>Extract bitfields</p> <p>arena_ind: Arena from which this extent came, or all 1 bits if unassociated. slab: The slab flag indicates whether the extent is used for a slab of small regions. This helps differentiate small size classes, and it indicates whether interior pointers can be looked up via iealloc(). committed: The committed flag indicates whether physical memory is committed to the extent, whether explicitly or implicitly as on a system that overcommits and satisfies physical memory needs on demand via soft page faults. pai: The pai flag is an extent_pai_t. zeroed: The zeroed flag is used by extent recycling code to track whether memory is zero-filled. guarded: The guarded flag is used by the sanitizer to track whether the extent has page guards around it. state: The state flag is an extent_state_t. szind: The szind flag indicates usable size class index for allocations residing in this extent, regardless of whether the extent is a slab. Extent size and usable size often differ even for non-slabs, either due to sz_large_pad or promotion of sampled small regions. nfree: Number of free regions in slab. bin_shard: The shard of the bin from which this extent came.</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.bits","title":"<code>bits: int</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.bsize","title":"<code>bsize: int</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.extent_address","title":"<code>extent_address: int</code>  <code>property</code>","text":"<p>Address of the extent data structure (not the actual memory).</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.has_slab","title":"<code>has_slab: bool</code>  <code>property</code>","text":"<p>Returns True if the extent is used for small size classes. Reference for size in Table 1 at https://jemalloc.net/jemalloc.3.html At time of writing, allocations &lt;= 0x3800 are considered as small allocations and has slabs.</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.is_free","title":"<code>is_free: bool</code>  <code>property</code>","text":"<p>Returns True if the extent is free.</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.pai","title":"<code>pai: str</code>  <code>property</code>","text":"<p>Page Allocator Interface</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.size","title":"<code>size</code>  <code>property</code>","text":"<p>May be larger in case of large size class allocation when cache_oblivious is enabled.</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.state_name","title":"<code>state_name: str</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.Extent.__init__","title":"<code>__init__(addr)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree","title":"<code>RTree</code>","text":"<p>RTree is used by jemalloc to keep track of extents that are allocated by jemalloc. Since extent data is not stored in a doubly linked list, rtree is used to find the extent belonging to a pointer that is being freed. Implementation of rtree is similar to Linux Radix tree: https://lwn.net/Articles/175432/</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.extents","title":"<code>extents</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.root","title":"<code>root</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.__alignment_addr2base","title":"<code>__alignment_addr2base(addr, alignment=64)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.__init__","title":"<code>__init__(addr)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.__rtree_leaf_maskbits","title":"<code>__rtree_leaf_maskbits(level)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.__rtree_leafkey","title":"<code>__rtree_leafkey(key, level)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.__subkey","title":"<code>__subkey(key, level)</code>","text":"<p>Return a portion of the key that is used to find the node/leaf in the rtree at a specific level. Source: https://github.com/jemalloc/jemalloc/blob/5b72ac098abce464add567869d082f2097bd59a2/include/jemalloc/internal/rtree.h#L161</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.get_rtree","title":"<code>get_rtree()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.RTree.lookup_hard","title":"<code>lookup_hard(key)</code>","text":"<p>Lookup the key in the rtree and return the value.</p> <p>How it works: - Jemalloc stores the extent address in the rtree as a node and to find a specific node we need a address key.</p>"},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_ceil","title":"<code>lg_ceil(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor","title":"<code>lg_floor(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_1","title":"<code>lg_floor_1(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_16","title":"<code>lg_floor_16(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_2","title":"<code>lg_floor_2(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_32","title":"<code>lg_floor_32(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_4","title":"<code>lg_floor_4(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_64","title":"<code>lg_floor_64(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.lg_floor_8","title":"<code>lg_floor_8(x)</code>","text":""},{"location":"source/aglib/heap/jemalloc/#pwndbg.aglib.heap.jemalloc.mask","title":"<code>mask(current_field_width, current_field_shift)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/","title":"Ptmalloc","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BINMAPSIZE","title":"<code>BINMAPSIZE = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HEAP_MAX_SIZE","title":"<code>HEAP_MAX_SIZE: int = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.IS_MMAPPED","title":"<code>IS_MMAPPED = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NBINS","title":"<code>NBINS = 128</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NFASTBINS","title":"<code>NFASTBINS = 10</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NONCONTIGUOUS_BIT","title":"<code>NONCONTIGUOUS_BIT = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NON_MAIN_ARENA","title":"<code>NON_MAIN_ARENA = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NSMALLBINS","title":"<code>NSMALLBINS = 64</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.PREV_INUSE","title":"<code>PREV_INUSE = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SIZE_BITS","title":"<code>SIZE_BITS = PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.TCACHE_MAX_BINS","title":"<code>TCACHE_MAX_BINS = 64</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.TheType","title":"<code>TheType = TypeVar('TheType', pwndbg.dbg_mod.Type, typing.Type[pwndbg.aglib.heap.structs.CStruct2GDB])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.TheValue","title":"<code>TheValue = TypeVar('TheValue', pwndbg.dbg_mod.Value, pwndbg.aglib.heap.structs.CStruct2GDB)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena","title":"<code>Arena</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.__slots__","title":"<code>__slots__ = ('_gdbValue', 'address', '_is_main_arena', '_top', '_active_heap', '_heaps', '_mutex', '_flags', '_non_contiguous', '_have_fastchunks', '_fastbinsY', '_bins', '_binmap', '_next', '_next_free', '_system_mem')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.active_heap","title":"<code>active_heap: Heap</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.address","title":"<code>address = int(self._gdbValue.address)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.binmap","title":"<code>binmap: List[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.bins","title":"<code>bins: List[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.fastbinsY","title":"<code>fastbinsY: List[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.flags","title":"<code>flags: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.have_fastchunks","title":"<code>have_fastchunks: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.heaps","title":"<code>heaps</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.is_main_arena","title":"<code>is_main_arena: bool</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.mutex","title":"<code>mutex: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.next","title":"<code>next: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.next_free","title":"<code>next_free: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.non_contiguous","title":"<code>non_contiguous: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.system_mem","title":"<code>system_mem: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.top","title":"<code>top: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.__init__","title":"<code>__init__(addr)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.fastbins","title":"<code>fastbins()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin","title":"<code>Bin</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.bk_chain","title":"<code>bk_chain = bk_chain</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.count","title":"<code>count = count</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.fd_chain","title":"<code>fd_chain = fd_chain</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.is_corrupted","title":"<code>is_corrupted = is_corrupted</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.__init__","title":"<code>__init__(fd_chain, bk_chain=None, count=None, is_corrupted=False)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.contains_chunk","title":"<code>contains_chunk(chunk)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.size_to_display_name","title":"<code>size_to_display_name(size)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType","title":"<code>BinType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.FAST","title":"<code>FAST = 'fastbins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.LARGE","title":"<code>LARGE = 'largebins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.NOT_IN_BIN","title":"<code>NOT_IN_BIN = 'not_in_bin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.SMALL","title":"<code>SMALL = 'smallbins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.TCACHE","title":"<code>TCACHE = 'tcachebins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.UNSORTED","title":"<code>UNSORTED = 'unsortedbin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.valid_fields","title":"<code>valid_fields()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins","title":"<code>Bins</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.bin_type","title":"<code>bin_type = bin_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.bins","title":"<code>bins: OrderedDictType[int | str, Bin] = OrderedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.__init__","title":"<code>__init__(bin_type)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.contains_chunk","title":"<code>contains_chunk(size, chunk)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk","title":"<code>Chunk</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__slots__","title":"<code>__slots__ = ('_gdbValue', 'address', '_prev_size', '_size', '_real_size', '_flags', '_non_main_arena', '_is_mmapped', '_prev_inuse', '_fd', '_bk', '_fd_nextsize', '_bk_nextsize', '_heap', '_arena', '_is_top_chunk')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.address","title":"<code>address = int(self._gdbValue.address)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.arena","title":"<code>arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.bk","title":"<code>bk</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.bk_nextsize","title":"<code>bk_nextsize</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.fd","title":"<code>fd</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.fd_nextsize","title":"<code>fd_nextsize</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.flags","title":"<code>flags: Dict[str, bool] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.heap","title":"<code>heap: Heap</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.is_mmapped","title":"<code>is_mmapped: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.is_top_chunk","title":"<code>is_top_chunk</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.non_main_arena","title":"<code>non_main_arena: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.prev_inuse","title":"<code>prev_inuse: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.prev_size","title":"<code>prev_size: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.real_size","title":"<code>real_size: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.size","title":"<code>size: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__contains__","title":"<code>__contains__(addr)</code>","text":"<p>This allow us to avoid extra constructions like 'if start_addr &lt;= ptr &lt; end_addr', etc.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__init__","title":"<code>__init__(addr, heap=None, arena=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__match_renamed_field","title":"<code>__match_renamed_field(field)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.next_chunk","title":"<code>next_chunk()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField","title":"<code>ChunkField</code>","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.BK","title":"<code>BK = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.BK_NEXTSIZE","title":"<code>BK_NEXTSIZE = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.FD","title":"<code>FD = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.FD_NEXTSIZE","title":"<code>FD_NEXTSIZE = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.PREV_SIZE","title":"<code>PREV_SIZE = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.SIZE","title":"<code>SIZE = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap","title":"<code>DebugSymsHeap</code>","text":"<p>               Bases: <code>GlibcMemoryAllocator[Type, Value]</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.can_be_resolved","title":"<code>can_be_resolved = GlibcMemoryAllocator.libc_has_debug_syms</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.global_max_fast","title":"<code>global_max_fast: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.heap_info","title":"<code>heap_info: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.main_arena","title":"<code>main_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.mallinfo","title":"<code>mallinfo: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.malloc_chunk","title":"<code>malloc_chunk: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.malloc_par","title":"<code>malloc_par: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.malloc_state","title":"<code>malloc_state: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.mp","title":"<code>mp: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.tcache_entry","title":"<code>tcache_entry: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.tcache_perthread_struct","title":"<code>tcache_perthread_struct: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.thread_arena","title":"<code>thread_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.thread_cache","title":"<code>thread_cache: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":"<p>Locate a thread's tcache struct. If it doesn't have one, use the main thread's tcache.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.get_heap","title":"<code>get_heap(addr)</code>","text":"<p>Find &amp; read the heap_info struct belonging to the chunk at 'addr'.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.get_sbrk_heap_region","title":"<code>get_sbrk_heap_region()</code>","text":"<p>Return a Page object representing the sbrk heap region. Ensure the region's start address is aligned to SIZE_SZ * 2, which compensates for the presence of GLIBC_TUNABLES.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.get_tcache","title":"<code>get_tcache(tcache_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.has_tcache","title":"<code>has_tcache()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.is_initialized","title":"<code>is_initialized()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator","title":"<code>GlibcMemoryAllocator</code>","text":"<p>               Bases: <code>MemoryAllocator</code>, <code>Generic[TheType, TheValue]</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.arenas","title":"<code>arenas: Tuple[Arena, ...]</code>  <code>property</code>","text":"<p>Return a tuple of all current arenas.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.global_max_fast","title":"<code>global_max_fast: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.heap_info","title":"<code>heap_info: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup_32","title":"<code>largebin_reverse_lookup_32 = (512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 3072, 3584, 4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728, 10240, 10752, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 65536, 98304, 131072, 163840, 262144, 524288)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup_32_big","title":"<code>largebin_reverse_lookup_32_big = (1008, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 2944, 3072, 3584, 4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728, 10240, 10752, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 65536, 98304, 131072, 163840, 262144, 524288)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup_64","title":"<code>largebin_reverse_lookup_64 = (1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3584, 4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728, 10240, 10752, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 65536, 98304, 131072, 163840, 262144, 524288)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.main_arena","title":"<code>main_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.mallinfo","title":"<code>mallinfo: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_align_mask","title":"<code>malloc_align_mask: int</code>  <code>property</code>","text":"<p>Corresponds to MALLOC_ALIGN_MASK in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_alignment","title":"<code>malloc_alignment: int</code>  <code>property</code>","text":"<p>Corresponds to MALLOC_ALIGNMENT in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_chunk","title":"<code>malloc_chunk: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_par","title":"<code>malloc_par: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_state","title":"<code>malloc_state: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.min_chunk_size","title":"<code>min_chunk_size: int</code>  <code>property</code>","text":"<p>Corresponds to MIN_CHUNK_SIZE in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.minsize","title":"<code>minsize: int</code>  <code>property</code>","text":"<p>Corresponds to MINSIZE in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.mp","title":"<code>mp: TheValue | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.multithreaded","title":"<code>multithreaded: bool</code>  <code>property</code>","text":"<p>Is malloc operating within a multithreaded environment.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.size_sz","title":"<code>size_sz: int</code>  <code>property</code>","text":"<p>Corresponds to SIZE_SZ in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcache_entry","title":"<code>tcache_entry: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcache_next_offset","title":"<code>tcache_next_offset: int</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcache_perthread_struct","title":"<code>tcache_perthread_struct: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.thread_arena","title":"<code>thread_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.thread_cache","title":"<code>thread_cache: TheValue | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.bin_at","title":"<code>bin_at(index, arena_addr=None)</code>","text":"<p>Modeled after glibc's bin_at function - so starts indexing from 1 https://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/eglibc/trusty-security/view/head:/malloc/malloc.c#L1394</p> <p>bin_at(1) returns the unsorted bin</p> <p>Bin 1          - Unsorted BiN Bin 2 to 63    - Smallbins Bin 64 to 126  - Largebins</p> <p>Returns: tuple(chain_from_bin_fd, chain_from_bin_bk, is_chain_corrupted) or None</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.can_be_resolved","title":"<code>can_be_resolved()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.check_chain_corrupted","title":"<code>check_chain_corrupted(chain_fd, chain_bk)</code>","text":"<p>Checks if the doubly linked list (of a {unsorted, small, large} bin) defined by chain_fd, chain_bk is corrupted.</p> <p>Even if the chains do not cover the whole bin, they still are expected to be of the same length.</p> <p>Returns True if the bin is certainly corrupted, otherwise False.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.chunk_flags","title":"<code>chunk_flags(size)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.chunk_key_offset","title":"<code>chunk_key_offset(key)</code>","text":"<p>Find the index of a field in the malloc_chunk struct.</p> 64bit example <p>prev_size == 0 size      == 8 fd        == 16 bk        == 24 ...</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.fastbin_index","title":"<code>fastbin_index(size)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.fastbins","title":"<code>fastbins(arena_addr=None)</code>","text":"<p>Returns: chain or None</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_bins","title":"<code>get_bins(bin_type, addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_heap","title":"<code>get_heap(addr)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_region","title":"<code>get_region(addr)</code>","text":"<p>Find the memory map containing 'addr'.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_sbrk_heap_region","title":"<code>get_sbrk_heap_region()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_tcache","title":"<code>get_tcache(tcache_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.has_tcache","title":"<code>has_tcache()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.is_initialized","title":"<code>is_initialized()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.is_statically_linked","title":"<code>is_statically_linked()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index","title":"<code>largebin_index(sz)</code>","text":"<p>Pick the appropriate largebin_index_ function for this architecture.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index_32","title":"<code>largebin_index_32(sz)</code>","text":"<p>Modeled on the GLIBC malloc largebin_index_32 macro.</p> <p>https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=f7cd29bc2f93e1082ee77800bd64a4b2a2897055;hb=9ea3686266dca3f004ba874745a4087a89682617#l1414</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index_32_big","title":"<code>largebin_index_32_big(sz)</code>","text":"<p>Modeled on the GLIBC malloc largebin_index_32_big macro.</p> <p>https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=f7cd29bc2f93e1082ee77800bd64a4b2a2897055;hb=9ea3686266dca3f004ba874745a4087a89682617#l1422</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index_64","title":"<code>largebin_index_64(sz)</code>","text":"<p>Modeled on the GLIBC malloc largebin_index_64 macro.</p> <p>https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=f7cd29bc2f93e1082ee77800bd64a4b2a2897055;hb=9ea3686266dca3f004ba874745a4087a89682617#l1433</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup","title":"<code>largebin_reverse_lookup(index)</code>","text":"<p>Pick the appropriate largebin_reverse_lookup_ function for this architecture.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_size_range_from_index","title":"<code>largebin_size_range_from_index(index)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebins","title":"<code>largebins(arena_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.libc_has_debug_syms","title":"<code>libc_has_debug_syms()</code>","text":"<p>The <code>struct malloc_chunk</code> comes from debugging symbols and it will not be there for statically linked binaries</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.smallbins","title":"<code>smallbins(arena_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcachebins","title":"<code>tcachebins(tcache_addr=None)</code>","text":"<p>Returns: tuple(chain, count) or None</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.unsortedbin","title":"<code>unsortedbin(arena_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap","title":"<code>Heap</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__slots__","title":"<code>__slots__ = ('_gdbValue', 'arena', '_memory_region', 'start', 'end', '_prev', 'first_chunk')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.arena","title":"<code>arena = main_arena if arena is None else arena</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.end","title":"<code>end: int = self._memory_region.end</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.first_chunk","title":"<code>first_chunk = Chunk(self.start)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.prev","title":"<code>prev</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.start","title":"<code>start: int = self._memory_region.start</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__contains__","title":"<code>__contains__(addr)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__init__","title":"<code>__init__(addr, arena=None)</code>","text":"<p>Build a Heap object given an address on that heap. Heap regions are treated differently depending on their arena: 1) main_arena - uses the sbrk heap 2) non-main arena - heap starts after its heap_info struct (and possibly an arena) 3) non-contiguous main_arena - just a memory region 4) no arena - for fake/mmapped chunks</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap","title":"<code>HeuristicHeap</code>","text":"<p>               Bases: <code>GlibcMemoryAllocator[Type['pwndbg.aglib.heap.structs.CStruct2GDB'], 'pwndbg.aglib.heap.structs.CStruct2GDB']</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.global_max_fast","title":"<code>global_max_fast: int</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.heap_info","title":"<code>heap_info: Type['pwndbg.aglib.heap.structs.HeapInfo'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.main_arena","title":"<code>main_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.mallinfo","title":"<code>mallinfo: Type['pwndbg.aglib.heap.structs.CStruct2GDB'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.malloc_chunk","title":"<code>malloc_chunk: Type['pwndbg.aglib.heap.structs.MallocChunk'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.malloc_par","title":"<code>malloc_par: Type['pwndbg.aglib.heap.structs.MallocPar'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.malloc_state","title":"<code>malloc_state: Type['pwndbg.aglib.heap.structs.MallocState'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.mp","title":"<code>mp: 'pwndbg.aglib.heap.structs.CStruct2GDB'</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.struct_module","title":"<code>struct_module: types.ModuleType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.tcache_entry","title":"<code>tcache_entry: Type['pwndbg.aglib.heap.structs.TcacheEntry'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.tcache_perthread_struct","title":"<code>tcache_perthread_struct: Type['pwndbg.aglib.heap.structs.TcachePerthreadStruct'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.thread_arena","title":"<code>thread_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.thread_cache","title":"<code>thread_cache: 'pwndbg.aglib.heap.structs.TcachePerthreadStruct' | None</code>  <code>property</code>","text":"<p>Locate a thread's tcache struct. We try to find its address in Thread Local Storage (TLS) first, and if that fails, we guess it's at the first chunk of the heap.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.brute_force_thread_local_variable_near_tls_base","title":"<code>brute_force_thread_local_variable_near_tls_base(tls_address, validator)</code>","text":"<p>Brute force the thread-local variable near the TLS base address that can pass the validator.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.brute_force_tls_reference_in_got_section","title":"<code>brute_force_tls_reference_in_got_section(tls_address, validator)</code>","text":"<p>Brute force the TLS-reference in the .got section to that can pass the validator.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.can_be_resolved","title":"<code>can_be_resolved()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.get_heap","title":"<code>get_heap(addr)</code>","text":"<p>Find &amp; read the heap_info struct belonging to the chunk at 'addr'.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.get_sbrk_heap_region","title":"<code>get_sbrk_heap_region()</code>","text":"<p>Return a Page object representing the sbrk heap region. Ensure the region's start address is aligned to SIZE_SZ * 2, which compensates for the presence of GLIBC_TUNABLES. This heuristic version requires some sanity checks and may raise SymbolUnresolvableError if malloc's <code>mp_</code> struct can't be resolved.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.get_tcache","title":"<code>get_tcache(tcache_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.has_tcache","title":"<code>has_tcache()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.is_initialized","title":"<code>is_initialized()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.prompt_for_brute_force_thread_arena_permission","title":"<code>prompt_for_brute_force_thread_arena_permission()</code>","text":"<p>Check if the user wants to brute force the thread_arena's value.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.prompt_for_brute_force_thread_cache_permission","title":"<code>prompt_for_brute_force_thread_cache_permission()</code>","text":"<p>Check if the user wants to brute force the tcache's value.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.prompt_for_tls_address","title":"<code>prompt_for_tls_address()</code>","text":"<p>Check if we can determine the TLS address and return it.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SymbolUnresolvableError","title":"<code>SymbolUnresolvableError</code>","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SymbolUnresolvableError.symbol","title":"<code>symbol = symbol</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SymbolUnresolvableError.__init__","title":"<code>__init__(symbol)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.fetch_chunk_metadata","title":"<code>fetch_chunk_metadata(address, include_only_fields=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.heap_for_ptr","title":"<code>heap_for_ptr(ptr)</code>","text":"<p>Round a pointer to a chunk down to find its corresponding heap_info struct, the pointer must point inside a heap which does not belong to the main arena.</p>"},{"location":"source/aglib/heap/structs/","title":"Structs","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.BINMAPSIZE","title":"<code>BINMAPSIZE = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.C2GDB_MAPPING","title":"<code>C2GDB_MAPPING = {ctypes.c_char: pwndbg.aglib.typeinfo.char, ctypes.c_int8: pwndbg.aglib.typeinfo.int8, ctypes.c_int16: pwndbg.aglib.typeinfo.int16, ctypes.c_int32: pwndbg.aglib.typeinfo.int32, ctypes.c_int64: pwndbg.aglib.typeinfo.int64, ctypes.c_uint8: pwndbg.aglib.typeinfo.uint8, ctypes.c_uint16: pwndbg.aglib.typeinfo.uint16, ctypes.c_uint32: pwndbg.aglib.typeinfo.uint32, ctypes.c_uint64: pwndbg.aglib.typeinfo.uint64, c_pvoid: pwndbg.aglib.typeinfo.pvoid, c_size_t: pwndbg.aglib.typeinfo.size_t}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_MMAP_MAX","title":"<code>DEFAULT_MMAP_MAX = 65536</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_MMAP_THRESHOLD","title":"<code>DEFAULT_MMAP_THRESHOLD = 128 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_MP_","title":"<code>DEFAULT_MP_ = MallocPar._c_struct()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_PAGE_SIZE","title":"<code>DEFAULT_PAGE_SIZE = 4096</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_TOP_PAD","title":"<code>DEFAULT_TOP_PAD = 131072</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_TRIM_THRESHOLD","title":"<code>DEFAULT_TRIM_THRESHOLD = 128 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.GLIBC_VERSION","title":"<code>GLIBC_VERSION = pwndbg.glibc.get_version()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MALLOC_ALIGN","title":"<code>MALLOC_ALIGN = 16</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MALLOC_ALIGN_MASK","title":"<code>MALLOC_ALIGN_MASK = MALLOC_ALIGN - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MAX_FAST_SIZE","title":"<code>MAX_FAST_SIZE = 80 * SIZE_SZ // 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MINSIZE","title":"<code>MINSIZE = pwndbg.aglib.arch.ptrsize * 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.NBINS","title":"<code>NBINS = 128</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.NFASTBINS","title":"<code>NFASTBINS = fastbin_index(request2size(MAX_FAST_SIZE)) + 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.PTR","title":"<code>PTR = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.SIZE_SZ","title":"<code>SIZE_SZ = pwndbg.aglib.arch.ptrsize</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.SIZE_T","title":"<code>SIZE_T = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TCACHE_FILL_COUNT","title":"<code>TCACHE_FILL_COUNT = 7</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TCACHE_MAX_BINS","title":"<code>TCACHE_MAX_BINS = 64</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.long_double_alignment","title":"<code>long_double_alignment = pwndbg.aglib.typeinfo.lookup_types('long double').alignof</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB","title":"<code>CStruct2GDB</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.address","title":"<code>address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.code","title":"<code>code = pwndbg.dbg_mod.TypeCode.STRUCT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.type","title":"<code>type</code>  <code>property</code>","text":"<p>Returns type(self) to make it compatible with the <code>pwndbg.dbg_mod.Value</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__getattr__","title":"<code>__getattr__(key)</code>","text":"<p>Returns the value of the specified field as a <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Returns the value of the specified field as a <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__init__","title":"<code>__init__(address)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__int__","title":"<code>__int__()</code>","text":"<p>Returns the address of the C struct.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the C struct like <code>pwndbg.dbg_mod.Value</code> does.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.fields","title":"<code>fields()</code>  <code>classmethod</code>","text":"<p>Return fields of the struct to make it compatible with the <code>pwndbg.dbg_mod.Type</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.get_field_address","title":"<code>get_field_address(field)</code>","text":"<p>Returns the address of the specified field.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.get_field_offset","title":"<code>get_field_offset(field)</code>  <code>classmethod</code>","text":"<p>Returns the offset of the specified field.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.has_field","title":"<code>has_field(field)</code>  <code>classmethod</code>","text":"<p>Checks whether a field exists to make it compatible with the <code>pwndbg.dbg_mod.Type</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.items","title":"<code>items()</code>","text":"<p>Returns a tuple of (field name, field value) pairs.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.keys","title":"<code>keys()</code>  <code>classmethod</code>","text":"<p>Return a list of the names of the fields in the struct to make it compatible with the <code>pwndbg.dbg_mod.Type</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.read_field","title":"<code>read_field(field)</code>","text":"<p>Returns the value of the specified field as a <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.unqualified","title":"<code>unqualified()</code>  <code>classmethod</code>","text":"<p>Returns cls to make it compatible with the <code>gdb.types.has_field()</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField","title":"<code>FakeGDBField</code>","text":"<p>Fake gdb.Field for compatibility</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.artificial","title":"<code>artificial = artificial</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.bitpos","title":"<code>bitpos = bitpos</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.bitsize","title":"<code>bitsize = bitsize</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.enumval","title":"<code>enumval = enumval</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.is_base_class","title":"<code>is_base_class = is_base_class</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.parent_type","title":"<code>parent_type = parent_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.__init__","title":"<code>__init__(bitpos, name, type, parent_type, enumval=None, artificial=False, is_base_class=False, bitsize=0)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.HeapInfo","title":"<code>HeapInfo</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents heap_info struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.HeapInfo.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocChunk","title":"<code>MallocChunk</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents malloc_chunk struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocChunk.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocPar","title":"<code>MallocPar</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents the malloc_par struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocPar.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocState","title":"<code>MallocState</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents malloc_state struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocState.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcacheEntry","title":"<code>TcacheEntry</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents the tcache_entry struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcacheEntry.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcachePerthreadStruct","title":"<code>TcachePerthreadStruct</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents tcache_perthread_struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcachePerthreadStruct.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_heap_info","title":"<code>c_heap_info</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents heap_info struct as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/arena.c#L53</p> <p>typedef struct _heap_info {     mstate ar_ptr; /* Arena for this heap. /     struct _heap_info *prev; / Previous heap. /     size_t size;   / Current size in bytes. /     size_t mprotect_size; / Size in bytes that has been mprotected                             PROT_READ|PROT_WRITE.  /     / Make sure the following data is properly aligned, particularly         that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of         MALLOC_ALIGNMENT. */     char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; } heap_info;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_chunk","title":"<code>c_malloc_chunk</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_chunk struct as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L1154</p> <p>struct malloc_chunk {</p> Text Only<pre><code>INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  */\nINTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. */\n\nstruct malloc_chunk* fd;         /* double links -- used only if free. */\nstruct malloc_chunk* bk;\n\n/* Only used for large blocks: pointer to next larger size.  */\nstruct malloc_chunk* fd_nextsize; /* double links -- used only if free. */\nstruct malloc_chunk* bk_nextsize;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_12","title":"<code>c_malloc_par_2_12</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &lt; 2.15 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.12/malloc/malloc.c#L2402-L2433</p> <p>struct malloc_par { /* Tunable parameters */ unsigned long    trim_threshold; INTERNAL_SIZE_T  top_pad; INTERNAL_SIZE_T  mmap_threshold;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_12--ifdef-per_thread","title":"ifdef PER_THREAD","text":"<p>INTERNAL_SIZE_T  arena_test; INTERNAL_SIZE_T  arena_max;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_12--endif","title":"endif","text":"<p>/* Memory map support / int              n_mmaps; int              n_mmaps_max; int              max_n_mmaps; / the mmap_threshold is dynamic, until the user sets     it manually, at which point we need to disable any     dynamic behavior. */ int              no_dyn_threshold;</p> <p>/* Cache malloc_getpagesize */ unsigned int     pagesize;</p> <p>/* Statistics / INTERNAL_SIZE_T  mmapped_mem; /*INTERNAL_SIZE_T  sbrked_mem;/ /INTERNAL_SIZE_T  max_sbrked_mem;/ INTERNAL_SIZE_T  max_mmapped_mem; INTERNAL_SIZE_T  max_total_mem; /* only kept for NO_THREADS */</p> <p>/* First address handed out by MORECORE/sbrk.  / char            sbrk_base; };</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_23","title":"<code>c_malloc_par_2_23</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &lt; 2.24 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.23/malloc/malloc.c#L1726</p> <p>struct malloc_par { /* Tunable parameters */ unsigned long trim_threshold; INTERNAL_SIZE_T top_pad; INTERNAL_SIZE_T mmap_threshold; INTERNAL_SIZE_T arena_test; INTERNAL_SIZE_T arena_max;</p> <p>/* Memory map support / int n_mmaps; int n_mmaps_max; int max_n_mmaps; / the mmap_threshold is dynamic, until the user sets     it manually, at which point we need to disable any     dynamic behavior. */ int no_dyn_threshold;</p> <p>/* Statistics / INTERNAL_SIZE_T mmapped_mem; /*INTERNAL_SIZE_T  sbrked_mem;/ /INTERNAL_SIZE_T  max_sbrked_mem;/ INTERNAL_SIZE_T max_mmapped_mem; INTERNAL_SIZE_T max_total_mem;  /* only kept for NO_THREADS */</p> <p>/* First address handed out by MORECORE/sbrk.  */ char *sbrk_base; };</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_24","title":"<code>c_malloc_par_2_24</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &gt;= 2.24 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.25/malloc/malloc.c#L1690 https://github.com/bminor/glibc/blob/glibc-2.24/malloc/malloc.c#L1719</p> <p>struct malloc_par {     /* Tunable parameters */     unsigned long trim_threshold;     INTERNAL_SIZE_T top_pad;     INTERNAL_SIZE_T mmap_threshold;     INTERNAL_SIZE_T arena_test;     INTERNAL_SIZE_T arena_max;</p> Text Only<pre><code>/* Memory map support */\nint n_mmaps;\nint n_mmaps_max;\nint max_n_mmaps;\n/* the mmap_threshold is dynamic, until the user sets\n    it manually, at which point we need to disable any\n    dynamic behavior. */\nint no_dyn_threshold;\n\n/* Statistics */\nINTERNAL_SIZE_T mmapped_mem;\nINTERNAL_SIZE_T max_mmapped_mem;\n\n/* First address handed out by MORECORE/sbrk.  */\nchar *sbrk_base;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_26","title":"<code>c_malloc_par_2_26</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &gt;= 2.26 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L1875</p> <p>struct malloc_par {     /* Tunable parameters */     unsigned long trim_threshold;     INTERNAL_SIZE_T top_pad;     INTERNAL_SIZE_T mmap_threshold;     INTERNAL_SIZE_T arena_test;     INTERNAL_SIZE_T arena_max;</p> Text Only<pre><code>/* Memory map support */\nint n_mmaps;\nint n_mmaps_max;\nint max_n_mmaps;\n/* the mmap_threshold is dynamic, until the user sets\n    it manually, at which point we need to disable any\n    dynamic behavior. */\nint no_dyn_threshold;\n\n/* Statistics */\nINTERNAL_SIZE_T mmapped_mem;\nINTERNAL_SIZE_T max_mmapped_mem;\n\n/* First address handed out by MORECORE/sbrk.  */\nchar *sbrk_base;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_26--if-use_tcache","title":"if USE_TCACHE","text":"Text Only<pre><code>/* Maximum number of buckets to use.  */\nsize_t tcache_bins;\nsize_t tcache_max_bytes;\n/* Maximum number of chunks in each bucket.  */\nsize_t tcache_count;\n/* Maximum number of chunks to remove from the unsorted list, which\n    aren't used to prefill the cache.  */\nsize_t tcache_unsorted_limit;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_26--endif","title":"endif","text":"<p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35","title":"<code>c_malloc_par_2_35</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &gt;= 2.35 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.35/malloc/malloc.c#L1874</p> <p>struct malloc_par {     /* Tunable parameters */     unsigned long trim_threshold;     INTERNAL_SIZE_T top_pad;     INTERNAL_SIZE_T mmap_threshold;     INTERNAL_SIZE_T arena_test;     INTERNAL_SIZE_T arena_max;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--if-have_tunables","title":"if HAVE_TUNABLES","text":"Text Only<pre><code>/* Transparent Large Page support.  */\nINTERNAL_SIZE_T thp_pagesize;\n/* A value different than 0 means to align mmap allocation to hp_pagesize\n    add hp_flags on flags.  */\nINTERNAL_SIZE_T hp_pagesize;\nint hp_flags;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--endif","title":"endif","text":"Text Only<pre><code>/* Memory map support */\nint n_mmaps;\nint n_mmaps_max;\nint max_n_mmaps;\n/* the mmap_threshold is dynamic, until the user sets\n    it manually, at which point we need to disable any\n    dynamic behavior. */\nint no_dyn_threshold;\n\n/* Statistics */\nINTERNAL_SIZE_T mmapped_mem;\nINTERNAL_SIZE_T max_mmapped_mem;\n\n/* First address handed out by MORECORE/sbrk.  */\nchar *sbrk_base;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--if-use_tcache","title":"if USE_TCACHE","text":"Text Only<pre><code>/* Maximum number of buckets to use.  */\nsize_t tcache_bins;\nsize_t tcache_max_bytes;\n/* Maximum number of chunks in each bucket.  */\nsize_t tcache_count;\n/* Maximum number of chunks to remove from the unsorted list, which\n    aren't used to prefill the cache.  */\nsize_t tcache_unsorted_limit;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--endif_1","title":"endif","text":"<p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12","title":"<code>c_malloc_state_2_12</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_state struct for GLIBC &lt; 2.22 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.12/malloc/malloc.c#L2362-L2400</p> <p>struct malloc_state { /* Serialize access.  */ mutex_t mutex;</p> <p>/* Flags (formerly in max_fast).  */ int flags;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--if-thread_stats","title":"if THREAD_STATS","text":"<p>/* Statistics for locking.  Only used if THREAD_STATS is defined.  */ long stat_lock_direct, stat_lock_loop, stat_lock_wait;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--endif","title":"endif","text":"<p>/* Fastbins */ mfastbinptr      fastbinsY[NFASTBINS];</p> <p>/* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr        top;</p> <p>/* The remainder from the most recent split of a small request */ mchunkptr        last_remainder;</p> <p>/* Normal bins packed as described above */ mchunkptr        bins[NBINS * 2 - 2];</p> <p>/* Bitmap of bins */ unsigned int     binmap[BINMAPSIZE];</p> <p>/* Linked list */ struct malloc_state *next;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--ifdef-per_thread","title":"ifdef PER_THREAD","text":"<p>/* Linked list for free arenas.  */ struct malloc_state *next_free;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--endif_1","title":"endif","text":"<p>/* Memory allocated from the system in this arena.  */ INTERNAL_SIZE_T system_mem; INTERNAL_SIZE_T max_system_mem; };</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_26","title":"<code>c_malloc_state_2_26</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_state struct for GLIBC &lt; 2.27 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/1c9a5c270d8b66f30dcfaf1cb2d6cf39d3e18369/malloc/malloc.c#L1678-L1716</p> <p>struct malloc_state {     /* Serialize access.  */     __libc_lock_define (, mutex);</p> Text Only<pre><code>/* Flags (formerly in max_fast).  */\nint flags;\n\n/* Fastbins */\nmfastbinptr fastbinsY[NFASTBINS];\n\n/* Base of the topmost chunk -- not otherwise kept in a bin */\nmchunkptr top;\n\n/* The remainder from the most recent split of a small request */\nmchunkptr last_remainder;\n\n/* Normal bins packed as described above */\nmchunkptr bins[NBINS * 2 - 2];\n\n/* Bitmap of bins */\nunsigned int binmap[BINMAPSIZE];\n\n/* Linked list */\nstruct malloc_state *next;\n\n/* Linked list for free arenas.  Access to this field is serialized\n    by free_list_lock in arena.c.  */\nstruct malloc_state *next_free;\n\n/* Number of threads attached to this arena.  0 if the arena is on\n    the free list.  Access to this field is serialized by\n    free_list_lock in arena.c.  */\nINTERNAL_SIZE_T attached_threads;\n\n/* Memory allocated from the system in this arena.  */\nINTERNAL_SIZE_T system_mem;\nINTERNAL_SIZE_T max_system_mem;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_27","title":"<code>c_malloc_state_2_27</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_state struct for GLIBC &gt;= 2.27 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L1831</p> <p>struct malloc_state {     /* Serialize access.  */     __libc_lock_define (, mutex);</p> Text Only<pre><code>/* Flags (formerly in max_fast).  */\nint flags;\n\n/* Set if the fastbin chunks contain recently inserted free blocks.  */\n/* Note this is a bool but not all targets support atomics on booleans.  */\nint have_fastchunks;\n\n/* Fastbins */\nmfastbinptr fastbinsY[NFASTBINS];\n\n/* Base of the topmost chunk -- not otherwise kept in a bin */\nmchunkptr top;\n\n/* The remainder from the most recent split of a small request */\nmchunkptr last_remainder;\n\n/* Normal bins packed as described above */\nmchunkptr bins[NBINS * 2 - 2];\n\n/* Bitmap of bins */\nunsigned int binmap[BINMAPSIZE];\n\n/* Linked list */\nstruct malloc_state *next;\n\n/* Linked list for free arenas.  Access to this field is serialized\n    by free_list_lock in arena.c.  */\nstruct malloc_state *next_free;\n\n/* Number of threads attached to this arena.  0 if the arena is on\n    the free list.  Access to this field is serialized by\n    free_list_lock in arena.c.  */\nINTERNAL_SIZE_T attached_threads;\n\n/* Memory allocated from the system in this arena.  */\nINTERNAL_SIZE_T system_mem;\nINTERNAL_SIZE_T max_system_mem;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_pvoid","title":"<code>c_pvoid</code>","text":"<p>               Bases: <code>PTR</code></p> <p>Represents a pointer.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_size_t","title":"<code>c_size_t</code>","text":"<p>               Bases: <code>SIZE_T</code></p> <p>Represents a size_t.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_entry_2_28","title":"<code>c_tcache_entry_2_28</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the tcache_entry struct for GLIBC &lt; 2.29 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.28/malloc/malloc.c#L2888</p> <p>typedef struct tcache_entry {     struct tcache_entry *next; } tcache_entry;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_entry_2_29","title":"<code>c_tcache_entry_2_29</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the tcache_entry struct for GLIBC &gt;= 2.29 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L3013</p> <p>typedef struct tcache_entry {     struct tcache_entry next;     / This field exists to detect double frees.  */     uintptr_t key; } tcache_entry;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_perthread_struct_2_29","title":"<code>c_tcache_perthread_struct_2_29</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents tcache_perthread_struct for GLIBC &lt; 2.30 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.29/malloc/malloc.c#L2916</p> <p>typedef struct tcache_perthread_struct {     char counts[TCACHE_MAX_BINS];     tcache_entry *entries[TCACHE_MAX_BINS]; } tcache_perthread_struct;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_perthread_struct_2_30","title":"<code>c_tcache_perthread_struct_2_30</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the tcache_perthread_struct for GLIBC &gt;= 2.30 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L3025</p> <p>typedef struct tcache_perthread_struct {     uint16_t counts[TCACHE_MAX_BINS];     tcache_entry *entries[TCACHE_MAX_BINS]; } tcache_perthread_struct;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.fastbin_index","title":"<code>fastbin_index(size)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.request2size","title":"<code>request2size(req)</code>","text":""},{"location":"source/aglib/kernel/__init__/","title":"init","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.D","title":"<code>D = TypeVar('D')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops","title":"<code>Aarch64Ops</code>","text":"<p>               Bases: <code>ArchOps</code></p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.PAGE_OFFSET","title":"<code>PAGE_OFFSET = -1 &lt;&lt; self.VA_BITS + 2 ** 64</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.PAGE_SHIFT","title":"<code>PAGE_SHIFT = int(kconfig()['CONFIG_ARM64_PAGE_SHIFT'])</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.PHYS_OFFSET","title":"<code>PHYS_OFFSET = pwndbg.aglib.memory.u(addr)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.STRUCT_PAGE_SHIFT","title":"<code>STRUCT_PAGE_SHIFT = int(math.log2(self.STRUCT_PAGE_SIZE))</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.STRUCT_PAGE_SIZE","title":"<code>STRUCT_PAGE_SIZE = page_type.sizeof</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.VA_BITS","title":"<code>VA_BITS = int(kconfig()['ARM64_VA_BITS'])</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.VMEMMAP_SHIFT","title":"<code>VMEMMAP_SHIFT = self.PAGE_SHIFT - self.STRUCT_PAGE_SHIFT</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.VMEMMAP_START","title":"<code>VMEMMAP_START = -1 &lt;&lt; self.VA_BITS - self.VMEMMAP_SHIFT % 1 &lt;&lt; 64</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.page_size","title":"<code>page_size()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.paging_enabled","title":"<code>paging_enabled()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.phys_to_virt","title":"<code>phys_to_virt(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.Aarch64Ops.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps","title":"<code>ArchOps</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.page_size","title":"<code>page_size()</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.page_to_pfn","title":"<code>page_to_pfn(page)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.page_to_phys","title":"<code>page_to_phys(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.page_to_virt","title":"<code>page_to_virt(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.pfn_to_page","title":"<code>pfn_to_page(phys)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.pfn_to_virt","title":"<code>pfn_to_virt(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.phys_to_page","title":"<code>phys_to_page(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.phys_to_virt","title":"<code>phys_to_virt(phys)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.virt_to_page","title":"<code>virt_to_page(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.virt_to_pfn","title":"<code>virt_to_pfn(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.ArchOps.virt_to_phys","title":"<code>virt_to_phys(virt)</code>  <code>abstractmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops","title":"<code>i386Ops</code>","text":"<p>               Bases: <code>x86Ops</code></p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.START_KERNEL_map","title":"<code>START_KERNEL_map = self._PAGE_OFFSET</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.page_offset","title":"<code>page_offset: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.page_shift","title":"<code>page_shift: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.ptr_size","title":"<code>ptr_size: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.i386Ops.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops","title":"<code>x86Ops</code>","text":"<p>               Bases: <code>ArchOps</code></p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.page_offset","title":"<code>page_offset: int</code>  <code>abstractmethod</code> <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.page_shift","title":"<code>page_shift: int</code>  <code>abstractmethod</code> <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.ptr_size","title":"<code>ptr_size: int</code>  <code>abstractmethod</code> <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.page_size","title":"<code>page_size()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.paging_enabled","title":"<code>paging_enabled()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86Ops.phys_to_virt","title":"<code>phys_to_virt(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops","title":"<code>x86_64Ops</code>","text":"<p>               Bases: <code>x86Ops</code></p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.START_KERNEL_map","title":"<code>START_KERNEL_map = 18446744071562067968</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.STRUCT_PAGE_SHIFT","title":"<code>STRUCT_PAGE_SHIFT = int(math.log2(self.STRUCT_PAGE_SIZE))</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.STRUCT_PAGE_SIZE","title":"<code>STRUCT_PAGE_SIZE = pwndbg.aglib.typeinfo.load('struct page').sizeof</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.VMEMMAP_START","title":"<code>VMEMMAP_START = 18434359174734282752</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.page_offset","title":"<code>page_offset: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.page_shift","title":"<code>page_shift: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.phys_base","title":"<code>phys_base = 16777216</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.ptr_size","title":"<code>ptr_size: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.cpu_feature_capability","title":"<code>cpu_feature_capability(feature)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.uses_5lvl_paging","title":"<code>uses_5lvl_paging()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.x86_64Ops.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.BIT","title":"<code>BIT(shift)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.arch_ops","title":"<code>arch_ops()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.get_first_kernel_ro","title":"<code>get_first_kernel_ro()</code>","text":"<p>Returns the first kernel mapping which contains the linux_banner</p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.get_idt_entries","title":"<code>get_idt_entries()</code>","text":"<p>Retrieves the IDT entries from memory.</p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.has_debug_syms","title":"<code>has_debug_syms()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.is_kaslr_enabled","title":"<code>is_kaslr_enabled()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.kbase","title":"<code>kbase()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.kcmdline","title":"<code>kcmdline()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.kconfig","title":"<code>kconfig()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.krelease","title":"<code>krelease()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.kversion","title":"<code>kversion()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.load_kconfig","title":"<code>load_kconfig()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.nproc","title":"<code>nproc()</code>","text":"<p>Returns the number of processing units available, similar to nproc(1)</p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.num_numa_nodes","title":"<code>num_numa_nodes()</code>","text":"<p>Returns the number of NUMA nodes that are online on the system</p>"},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.page_size","title":"<code>page_size()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.page_to_phys","title":"<code>page_to_phys(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.page_to_virt","title":"<code>page_to_virt(page)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.paging_enabled","title":"<code>paging_enabled()</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.pfn_to_virt","title":"<code>pfn_to_virt(pfn)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.phys_to_page","title":"<code>phys_to_page(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.phys_to_virt","title":"<code>phys_to_virt(phys)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.requires_debug_syms","title":"<code>requires_debug_syms(default=None)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.requires_kconfig","title":"<code>requires_kconfig(default=None)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.virt_to_page","title":"<code>virt_to_page(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.virt_to_pfn","title":"<code>virt_to_pfn(virt)</code>","text":""},{"location":"source/aglib/kernel/__init__/#pwndbg.aglib.kernel.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/aglib/kernel/kallsyms/","title":"Kallsyms","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms","title":"<code>Kallsyms</code>","text":"<ul> <li>linux_banner &gt;= 6.4</li> <li>... &lt;= 6.4</li> <li>kallsyms_offsets</li> <li>kallsyms_relative_base</li> <li>kallsyms_num_syms</li> <li>kallsyms_names</li> <li>kallsyms_markers</li> <li>kallsyms_token_table</li> <li>kallsyms_token_index</li> <li>kallsyms_offsets &gt;= 6.4</li> <li>kallsyms_relative_base &gt;= 6.4</li> </ul>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.is_big_endian","title":"<code>is_big_endian = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.is_offsets","title":"<code>is_offsets = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.is_uncompressed","title":"<code>is_uncompressed = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.kallsyms","title":"<code>kallsyms: Dict[str, Tuple[int, str]] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.kbase","title":"<code>kbase = pwndbg.aglib.kernel.kbase()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.kernel_addresses","title":"<code>kernel_addresses = self.get_kernel_addresses()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.kernel_ro_mem","title":"<code>kernel_ro_mem = pwndbg.aglib.memory.read(mapping.vaddr, mapping.memsz)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.kernel_version","title":"<code>kernel_version = pwndbg.aglib.kernel.krelease()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.markers","title":"<code>markers = self.find_markers_uncompressed()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.names","title":"<code>names = self.find_names()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.num_syms","title":"<code>num_syms = self.find_num_syms()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.offsets","title":"<code>offsets = self.find_offsets()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.r_base","title":"<code>r_base = mapping.vaddr</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.rbase_offset","title":"<code>rbase_offset = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.token_index","title":"<code>token_index = self.find_token_index()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.token_table","title":"<code>token_table = self.find_token_table()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_markers","title":"<code>find_markers()</code>","text":"<p>This function searches for the kallsyms_markers structure in the kernel memory starting at kallsyms_token_table and search backwards. The markers table contains offsets to the corresponding symbol name for each kernel symbol. The kallsyms_markers table is typically located immediately before the kallsyms_token_table in the kernel's read-only data section. Example structure: 0xffffffff827b2430:     0x00000000      0x00000b2a      0x00001762      0x000023f6 0xffffffff827b2440:     0x00002fe4      0x00003c9d      0x0000487c      0x000056fd 0xffffffff827b2450:     0x00006597      0x000073b9      0x000081be      0x00008f21 0xffffffff827b2460:     0x00009c94      0x0000a958      0x0000b632      0x0000c193 0xffffffff827b2470:     0x0000ce0b      0x0000db98      0x0000ea3e      0x0000f80a 0xffffffff827b2480:     0x000105be      0x000112d3      0x00011f8c      0x00012d75 0xffffffff827b2490:     0x0001384d      0x0001446e      0x00015138      0x00015d8c</p>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_markers_uncompressed","title":"<code>find_markers_uncompressed()</code>","text":"<p>This function searches for the kallsyms_markers structure in the kernel memory Original Source: https://github.com/marin-m/vmlinux-to-elf/blob/master/vmlinux_to_elf/kallsyms_finder.py</p>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_names","title":"<code>find_names()</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_names_uncompressed","title":"<code>find_names_uncompressed()</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_num_syms","title":"<code>find_num_syms()</code>","text":"<p>This function searches for the kallsyms_num_syms variable in the kernel memory starting at kallsyms_markers. The kallsyms_num_syms holds the number of kernel symbols in the symbol table. The kallsyms_num_syms variable is typically located before the kallsyms_names table in the kernel's read-only data section. In newer kernel versions the kallsyms_num_syms is immediately behind the linux_banner and in older version its behind kallsyms_base_relative or kallsyms_addresses (it depends on CONFIG_KALLSYMS_BASE_RELATIVE y/n)</p>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_offsets","title":"<code>find_offsets()</code>","text":"<p>This function searches for the kallsyms_offsets/kallsyms_addresses table in the kernel memory starting at kallsyms_token_index. The offsets/addresses table containts offsets / addresses of each symbol in the kernel. The kallsyms_addresses is typically located before the kallsyms_num_syms variable in the kernel's read-only data section. Example structure: 0xffffffff827b3488:     0x00000000      0x00000000      0x00001000      0x00002000 0xffffffff827b3498:     0x00006000      0x0000b000      0x0000c000      0x0000d000 0xffffffff827b34a8:     0x00015000      0x00015008      0x00015010      0x00015018 0xffffffff827b34b8:     0x00015020      0x00015022      0x00015030      0x00015050 0xffffffff827b34c8:     0x00015450      0x00015460      0x00015860      0x00015888 0xffffffff827b34d8:     0x00015890      0x00015898      0x000158a0      0x000159c0</p>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_relative_base","title":"<code>find_relative_base()</code>","text":"<p>This function searches for the kallsyms_relative_base variable in the kernel memory. The relative base is used to calculate the actual virtual addresses of symbols from their offsets in the kallsyms_offsets table. The kallsyms_relative_base variable is typically located after the kallsyms_offsets table in the kernel's read-only data section.</p>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_token_index","title":"<code>find_token_index()</code>","text":"<p>This function searches for the kallsyms_token_index structure in the kernel memory starting at kallsyms_token_table. The token index table provides offsets into the kallsyms_token_table for each 256 byte-valued sub-table. The kallsyms_token_index is typically located immediately after the kallsyms_token_table in the kernel's read-only data section. Example structure: 0xffffffff827b3288:     0x0000  0x0003  0x0007  0x000a  0x000f  0x0018  0x001f  0x0023 0xffffffff827b3298:     0x0027  0x0031  0x0035  0x0038  0x003b  0x0043  0x0047  0x004a 0xffffffff827b32a8:     0x004f  0x0053  0x0056  0x0059  0x005d  0x0061  0x0067  0x006b 0xffffffff827b32b8:     0x006e  0x0071  0x0076  0x007c  0x0080  0x0088  0x008b  0x008f 0xffffffff827b32c8:     0x0094  0x0098  0x009b  0x009f  0x00a3  0x00a8  0x00ab  0x00b0</p>"},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.find_token_table","title":"<code>find_token_table()</code>","text":"<p>This function searches for the kallsyms_token_table structure in the kernel memory. The kallsyms_token_table contains 256 zero-terminated tokens from which symbol names are built. Example structure: 0xffffffff827b2f00:     \"mm\" 0xffffffff827b2f03:     \"tim\" 0xffffffff827b2f07:     \"bu\" 0xffffffff827b2f0a:     \"ode_\" 0xffffffff827b2f0f:     \"robestub\"  0xffffffff827b2fdb:     \"0\" 0xffffffff827b2fdd:     \"1\" 0xffffffff827b2fdf:     \"2\" 0xffffffff827b2fe1:     \"3\" 0xffffffff827b2fe3:     \"4\" 0xffffffff827b2fe5:     \"5\" 0xffffffff827b2fe7:     \"6\" 0xffffffff827b2fe9:     \"7\" 0xffffffff827b2feb:     \"8\" 0xffffffff827b2fed:     \"9\""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.get_kernel_addresses","title":"<code>get_kernel_addresses()</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.get_token_table","title":"<code>get_token_table()</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.Kallsyms.parse_symbol_table","title":"<code>parse_symbol_table()</code>","text":""},{"location":"source/aglib/kernel/kallsyms/#pwndbg.aglib.kernel.kallsyms.get","title":"<code>get()</code>","text":""},{"location":"source/aglib/kernel/macros/","title":"Macros","text":""},{"location":"source/aglib/kernel/macros/#pwndbg.aglib.kernel.macros.compound_head","title":"<code>compound_head(page)</code>","text":"<p>returns the head page of compound pages</p>"},{"location":"source/aglib/kernel/macros/#pwndbg.aglib.kernel.macros.container_of","title":"<code>container_of(ptr, typename, fieldname)</code>","text":""},{"location":"source/aglib/kernel/macros/#pwndbg.aglib.kernel.macros.for_each_entry","title":"<code>for_each_entry(head, typename, field)</code>","text":""},{"location":"source/aglib/kernel/macros/#pwndbg.aglib.kernel.macros.swab","title":"<code>swab(x)</code>","text":""},{"location":"source/aglib/kernel/rbtree/","title":"Rbtree","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_node_type","title":"<code>rb_node_type: pwndbg.dbg_mod.Type = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_root_type","title":"<code>rb_root_type: pwndbg.dbg_mod.Type = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.for_each_rb_entry","title":"<code>for_each_rb_entry(root, typename, fieldname)</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.init","title":"<code>init()</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_empty_node","title":"<code>rb_empty_node(node)</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_first","title":"<code>rb_first(root)</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_last","title":"<code>rb_last(root)</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_next","title":"<code>rb_next(node)</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_parent","title":"<code>rb_parent(node)</code>","text":""},{"location":"source/aglib/kernel/rbtree/#pwndbg.aglib.kernel.rbtree.rb_prev","title":"<code>rb_prev(node)</code>","text":""},{"location":"source/aglib/kernel/slab/","title":"Slab","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.OO_MASK","title":"<code>OO_MASK = 1 &lt;&lt; OO_SHIFT - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.OO_SHIFT","title":"<code>OO_SHIFT = 16</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache","title":"<code>CpuCache</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.active_slab","title":"<code>active_slab: Slab | None</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.address","title":"<code>address: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.cpu","title":"<code>cpu = cpu</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.freelist","title":"<code>freelist: Freelist</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.partial_slabs","title":"<code>partial_slabs: List[Slab]</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.slab_cache","title":"<code>slab_cache = slab_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.CpuCache.__init__","title":"<code>__init__(cpu_cache, slab_cache, cpu)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist","title":"<code>Freelist</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.offset","title":"<code>offset = offset</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.random","title":"<code>random = random</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.start_addr","title":"<code>start_addr = start_addr</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.__init__","title":"<code>__init__(start_addr, offset, random=0)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.__len__","title":"<code>__len__()</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Freelist.find_next","title":"<code>find_next(addr)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.NodeCache","title":"<code>NodeCache</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.NodeCache.address","title":"<code>address: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.NodeCache.node","title":"<code>node = node</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.NodeCache.partial_slabs","title":"<code>partial_slabs: List[Slab]</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.NodeCache.slab_cache","title":"<code>slab_cache = slab_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.NodeCache.__init__","title":"<code>__init__(node_cache, slab_cache, node)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab","title":"<code>Slab</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.cpu_cache","title":"<code>cpu_cache = cpu_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.free_objects","title":"<code>free_objects: Set[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.freelist","title":"<code>freelist: Freelist</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.freelists","title":"<code>freelists: List[Freelist]</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.frozen","title":"<code>frozen: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.inuse","title":"<code>inuse: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.is_partial","title":"<code>is_partial = is_partial</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.object_count","title":"<code>object_count: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.objects","title":"<code>objects: Generator[int, None, None]</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.pobjects","title":"<code>pobjects: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.slab_address","title":"<code>slab_address: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.slab_cache","title":"<code>slab_cache = slab_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.slabs","title":"<code>slabs: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.virt_address","title":"<code>virt_address: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.Slab.__init__","title":"<code>__init__(slab, cpu_cache, slab_cache, is_partial=False)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache","title":"<code>SlabCache</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.__oo_x","title":"<code>__oo_x: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.address","title":"<code>address: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.align","title":"<code>align: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.cpu_cache","title":"<code>cpu_cache: CpuCache</code>  <code>property</code>","text":"<p>returns cpu cache associated to current thread</p>"},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.cpu_caches","title":"<code>cpu_caches: Generator[CpuCache, None, None]</code>  <code>property</code>","text":"<p>returns cpu caches for all cpus</p>"},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.cpu_partial","title":"<code>cpu_partial: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.flags","title":"<code>flags: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.inuse","title":"<code>inuse: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.node_caches","title":"<code>node_caches: Generator[NodeCache, None, None]</code>  <code>property</code>","text":"<p>returns node caches for all NUMA nodes</p>"},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.object_size","title":"<code>object_size: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.offset","title":"<code>offset: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.oo_objects","title":"<code>oo_objects</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.oo_order","title":"<code>oo_order</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.random","title":"<code>random: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.size","title":"<code>size: int</code>  <code>property</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.SlabCache.__init__","title":"<code>__init__(slab_cache)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.caches","title":"<code>caches()</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.find_containing_slab_cache","title":"<code>find_containing_slab_cache(addr)</code>","text":"<p>Find the slab cache associated with the provided address.</p>"},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.get_cache","title":"<code>get_cache(target_name)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.get_flags_list","title":"<code>get_flags_list(flags)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.oo_objects","title":"<code>oo_objects(x)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.oo_order","title":"<code>oo_order(x)</code>","text":""},{"location":"source/aglib/kernel/slab/#pwndbg.aglib.kernel.slab.slab_struct_type","title":"<code>slab_struct_type()</code>","text":""},{"location":"source/aglib/kernel/vmmap/","title":"Vmmap","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_mode","title":"<code>kernel_vmmap_mode = pwndbg.config.add_param('kernel-vmmap', 'page-tables', 'the method to get vmmap information when debugging via QEMU kernel', help_docstring=\"kernel-vmmap can be:\\npage-tables    - read /proc/$qemu-pid/mem to parse kernel page tables to render vmmap\\nmonitor        - use QEMU's `monitor info mem` to render vmmap\\nnone           - disable vmmap rendering; useful if rendering is particularly slow\\n\\nNote that the page-tables method will require the QEMU kernel process to be on the same machine and within the same PID namespace. Running QEMU kernel and GDB in different Docker containers will not work. Consider running both containers with --pid=host (meaning they will see and so be able to interact with all processes on the machine).\\n\", param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['page-tables', 'monitor', 'none'])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.monitor_info_mem_not_warned","title":"<code>monitor_info_mem_not_warned = True</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine","title":"<code>QemuMachine</code>","text":"<p>               Bases: <code>Machine</code></p>"},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.file","title":"<code>file = os.open(f'/proc/{self.pid}/mem', os.O_RDONLY)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.pid","title":"<code>pid = QemuMachine.get_qemu_pid()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.__del__","title":"<code>__del__()</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.get_qemu_pid","title":"<code>get_qemu_pid()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.read_physical_memory","title":"<code>read_physical_memory(physical_address, length)</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.read_register","title":"<code>read_register(register_name)</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.QemuMachine.search_pids_for_file","title":"<code>search_pids_for_file(pids, filename)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap","title":"<code>kernel_vmmap()</code>","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem","title":"<code>kernel_vmmap_via_monitor_info_mem()</code>","text":"<p>Returns Linux memory maps information by parsing <code>monitor info mem</code> output from QEMU kernel GDB stub. Works only on X86/X64/RISC-V as this is what QEMU supports.</p> <p>Consider using the <code>kernel_vmmap_via_page_tables</code> method as it is probably more reliable/better.</p> <p>See also: https://github.com/pwndbg/pwndbg/pull/685 (TODO: revisit with future QEMU versions)</p>"},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem--example-output-from-the-command","title":"Example output from the command:","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem--pwndbg-monitor-info-mem","title":"pwndbg&gt; monitor info mem","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem--ffff903580000000-ffff903580099000-0000000000099000-rw","title":"ffff903580000000-ffff903580099000 0000000000099000 -rw","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem--ffff903580099000-ffff90358009b000-0000000000002000-r-","title":"ffff903580099000-ffff90358009b000 0000000000002000 -r-","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem--ffff90358009b000-ffff903582200000-0000000002165000-rw","title":"ffff90358009b000-ffff903582200000 0000000002165000 -rw","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_monitor_info_mem--ffff903582200000-ffff903582803000-0000000000603000-r-","title":"ffff903582200000-ffff903582803000 0000000000603000 -r-","text":""},{"location":"source/aglib/kernel/vmmap/#pwndbg.aglib.kernel.vmmap.kernel_vmmap_via_page_tables","title":"<code>kernel_vmmap_via_page_tables()</code>","text":""},{"location":"source/color/__init__/","title":"init","text":""},{"location":"source/color/__init__/#pwndbg.color.BLACK","title":"<code>BLACK = '\\x1b[30m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.BLUE","title":"<code>BLUE = '\\x1b[34m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.BOLD","title":"<code>BOLD = '\\x1b[1m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.CYAN","title":"<code>CYAN = '\\x1b[36m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.FOREGROUND","title":"<code>FOREGROUND = '\\x1b[39m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.GRAY","title":"<code>GRAY = '\\x1b[90m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.GREEN","title":"<code>GREEN = '\\x1b[32m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.GREY","title":"<code>GREY = '\\x1b[90m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_BLUE","title":"<code>LIGHT_BLUE = '\\x1b[94m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_CYAN","title":"<code>LIGHT_CYAN = '\\x1b[96m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_GRAY","title":"<code>LIGHT_GRAY = '\\x1b[37m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_GREEN","title":"<code>LIGHT_GREEN = '\\x1b[92m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_GREY","title":"<code>LIGHT_GREY = '\\x1b[37m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_PURPLE","title":"<code>LIGHT_PURPLE = '\\x1b[95m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_RED","title":"<code>LIGHT_RED = '\\x1b[91m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_YELLOW","title":"<code>LIGHT_YELLOW = '\\x1b[93m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.NORMAL","title":"<code>NORMAL = '\\x1b[0m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.PURPLE","title":"<code>PURPLE = '\\x1b[35m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.RED","title":"<code>RED = '\\x1b[31m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.UNDERLINE","title":"<code>UNDERLINE = '\\x1b[4m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.WHITE","title":"<code>WHITE = '\\x1b[97m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.YELLOW","title":"<code>YELLOW = '\\x1b[33m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ansi_escape_8bit","title":"<code>ansi_escape_8bit = re.compile('(?:\\\\x1B[@-Z\\\\\\\\-_]|[\\\\x80-\\\\x9A\\\\x9C-\\\\x9F]|(?:\\\\x1B\\\\[|\\\\x9B)[0-?]*[ -/]*[@-~])')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.disable_colors","title":"<code>disable_colors = theme.add_param('disable-colors', bool(os.environ.get('PWNDBG_DISABLE_COLORS')), 'whether to color the output or not')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.none","title":"<code>none = str</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorConfig","title":"<code>ColorConfig</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorConfig.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorConfig.__init__","title":"<code>__init__(namespace, params)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec","title":"<code>ColorParamSpec</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec.default","title":"<code>default: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec.doc","title":"<code>doc: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.black","title":"<code>black(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.blue","title":"<code>blue(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.bold","title":"<code>bold(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.colorize","title":"<code>colorize(x, color)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.cyan","title":"<code>cyan(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.foreground","title":"<code>foreground(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.generateColorFunction","title":"<code>generateColorFunction(config, _globals=globals())</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.generateColorFunctionInner","title":"<code>generateColorFunctionInner(old, new)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.gray","title":"<code>gray(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.green","title":"<code>green(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_blue","title":"<code>light_blue(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_cyan","title":"<code>light_cyan(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_gray","title":"<code>light_gray(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_green","title":"<code>light_green(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_purple","title":"<code>light_purple(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_red","title":"<code>light_red(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_yellow","title":"<code>light_yellow(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ljust_colored","title":"<code>ljust_colored(x, length, char=' ')</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.normal","title":"<code>normal(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.purple","title":"<code>purple(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.red","title":"<code>red(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.rjust_colored","title":"<code>rjust_colored(x, length, char=' ')</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.strip","title":"<code>strip(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.terminateWith","title":"<code>terminateWith(x, color)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.underline","title":"<code>underline(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.unstylize","title":"<code>unstylize(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.white","title":"<code>white(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.yellow","title":"<code>yellow(x)</code>","text":""},{"location":"source/color/context/","title":"Context","text":""},{"location":"source/color/context/#pwndbg.color.context.config_banner_color","title":"<code>config_banner_color = theme.add_color_param('banner-color', 'blue', 'color for banner line')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_banner_title","title":"<code>config_banner_title = theme.add_color_param('banner-title-color', 'none', 'color for banner title')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_comment","title":"<code>config_comment = theme.add_color_param('comment-color', 'gray', 'color for comment')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_bracket_color","title":"<code>config_flag_bracket_color = theme.add_color_param('context-flag-bracket-color', 'none', 'color for flags register (bracket)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_changed_color","title":"<code>config_flag_changed_color = theme.add_color_param('context-flag-changed-color', 'underline', 'color for flags register (flag changed)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_set_color","title":"<code>config_flag_set_color = theme.add_color_param('context-flag-set-color', 'green,bold', 'color for flags register (flag set)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_unset_color","title":"<code>config_flag_unset_color = theme.add_color_param('context-flag-unset-color', 'red', 'color for flags register (flag unset)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_value_color","title":"<code>config_flag_value_color = theme.add_color_param('context-flag-value-color', 'none', 'color for flags register (register value)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_highlight_color","title":"<code>config_highlight_color = theme.add_color_param('highlight-color', 'green,bold', 'color added to highlights like source/pc')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_prefix_color","title":"<code>config_prefix_color = theme.add_color_param('code-prefix-color', 'none', \"color for 'context code' command (prefix marker)\")</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_register_changed_color","title":"<code>config_register_changed_color = theme.add_color_param('context-register-changed-color', 'red', 'color for registers label (change marker)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_register_changed_marker","title":"<code>config_register_changed_marker = theme.add_param('context-register-changed-marker', '*', 'change marker for registers label')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_register_color","title":"<code>config_register_color = theme.add_color_param('context-register-color', 'bold', 'color for registers label')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.banner","title":"<code>banner(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.banner_title","title":"<code>banner_title(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.comment","title":"<code>comment(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_bracket","title":"<code>flag_bracket(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_changed","title":"<code>flag_changed(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_set","title":"<code>flag_set(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_unset","title":"<code>flag_unset(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_value","title":"<code>flag_value(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.format_flags","title":"<code>format_flags(value, flags, last=None)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.highlight","title":"<code>highlight(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.prefix","title":"<code>prefix(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.register","title":"<code>register(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.register_changed","title":"<code>register_changed(x)</code>","text":""},{"location":"source/color/disasm/","title":"Disasm","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.MIN_SPACING","title":"<code>MIN_SPACING = 5</code>  <code>module-attribute</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.WHITESPACE_LIMIT","title":"<code>WHITESPACE_LIMIT = 20</code>  <code>module-attribute</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.c","title":"<code>c = ColorConfig('disasm', [ColorParamSpec('branch', 'bold', 'color for disasm (branch/call instruction)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.instructions_and_padding","title":"<code>instructions_and_padding(instructions)</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.one_instruction","title":"<code>one_instruction(ins)</code>","text":""},{"location":"source/color/enhance/","title":"Enhance","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_comment_color","title":"<code>config_comment_color = theme.add_color_param('enhance-comment-color', 'none', 'color of value enhance (comment)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_integer_color","title":"<code>config_integer_color = theme.add_color_param('enhance-integer-value-color', 'none', 'color of value enhance (integer)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_string_color","title":"<code>config_string_color = theme.add_color_param('enhance-string-value-color', 'none', 'color of value enhance (string)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_unknown_color","title":"<code>config_unknown_color = theme.add_color_param('enhance-unknown-color', 'none', 'color of value enhance (unknown value)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.comment","title":"<code>comment(x)</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.integer","title":"<code>integer(x)</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.string","title":"<code>string(x)</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.unknown","title":"<code>unknown(x)</code>","text":""},{"location":"source/color/hexdump/","title":"Hexdump","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_address","title":"<code>config_address = theme.add_color_param('hexdump-address-color', 'none', 'color for hexdump command (address label)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_highlight_group_lsb","title":"<code>config_highlight_group_lsb = theme.add_param('hexdump-highlight-group-lsb', 'underline', 'highlight LSB of each group. Applies only if hexdump-use-big-endian actually changes byte order.')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_normal","title":"<code>config_normal = theme.add_color_param('hexdump-normal-color', 'none', 'color for hexdump command (normal bytes)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_offset","title":"<code>config_offset = theme.add_color_param('hexdump-offset-color', 'none', 'color for hexdump command (offset label)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_printable","title":"<code>config_printable = theme.add_color_param('hexdump-printable-color', 'bold', 'color for hexdump command (printable characters)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_separator","title":"<code>config_separator = theme.add_color_param('hexdump-separator-color', 'none', 'color for hexdump command (group separator)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_special","title":"<code>config_special = theme.add_color_param('hexdump-special-color', 'yellow', 'color for hexdump command (special bytes)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_zero","title":"<code>config_zero = theme.add_color_param('hexdump-zero-color', 'red', 'color for hexdump command (zero bytes)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.address","title":"<code>address(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.highlight_group_lsb","title":"<code>highlight_group_lsb(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.normal","title":"<code>normal(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.offset","title":"<code>offset(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.printable","title":"<code>printable(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.separator","title":"<code>separator(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.special","title":"<code>special(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.zero","title":"<code>zero(x)</code>","text":""},{"location":"source/color/memory/","title":"Memory","text":""},{"location":"source/color/memory/#pwndbg.color.memory.ColorFunction","title":"<code>ColorFunction = Callable[[str], str]</code>  <code>module-attribute</code>","text":""},{"location":"source/color/memory/#pwndbg.color.memory.c","title":"<code>c = ColorConfig('memory', [ColorParamSpec('stack', 'yellow', 'color for stack memory'), ColorParamSpec('heap', 'blue', 'color for heap memory'), ColorParamSpec('code', 'red', 'color for executable memory'), ColorParamSpec('data', 'purple', 'color for all other writable memory'), ColorParamSpec('rodata', 'normal', 'color for all read only memory'), ColorParamSpec('wx', 'underline', 'color added to all WX memory'), ColorParamSpec('guard', 'cyan', 'color added to all guard pages (no perms)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/color/memory/#pwndbg.color.memory.attempt_colorized_symbol","title":"<code>attempt_colorized_symbol(address)</code>","text":"<p>Convert address to colorized symbol (if symbol is there), else None</p>"},{"location":"source/color/memory/#pwndbg.color.memory.get","title":"<code>get(address, text=None, prefix=None)</code>","text":"<p>Returns a colorized string representing the provided address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int</code> <code>| pwndbg.dbg_mod.Value</code> <p>Address to look up</p> required <code>text(str</code> <code>| None</code> <p>Optional text to use in place of the address in the return value string.</p> required <code>prefix(str</code> <code>| None</code> <p>Optional text to set at beginning in the return value string.</p> required"},{"location":"source/color/memory/#pwndbg.color.memory.get_address_and_symbol","title":"<code>get_address_and_symbol(address)</code>","text":"<p>Convert and colorize address 0x7ffff7fcecd0 to string <code>0x7ffff7fcecd0 (_dl_fini)</code> If no symbol exists for the address, return colorized address</p>"},{"location":"source/color/memory/#pwndbg.color.memory.get_address_or_symbol","title":"<code>get_address_or_symbol(address)</code>","text":"<p>Convert and colorize address to symbol if it can be resolved, else return colorized address</p>"},{"location":"source/color/memory/#pwndbg.color.memory.legend","title":"<code>legend()</code>","text":""},{"location":"source/color/message/","title":"Message","text":""},{"location":"source/color/message/#pwndbg.color.message.config_breakpoint_color","title":"<code>config_breakpoint_color = theme.add_color_param('message-breakpoint-color', 'yellow', 'color of breakpoint messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_debug_color","title":"<code>config_debug_color = theme.add_color_param('message-debug-color', 'blue', 'color of debug messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_error_color","title":"<code>config_error_color = theme.add_color_param('message-error-color', 'red', 'color of error messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_exit_color","title":"<code>config_exit_color = theme.add_color_param('message-exit-color', 'red', 'color of exit messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_hint_color","title":"<code>config_hint_color = theme.add_color_param('message-hint-color', 'yellow', 'color of hint and marker messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_info_color","title":"<code>config_info_color = theme.add_color_param('message-info-color', 'white', 'color of info messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_notice_color","title":"<code>config_notice_color = theme.add_color_param('message-notice-color', 'purple', 'color of notice messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_prompt_alive_color","title":"<code>config_prompt_alive_color: pwndbg.lib.config.Parameter = theme.add_color_param('prompt-alive-color', 'bold,green', 'prompt alive color')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_prompt_color","title":"<code>config_prompt_color: pwndbg.lib.config.Parameter = theme.add_color_param('prompt-color', 'bold,red', 'prompt color')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_signal_color","title":"<code>config_signal_color = theme.add_color_param('message-signal-color', 'bold,red', 'color of signal messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_status_off_color","title":"<code>config_status_off_color = theme.add_color_param('message-status-off-color', 'red', 'color of off status messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_status_on_color","title":"<code>config_status_on_color = theme.add_color_param('message-status-on-color', 'green', 'color of on status messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_success_color","title":"<code>config_success_color = theme.add_color_param('message-success-color', 'green', 'color of success messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_system_color","title":"<code>config_system_color = theme.add_color_param('message-system-color', 'light-red', 'color of system messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_warning_color","title":"<code>config_warning_color = theme.add_color_param('message-warning-color', 'yellow', 'color of warning messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.alive_prompt","title":"<code>alive_prompt(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.breakpoint","title":"<code>breakpoint(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.debug","title":"<code>debug(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.error","title":"<code>error(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.exit","title":"<code>exit(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.hint","title":"<code>hint(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.info","title":"<code>info(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.notice","title":"<code>notice(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.off","title":"<code>off(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.on","title":"<code>on(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.prompt","title":"<code>prompt(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.readline_escape","title":"<code>readline_escape(func_message, text)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.signal","title":"<code>signal(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.success","title":"<code>success(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.system","title":"<code>system(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.warn","title":"<code>warn(msg)</code>","text":""},{"location":"source/color/syntax_highlight/","title":"Syntax highlight","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.formatter","title":"<code>formatter = pygments.formatters.Terminal256Formatter(style=str(style))</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.lexer_cache","title":"<code>lexer_cache: Dict[str, Any] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.pwntools_lexer","title":"<code>pwntools_lexer = PwntoolsLexer()</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.style","title":"<code>style = theme.add_param('syntax-highlight-style', 'monokai', 'Source code / assembly syntax highlight stylename of pygments module')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.check_style","title":"<code>check_style()</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.syntax_highlight","title":"<code>syntax_highlight(code, filename='.asm')</code>","text":""},{"location":"source/color/telescope/","title":"Telescope","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset_color","title":"<code>offset_color = theme.add_color_param('telescope-offset-color', 'normal', 'color of the telescope command (offset prefix)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset_delimiter_color","title":"<code>offset_delimiter_color = theme.add_color_param('telescope-offset-delimiter-color', 'normal', 'color of the telescope command (offset delimiter)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset_separator_color","title":"<code>offset_separator_color = theme.add_color_param('telescope-offset-separator-color', 'normal', 'color of the telescope command (offset separator)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.register_color","title":"<code>register_color = theme.add_color_param('telescope-register-color', 'bold', 'color of the telescope command (register)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.repeating_marker_color","title":"<code>repeating_marker_color = theme.add_color_param('telescope-repeating-marker-color', 'normal', 'color of the telescope command (repeating values marker)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.delimiter","title":"<code>delimiter(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset","title":"<code>offset(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.register","title":"<code>register(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.repeating_marker","title":"<code>repeating_marker(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.separator","title":"<code>separator(x)</code>","text":""},{"location":"source/color/theme/","title":"Theme","text":""},{"location":"source/color/theme/#pwndbg.color.theme.ColorParameter","title":"<code>ColorParameter</code>","text":"<p>               Bases: <code>Parameter</code></p>"},{"location":"source/color/theme/#pwndbg.color.theme.add_color_param","title":"<code>add_color_param(name, default, set_show_doc)</code>","text":""},{"location":"source/color/theme/#pwndbg.color.theme.add_param","title":"<code>add_param(name, default, set_show_doc, color_param=False)</code>","text":""},{"location":"source/commands/__init__/","title":"init","text":""},{"location":"source/commands/__init__/#pwndbg.commands.GDB_BUILTIN_COMMANDS","title":"<code>GDB_BUILTIN_COMMANDS = pwndbg.dbg.commands()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.command_names","title":"<code>command_names: Set[str] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.commands","title":"<code>commands: List[Command] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.pwndbg_is_reloading","title":"<code>pwndbg_is_reloading = False</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand","title":"<code>ArgparsedCommand</code>","text":"<p>Adds documentation and offloads parsing for a Command via argparse</p>"},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.aliases","title":"<code>aliases = aliases</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.category","title":"<code>category = category</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.parser","title":"<code>parser = argparse.ArgumentParser(description=parser_or_desc)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.__call__","title":"<code>__call__(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.__init__","title":"<code>__init__(parser_or_desc, aliases=[], command_name=None, category=CommandCategory.MISC)</code>","text":"<p>:param parser_or_desc: <code>argparse.ArgumentParser</code> instance or <code>str</code></p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command","title":"<code>Command</code>","text":"<p>Generic command wrapper</p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command.__name__","title":"<code>__name__ = command_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.aliases","title":"<code>aliases = aliases</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.builtin_override_whitelist","title":"<code>builtin_override_whitelist: Set[str] = {'up', 'down', 'search', 'pwd', 'start', 'ignore'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.category","title":"<code>category = category</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.doc","title":"<code>doc = doc</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.function","title":"<code>function = function</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.handle","title":"<code>handle = pwndbg.dbg.add_command(command_name, _handler, doc)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.history","title":"<code>history: Dict[int, str] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.is_alias","title":"<code>is_alias = is_alias</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.repeat","title":"<code>repeat = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.shell","title":"<code>shell = shell</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.__init__","title":"<code>__init__(function, prefix=False, command_name=None, shell=False, is_alias=False, aliases=[], category=CommandCategory.MISC, doc=None)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.check_repeated","title":"<code>check_repeated(argument, from_tty)</code>","text":"<p>Keep a record of all commands which come from the TTY.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this command was executed by the user just hitting \"enter\".</p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command.invoke","title":"<code>invoke(argument, from_tty)</code>","text":"<p>Invoke the command with an argument string</p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command.split_args","title":"<code>split_args(argument)</code>","text":"<p>Split a command-line string from the user into arguments.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>A <code>(tuple, dict)</code>, in the form of <code>*args, **kwargs</code>.</p> <code>Dict[Any, Any]</code> <p>The contents of the tuple/dict are undefined.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory","title":"<code>CommandCategory</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.BREAKPOINT","title":"<code>BREAKPOINT = 'Breakpoint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.CONTEXT","title":"<code>CONTEXT = 'Context'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.DEV","title":"<code>DEV = 'Developer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.DISASS","title":"<code>DISASS = 'Disassemble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.INTEGRATIONS","title":"<code>INTEGRATIONS = 'Integrations'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.JEMALLOC","title":"<code>JEMALLOC = 'jemalloc Heap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.KERNEL","title":"<code>KERNEL = 'Kernel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.LINUX","title":"<code>LINUX = 'Linux/libc/ELF'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.MEMORY","title":"<code>MEMORY = 'Memory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.MISC","title":"<code>MISC = 'Misc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.NEXT","title":"<code>NEXT = 'Step/Next/Continue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.PROCESS","title":"<code>PROCESS = 'Process'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.PTMALLOC2","title":"<code>PTMALLOC2 = 'GLibc ptmalloc2 Heap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.PWNDBG","title":"<code>PWNDBG = 'pwndbg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.REGISTER","title":"<code>REGISTER = 'Register'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.SHELL","title":"<code>SHELL = 'Shell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.STACK","title":"<code>STACK = 'Stack'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.START","title":"<code>START = 'Start'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.WINDBG","title":"<code>WINDBG = 'WinDbg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.AddressExpr","title":"<code>AddressExpr(s)</code>","text":"<p>Parses an address expression. Returns an int.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.HexOrAddressExpr","title":"<code>HexOrAddressExpr(s)</code>","text":"<p>Parses string as hexadecimal int or an address expression. Returns an int. (e.g. '1234' will return 0x1234)</p>"},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenHeapIsInitialized","title":"<code>OnlyWhenHeapIsInitialized(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenLocal","title":"<code>OnlyWhenLocal(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenPagingEnabled","title":"<code>OnlyWhenPagingEnabled(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenRunning","title":"<code>OnlyWhenRunning(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenUserspace","title":"<code>OnlyWhenUserspace(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":"<p>Decorates function to work only with the specified archictectures.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithDbg","title":"<code>OnlyWithDbg(*dbg_names)</code>","text":"<p>Decorates function to work only with the specified debugger.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithFile","title":"<code>OnlyWithFile(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithKernelDebugSyms","title":"<code>OnlyWithKernelDebugSyms(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithResolvedHeapSyms","title":"<code>OnlyWithResolvedHeapSyms(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithTcache","title":"<code>OnlyWithTcache(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.fix","title":"<code>fix(arg, sloppy=False, quiet=True, reraise=False)</code>","text":"<p>Fix a single command-line argument coming from the CLI.</p> <p>Parameters:</p> Name Type Description Default <code>arg(str)</code> <p>Original string representation (e.g. '0', '\\(rax', '\\)rax+44')</p> required <code>sloppy(bool)</code> <p>If <code>arg</code> cannot be evaluated, return <code>arg</code>. (default: False)</p> required <code>quiet(bool)</code> <p>If an error occurs, suppress it. (default: True)</p> required <code>reraise(bool)</code> <p>If an error occurs, raise the exception. (default: False)</p> required <p>Returns:</p> Type Description <code>str | Value | None</code> <p>Ideally a <code>Value</code> object.  May return a <code>str</code> if <code>sloppy==True</code>.</p> <code>str | Value | None</code> <p>May return <code>None</code> if <code>sloppy == False and reraise == False</code>.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.fix_int","title":"<code>fix_int(*a, **kw)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.fix_int_reraise","title":"<code>fix_int_reraise(*a, **kw)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.fix_reraise","title":"<code>fix_reraise(*a, **kw)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.load_commands","title":"<code>load_commands()</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.sloppy_gdb_parse","title":"<code>sloppy_gdb_parse(s)</code>","text":"<p>This function should be used as <code>argparse.ArgumentParser</code> .add_argument method's <code>type</code> helper.</p> <p>This makes the type being parsed as gdb value and if that parsing fails, a string is returned.</p> <p>:param s: String. :return: Whatever gdb.parse_and_eval returns or string.</p>"},{"location":"source/commands/ai/","title":"Ai","text":"<p>This command sends information on the current debugging context to OpenAI's GPT-3 large language model and asks it a question supplied by the user. It then displays GPT-3's response to that question to the user.</p>"},{"location":"source/commands/ai/#pwndbg.commands.ai.dummy","title":"<code>dummy = False</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_answer","title":"<code>last_answer: List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_command","title":"<code>last_command = None</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_pc","title":"<code>last_pc = None</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_question","title":"<code>last_question: List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.parser","title":"<code>parser = argparse.ArgumentParser(description='Ask GPT-3 a question about the current debugging context.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.verbosity","title":"<code>verbosity = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.ai","title":"<code>ai(question, model, temperature, max_tokens, verbose, list_models=False, command=None)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.build_command_prompt_body","title":"<code>build_command_prompt_body(command)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.build_context_prompt_body","title":"<code>build_context_prompt_body()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.build_prompt","title":"<code>build_prompt(question, command=None)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.flatten_prompt","title":"<code>flatten_prompt(conversation)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.get_anthropic_api_key","title":"<code>get_anthropic_api_key()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.get_openai_api_key","title":"<code>get_openai_api_key()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.get_openai_models","title":"<code>get_openai_models()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query","title":"<code>query(prompt, model='text-davinci-003', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query_anthropic","title":"<code>query_anthropic(prompt, model='claude-v1', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query_openai_chat","title":"<code>query_openai_chat(prompt, model='gpt-3.5-turbo', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query_openai_completions","title":"<code>query_openai_completions(prompt, model='text-davinci-003', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.set_dummy_mode","title":"<code>set_dummy_mode(d=True)</code>","text":""},{"location":"source/commands/argv/","title":"Argv","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints out the contents of the environment.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argc","title":"<code>argc()</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argv","title":"<code>argv(i=None)</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.envp","title":"<code>envp(name=None)</code>","text":"<p>Prints out the contents of the environment.</p>"},{"location":"source/commands/aslr/","title":"Aslr","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.options","title":"<code>options = {'on': 'off', 'off': 'on'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nCheck the current ASLR status, or turn it on/off.\\n\\nDoes not take effect until the program is restarted.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.aslr","title":"<code>aslr(state=None)</code>","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.check_aslr","title":"<code>check_aslr()</code>","text":"<p>Detects the ASLR status. Returns True, False or None.</p> <p>None is returned when we can't detect ASLR.</p>"},{"location":"source/commands/asm/","title":"Asm","text":""},{"location":"source/commands/asm/#pwndbg.commands.asm.input_group","title":"<code>input_group = parser.add_mutually_exclusive_group(required=True)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/asm/#pwndbg.commands.asm.parser","title":"<code>parser = argparse.ArgumentParser(description='Assemble shellcode into bytes')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/asm/#pwndbg.commands.asm.asm","title":"<code>asm(shellcode, format, arch, avoid, infile)</code>","text":""},{"location":"source/commands/attachp/","title":"Attachp","text":""},{"location":"source/commands/attachp/#pwndbg.commands.attachp.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Attaches to a given pid, process name, process found with partial argv match or to a device file.\\n\\nThis command wraps the original GDB `attach` command to add the ability\\nto debug a process with a given name or partial name match. In such cases,\\nthe process identifier is fetched via the `pidof &lt;name&gt;` command first. If no\\nmatches are found, then it uses the `ps -eo pid,args` command to search for\\npartial name matches.\\n\\nOriginal GDB attach command help:\\n    Attach to a process or file outside of GDB.\\n    This command attaches to another target, of the same type as your last\\n    \"target\" command (\"info files\" will show your target stack).\\n    The command may take as argument a process id or a device file.\\n    For a process id, you must have permission to send the process a signal,\\n    and it must have the same effective uid as the debugger.\\n    When using \"attach\" with a process id, the debugger finds the\\n    program running in the process, looking first in the current working\\n    directory, or (if not found there) using the source file search path\\n    (see the \"directory\" command).  You can also use the \"file\" command\\n    to specify the program, and to load its symbol table.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/attachp/#pwndbg.commands.attachp.attachp","title":"<code>attachp(target, no_truncate, retry, all, user=None)</code>","text":""},{"location":"source/commands/attachp/#pwndbg.commands.attachp.find_pids","title":"<code>find_pids(target, user, all)</code>","text":""},{"location":"source/commands/auxv/","title":"Auxv","text":""},{"location":"source/commands/auxv/#pwndbg.commands.auxv.auxv","title":"<code>auxv()</code>","text":""},{"location":"source/commands/auxv/#pwndbg.commands.auxv.auxv_explore","title":"<code>auxv_explore()</code>","text":""},{"location":"source/commands/binder/","title":"Binder","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.addrc","title":"<code>addrc = C.green</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.entry_field_names","title":"<code>entry_field_names = {'waiting_threads': 'waiting_thread_node', 'todo': 'entry', 'refs': 'node_entry'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.fieldnamec","title":"<code>fieldnamec = C.blue</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.fieldvaluec","title":"<code>fieldvaluec = C.yellow</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.node_types","title":"<code>node_types = {'waiting_threads': 'struct binder_thread', 'todo': 'struct binder_work', 'refs': 'struct binder_ref', 'threads': 'struct binder_thread', 'nodes': 'struct binder_node', 'refs_by_node': 'struct binder_ref'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.parser","title":"<code>parser = argparse.ArgumentParser(description='Show Android Binder information')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.rb_node_field_names","title":"<code>rb_node_field_names = {'threads': 'rb_node', 'nodes': 'rb_node', 'refs_by_node': 'rb_node_node'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.typenamec","title":"<code>typenamec = C.red</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor","title":"<code>BinderVisitor</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.addr","title":"<code>addr = pwndbg.aglib.memory.get_typed_pointer_value('struct hlist_head', procs_addr)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.indent","title":"<code>indent = IndentContextManager()</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.__init__","title":"<code>__init__(procs_addr)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_list","title":"<code>format_list(field, value, typename)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_node","title":"<code>format_node(node)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_proc","title":"<code>format_proc(proc, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_rb_tree","title":"<code>format_rb_tree(field, value)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_ref","title":"<code>format_ref(ref, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_spinlock","title":"<code>format_spinlock(lock)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_thread","title":"<code>format_thread(thread, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_transaction","title":"<code>format_transaction(transaction, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_work","title":"<code>format_work(work)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.print_object","title":"<code>print_object(obj)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.visit","title":"<code>visit()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager","title":"<code>IndentContextManager</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.indent","title":"<code>indent = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.__exit__","title":"<code>__exit__(exc_type, exc_value, exc_tb)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.binder","title":"<code>binder()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.for_each_hlist_entry","title":"<code>for_each_hlist_entry(head, typename, field)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.for_each_transaction","title":"<code>for_each_transaction(addr, field)</code>","text":""},{"location":"source/commands/binja/","title":"Binja","text":""},{"location":"source/commands/binja/#pwndbg.commands.binja.bn_sync","title":"<code>bn_sync(*args)</code>","text":"<p>Synchronize Binary Ninja's cursor with GDB</p>"},{"location":"source/commands/binja_functions/","title":"Binja functions","text":""},{"location":"source/commands/binja_functions/#pwndbg.commands.binja_functions.bn_eval","title":"<code>bn_eval(expr)</code>","text":"<p>Parse and evaluate a Binary Ninja expression.</p> <p>Docs: https://api.binary.ninja/binaryninja.binaryview-module.html#binaryninja.binaryview.BinaryView.parse_expression</p> <p>Adds all registers in the current register set as magic variables (e.g. $rip). Also adds a $piebase magic variable with the computed executable base.</p>"},{"location":"source/commands/binja_functions/#pwndbg.commands.binja_functions.bn_sym","title":"<code>bn_sym(name_val)</code>","text":"<p>Lookup a symbol's address by name from Binary Ninja.</p>"},{"location":"source/commands/binja_functions/#pwndbg.commands.binja_functions.bn_var","title":"<code>bn_var(name_val)</code>","text":"<p>Lookup a stack variable's address by name from Binary Ninja.</p>"},{"location":"source/commands/branch/","title":"Branch","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.parser","title":"<code>parser = argparse.ArgumentParser(description='Breaks on a branch if it is not taken.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch","title":"<code>BreakOnConditionalBranch</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>A breakpoint that only stops the inferior if a given branch is taken or not taken.</p>"},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.instruction","title":"<code>instruction = instruction</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.taken","title":"<code>taken = taken</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.__init__","title":"<code>__init__(instruction, taken)</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.should_stop","title":"<code>should_stop()</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.break_if_not_taken","title":"<code>break_if_not_taken(branch)</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.break_if_taken","title":"<code>break_if_taken(branch)</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.install_breakpoint","title":"<code>install_breakpoint(branch, taken)</code>","text":""},{"location":"source/commands/canary/","title":"Canary","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.DEFAULT_NUM_CANARIES_TO_DISPLAY","title":"<code>DEFAULT_NUM_CANARIES_TO_DISPLAY = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.parser","title":"<code>parser = argparse.ArgumentParser(description='Print out the current stack canary.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.canary","title":"<code>canary(all)</code>","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.canary_value","title":"<code>canary_value()</code>","text":""},{"location":"source/commands/checksec/","title":"Checksec","text":""},{"location":"source/commands/checksec/#pwndbg.commands.checksec.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints out the binary security settings using `checksec`.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/checksec/#pwndbg.commands.checksec.checksec","title":"<code>checksec(file)</code>","text":""},{"location":"source/commands/comments/","title":"Comments","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.file_lists","title":"<code>file_lists: Dict[str, Dict[str, str]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.parser","title":"<code>parser = argparse.ArgumentParser(description='Put comments in assembly code.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.comm","title":"<code>comm(addr=None, comment=None)</code>","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.init","title":"<code>init()</code>","text":""},{"location":"source/commands/config/","title":"Config","text":"<p>Dumps all pwndbg-specific configuration points.</p>"},{"location":"source/commands/config/#pwndbg.commands.config.configfile_parser","title":"<code>configfile_parser = argparse.ArgumentParser(description='Generates a configuration file for the current pwndbg options.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows pwndbg-specific theme configuration.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.themefile_parser","title":"<code>themefile_parser = argparse.ArgumentParser(description='Generates a configuration file for the current pwndbg theme options.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.config","title":"<code>config(filter_pattern)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.configfile","title":"<code>configfile(show_all=False)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.configfile_print_scope","title":"<code>configfile_print_scope(scope, show_all=False)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.display_config","title":"<code>display_config(filter_pattern, scope, has_file_command=True)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.extend_value_with_default","title":"<code>extend_value_with_default(value, default)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.get_config_parameters","title":"<code>get_config_parameters(scope, filter_pattern)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.print_row","title":"<code>print_row(name, value, default, set_show_doc, ljust_optname, ljust_value, empty_space=6)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.theme","title":"<code>theme(filter_pattern)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.themefile","title":"<code>themefile(show_all=False)</code>","text":""},{"location":"source/commands/context/","title":"Context","text":""},{"location":"source/commands/context/#pwndbg.commands.context.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.backtrace_frame_label","title":"<code>backtrace_frame_label = theme.add_param('backtrace-frame-label', '', 'frame number label for backtrace')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.backtrace_lines","title":"<code>backtrace_lines = pwndbg.config.add_param('context-backtrace-lines', 8, 'number of lines to print in the backtrace context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.banner_arg","title":"<code>banner_arg = parser.add_argument('banner', type=str, nargs='?', default='both', help='Where a banner should be placed: both, top , bottom, none')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.c","title":"<code>c = ColorConfig('backtrace', [ColorParamSpec('prefix', 'none', 'color for prefix of current backtrace label'), ColorParamSpec('address', 'none', 'color for backtrace (address)'), ColorParamSpec('symbol', 'none', 'color for backtrace (symbol)'), ColorParamSpec('frame-label', 'none', 'color for backtrace (frame label)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_clear_screen","title":"<code>config_clear_screen = pwndbg.config.add_param('context-clear-screen', False, 'whether to clear the screen before printing the context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_context_ghidra","title":"<code>config_context_ghidra = pwndbg.config.add_param('context-ghidra', 'never', 'when to try to decompile the current function with ghidra (slow and requires radare2/r2pipe or rizin/rzpipe) (valid values: always, never, if-no-source)')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_context_sections","title":"<code>config_context_sections = pwndbg.config.add_param('context-sections', 'regs disasm code ghidra stack backtrace expressions threads heap_tracker', 'which context sections are displayed (controls order)')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_max_threads_display","title":"<code>config_max_threads_display = pwndbg.config.add_param('context-max-threads', 4, 'maximum number of threads displayed by the context command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_output","title":"<code>config_output = pwndbg.config.add_param('context-output', 'stdout', 'where pwndbg should output (\"stdout\" or file/tty).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_history","title":"<code>context_history: DefaultDict[str, List[List[str]]] = defaultdict(list)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_history_size","title":"<code>context_history_size = pwndbg.config.add_param('context-history-size', 50, 'number of context history entries to store')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_sections","title":"<code>context_sections = {'a': context_args, 'r': context_regs, 'd': context_disasm, 's': context_stack, 'b': context_backtrace, 'c': context_code}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.disasm_lines","title":"<code>disasm_lines = pwndbg.config.add_param('context-disasm-lines', 10, 'number of additional lines to print in the disasm context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.expressions","title":"<code>expressions = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.last_signal","title":"<code>last_signal: List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.output_settings","title":"<code>output_settings: DefaultDict[str, Dict[str, Any]] = defaultdict(dict)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.outputs","title":"<code>outputs: Dict[str, str] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.parser","title":"<code>parser = argparse.ArgumentParser(description='Print out all registers and enhance the information.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.selected_history_index","title":"<code>selected_history_index: Optional[int] = None</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.should_decompile","title":"<code>should_decompile = pwndbg.config.add_param('context-integration-decompile', True, 'whether context should fall back to decompilation with no source code')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.source_disasm_lines","title":"<code>source_disasm_lines = pwndbg.config.add_param('context-code-lines', 10, 'number of source code lines to print by the context command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.stack_lines","title":"<code>stack_lines = pwndbg.config.add_param('context-stack-lines', 8, 'number of lines to print in the stack context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.thread_status_messages","title":"<code>thread_status_messages = {'running': pwndbg.color.light_green('running'), 'stopped': pwndbg.color.yellow('stopped'), 'exited': pwndbg.color.gray('exited ')}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput","title":"<code>CallOutput</code>","text":"<p>A context manager which calls a function on write</p>"},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.func","title":"<code>func = func</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__exit__","title":"<code>__exit__(*args, **kwargs)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__init__","title":"<code>__init__(func)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.flush","title":"<code>flush()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.isatty","title":"<code>isatty()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.write","title":"<code>write(data)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput","title":"<code>FileOutput</code>","text":"<p>A context manager wrapper to reopen files on enter</p>"},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.handle","title":"<code>handle = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__exit__","title":"<code>__exit__(*args, **kwargs)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__init__","title":"<code>__init__(*args)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput","title":"<code>StdOutput</code>","text":"<p>A context manager wrapper to give stdout</p>"},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__exit__","title":"<code>__exit__(*args, **kwargs)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.calculate_padding_to_align","title":"<code>calculate_padding_to_align(length, align)</code>","text":"<p>Calculates the number of spaces to append to reach the next alignment. The next alignment point is given by \"x * align &gt;= length\".</p>"},{"location":"source/commands/context/#pwndbg.commands.context.clear_screen","title":"<code>clear_screen(out=sys.stdout)</code>","text":"<p>Clear the screen by moving the cursor to top-left corner and clearing the content. Different terminals may act differently</p>"},{"location":"source/commands/context/#pwndbg.commands.context.compact_regs","title":"<code>compact_regs(regs, width=None, target=sys.stdout)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context","title":"<code>context(subcontext=None, enabled=None)</code>","text":"<p>Print out the current register, instruction, and stack context.</p> <p>Accepts subcommands 'reg', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', 'args', 'threads', 'heap_tracker', 'expressions', and/or 'last_signal'.</p>"},{"location":"source/commands/context/#pwndbg.commands.context.context_args","title":"<code>context_args(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_backtrace","title":"<code>context_backtrace(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_code","title":"<code>context_code(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_disasm","title":"<code>context_disasm(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_expressions","title":"<code>context_expressions(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_ghidra","title":"<code>context_ghidra(target=sys.stdout, with_banner=True, width=None)</code>","text":"<p>Print out the source of the current function decompiled by ghidra.</p> <p>The context-ghidra config parameter is used to configure whether to always, never or only show the context if no source is available.</p>"},{"location":"source/commands/context/#pwndbg.commands.context.context_heap_tracker","title":"<code>context_heap_tracker(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_last_signal","title":"<code>context_last_signal(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_regs","title":"<code>context_regs(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_stack","title":"<code>context_stack(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_threads","title":"<code>context_threads(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextnext","title":"<code>contextnext(count)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextoutput","title":"<code>contextoutput(section, path, clearing, banner='both', width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextprev","title":"<code>contextprev(count)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextsearch","title":"<code>contextsearch(needle, section)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextunwatch","title":"<code>contextunwatch(num)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextwatch","title":"<code>contextwatch(expression, cmd)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.get_filename_and_formatted_source","title":"<code>get_filename_and_formatted_source()</code>","text":"<p>Returns formatted, lines limited and highlighted source as list or if it isn't there - an empty list</p>"},{"location":"source/commands/context/#pwndbg.commands.context.get_highlight_source","title":"<code>get_highlight_source(filename)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.get_regs","title":"<code>get_regs(regs=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.get_thread_status","title":"<code>get_thread_status(thread)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.history_handle_unchanged_contents","title":"<code>history_handle_unchanged_contents()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.history_size_changed","title":"<code>history_size_changed()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.output","title":"<code>output(section)</code>","text":"<p>Creates a context manager corresponding to configured context output</p>"},{"location":"source/commands/context/#pwndbg.commands.context.regs","title":"<code>regs(regs=[])</code>","text":"<p>Print out all registers and enhance the information.</p>"},{"location":"source/commands/context/#pwndbg.commands.context.resetcontextoutput","title":"<code>resetcontextoutput(section)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.save_signal","title":"<code>save_signal(signal)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.serve_context_history","title":"<code>serve_context_history(function)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.try_emulate_if_bug_disable","title":"<code>try_emulate_if_bug_disable(handler)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.validate_context_sections","title":"<code>validate_context_sections()</code>","text":""},{"location":"source/commands/cpsr/","title":"Cpsr","text":""},{"location":"source/commands/cpsr/#pwndbg.commands.cpsr.parser","title":"<code>parser = argparse.ArgumentParser(description='Print out ARM CPSR or xPSR register.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cpsr/#pwndbg.commands.cpsr.cpsr","title":"<code>cpsr(cpsr_value=None)</code>","text":""},{"location":"source/commands/cyclic/","title":"Cyclic","text":""},{"location":"source/commands/cyclic/#pwndbg.commands.cyclic.group","title":"<code>group = parser.add_mutually_exclusive_group(required=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cyclic/#pwndbg.commands.cyclic.parser","title":"<code>parser = argparse.ArgumentParser(description='Cyclic pattern creator/finder.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cyclic/#pwndbg.commands.cyclic.cyclic_cmd","title":"<code>cyclic_cmd(alphabet, length, lookup, count=100, filename='')</code>","text":""},{"location":"source/commands/cymbol/","title":"Cymbol","text":"<p>Add, load, show, edit, or delete symbols for custom structures.</p> <p>For the generation of the symbols g++/gcc is being used under the hood.</p> <p>In case of remote debugging a binary which is not native to your architecture it is advised to configure the 'gcc-config-path' config parameter to your own cross-platform gnu gcc compiled toolchain for your target architecture.</p> <p>You are advised to configure the 'cymbol-editor' config parameter to the path of your favorite text editor. Otherwise cymbol exapnds $EDITOR and $VISUAL environment variables to find the path to the default text editor.</p>"},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.cymbol_editor","title":"<code>cymbol_editor = pwndbg.config.add_param('cymbol-editor', '', 'path to the editor for editing custom structures', param_class=pwndbg.lib.config.PARAM_OPTIONAL_FILENAME)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.gcc_compiler_path","title":"<code>gcc_compiler_path = pwndbg.config.add_param('gcc-compiler-path', '', 'path to the gcc/g++ toolchain for generating imported symbols', param_class=pwndbg.lib.config.PARAM_OPTIONAL_FILENAME)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.loaded_symbols","title":"<code>loaded_symbols: Dict[str, str] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.parser","title":"<code>parser = argparse.ArgumentParser(description='Add, show, load, edit, or delete custom structures in plain C.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.pwndbg_cachedir","title":"<code>pwndbg_cachedir = pwndbg.lib.tempfile.cachedir('custom-symbols')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.OnlyWhenStructFileExists","title":"<code>OnlyWhenStructFileExists(func)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.add_custom_structure","title":"<code>add_custom_structure(custom_structure_name)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.cymbol","title":"<code>cymbol(add, remove, edit, load, show)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.edit_custom_structure","title":"<code>edit_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.generate_debug_symbols","title":"<code>generate_debug_symbols(custom_structure_path, pwndbg_debug_symbols_output_file=None)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.load_custom_structure","title":"<code>load_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.remove_custom_structure","title":"<code>remove_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.show_custom_structure","title":"<code>show_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.unload_loaded_symbol","title":"<code>unload_loaded_symbol(custom_structure_name)</code>","text":""},{"location":"source/commands/dev/","title":"Dev","text":""},{"location":"source/commands/dev/#pwndbg.commands.dev.parser","title":"<code>parser = argparse.ArgumentParser(description='Set the log level.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/dev/#pwndbg.commands.dev.dev_dump_instruction","title":"<code>dev_dump_instruction(address=None, force_emulate=False, no_emulate=False)</code>","text":""},{"location":"source/commands/dev/#pwndbg.commands.dev.log_level","title":"<code>log_level(level)</code>","text":""},{"location":"source/commands/distance/","title":"Distance","text":""},{"location":"source/commands/distance/#pwndbg.commands.distance.parser","title":"<code>parser = argparse.ArgumentParser(description=\"Print the distance between the two arguments, or print the offset to the address's page base.\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/distance/#pwndbg.commands.distance.distance","title":"<code>distance(a, b)</code>","text":"<p>Print the distance between the two arguments</p>"},{"location":"source/commands/dt/","title":"Dt","text":""},{"location":"source/commands/dt/#pwndbg.commands.dt.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\n    Dump out information on a type (e.g. ucontext_t).\\n\\n    Optionally overlay that information at an address.\\n    ')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/dt/#pwndbg.commands.dt.dt","title":"<code>dt(typename, address=None)</code>","text":"<p>Dump out information on a type (e.g. ucontext_t).</p> <p>Optionally overlay that information at an address.</p>"},{"location":"source/commands/dumpargs/","title":"Dumpargs","text":""},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints determined arguments for call instruction.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.all_args","title":"<code>all_args()</code>","text":"<p>Returns list of all argument strings for display.</p>"},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.call_args","title":"<code>call_args()</code>","text":"<p>Returns list of resolved call argument strings for display. Attempts to resolve the target and determine the number of arguments. Should be used only when being on a call instruction.</p>"},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.dumpargs","title":"<code>dumpargs(force=False)</code>","text":""},{"location":"source/commands/elf/","title":"Elf","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.elfsections","title":"<code>elfsections()</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.get_section_bounds","title":"<code>get_section_bounds(section_name)</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.get_symbols_in_region","title":"<code>get_symbols_in_region(start, end, filter_text='')</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.gotplt","title":"<code>gotplt()</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.plt","title":"<code>plt()</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.print_symbols_in_section","title":"<code>print_symbols_in_section(section_name, filter_text='')</code>","text":""},{"location":"source/commands/flags/","title":"Flags","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.description","title":"<code>description = 'Modify the flags register.'</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.epilog","title":"<code>epilog = 'Examples:\\n  On X86/X64:\\n    setflag ZF 1        -- set zero flag\\n    setflag CF 0        -- unset carry flag\\n\\n  On ARM:\\n    setflag Z 0         -- unset the Z cpsr/xpsr flag\\n\\n  To see flags registers:\\n    info reg eflags     -- on x86/x64\\n    info reg cpsr/xpsr  -- on ARM (specific register may vary)\\n\\n(This command supports flags registers that are defined for architectures in the pwndbg/regs.py file)\\n    '</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.parser","title":"<code>parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=RawTextHelpFormatter)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.setflag","title":"<code>setflag(flag, value)</code>","text":""},{"location":"source/commands/gdt/","title":"Gdt","text":""},{"location":"source/commands/gdt/#pwndbg.commands.gdt.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Decode X86-64 GDT entries at address\\n\\nSee also:\\n* https://wiki.osdev.org/Global_Descriptor_Table\\n* https://wiki.osdev.org/GDT_Tutorial\\n\\nNote:\\nIn 64-bit mode, the Base and Limit values are ignored, each descriptor covers the entire linear address space regardless of what they are set to.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/gdt/#pwndbg.commands.gdt.decode_gdt_entry","title":"<code>decode_gdt_entry(value)</code>","text":""},{"location":"source/commands/gdt/#pwndbg.commands.gdt.gdt","title":"<code>gdt(address, count)</code>","text":""},{"location":"source/commands/ghidra/","title":"Ghidra","text":""},{"location":"source/commands/ghidra/#pwndbg.commands.ghidra.parser","title":"<code>parser = argparse.ArgumentParser(description='Decompile a given function using Ghidra.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ghidra/#pwndbg.commands.ghidra.ghidra","title":"<code>ghidra(func)</code>","text":""},{"location":"source/commands/godbg/","title":"Godbg","text":""},{"location":"source/commands/godbg/#pwndbg.commands.godbg.parser","title":"<code>parser = argparse.ArgumentParser(description='Dumps a Go runtime reflection type at a specified address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/godbg/#pwndbg.commands.godbg.go_dump","title":"<code>go_dump(ty, address, hex, decimals, debug, pretty)</code>","text":""},{"location":"source/commands/godbg/#pwndbg.commands.godbg.go_type","title":"<code>go_type(address)</code>","text":""},{"location":"source/commands/got/","title":"Got","text":""},{"location":"source/commands/got/#pwndbg.commands.got.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got/#pwndbg.commands.got.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Show the state of the Global Offset Table.\\n\\nExamples:\\n    got\\n    got puts\\n    got -p libc\\n    got -a\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got/#pwndbg.commands.got.got","title":"<code>got(path_filter, all_, accept_readonly, symbol_filter)</code>","text":""},{"location":"source/commands/got_tracking/","title":"Got tracking","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.disable","title":"<code>disable = subparsers.add_parser('disable', help='Disable GOT tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.enable","title":"<code>enable = subparsers.add_parser('enable', help='Enable GOT parsing')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.parser","title":"<code>parser = argparse.ArgumentParser(description='Controls GOT tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.report","title":"<code>report = subparsers.add_parser('info', help='Give an overview of the GOT tracker')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.status","title":"<code>status = subparsers.add_parser('query', help='Queries detailed tracking information about a single entry in the GOT')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.subparsers","title":"<code>subparsers = parser.add_subparsers(required=True, description='Used to disable and query information about the tracker')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.columns","title":"<code>columns(rows, colors=None)</code>","text":"<p>Print data formatted into distinct columns.</p>"},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.got_report","title":"<code>got_report(soname='.*', writable=False, fnname='.*')</code>","text":"<p>Prints out a report of the current status of the GOT tracker.</p>"},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.got_tracking_status","title":"<code>got_tracking_status(address)</code>","text":"<p>Prints out information about a single GOT tracking entry.</p>"},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.track_got","title":"<code>track_got(mode=None, soname=None, writable=False, fnname=None, address=None)</code>","text":""},{"location":"source/commands/hex2ptr/","title":"Hex2ptr","text":""},{"location":"source/commands/hex2ptr/#pwndbg.commands.hex2ptr.parser","title":"<code>parser = argparse.ArgumentParser(description='Converts a space-separated hex string to a little-endian address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/hex2ptr/#pwndbg.commands.hex2ptr.hex2ptr","title":"<code>hex2ptr(hex_string)</code>","text":""},{"location":"source/commands/hexdump/","title":"Hexdump","text":""},{"location":"source/commands/hexdump/#pwndbg.commands.hexdump.parser","title":"<code>parser = argparse.ArgumentParser(description='Hexdumps data at the specified address or module name.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/hexdump/#pwndbg.commands.hexdump.address_or_module_name","title":"<code>address_or_module_name(s)</code>","text":""},{"location":"source/commands/hexdump/#pwndbg.commands.hexdump.hexdump","title":"<code>hexdump(address, count=pwndbg.config.hexdump_bytes)</code>","text":""},{"location":"source/commands/hijack_fd/","title":"Hijack fd","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.PARSED_FILE_ARG","title":"<code>PARSED_FILE_ARG = Tuple[Optional[ParsedSocket], Optional[str]]</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Replace a file descriptor of a debugged process.\\n\\nThe new file descriptor can point to:\\n- a file\\n- a pipe\\n- a socket\\n- a device, etc.\\n\\nExamples:\\n1. Redirect STDOUT to a file:\\n   `hijack-fd 1 /dev/null`\\n\\n2. Redirect STDERR to a socket:\\n   `hijack-fd 2 tcp://localhost:8888`\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ParsedSocket","title":"<code>ParsedSocket</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ParsedSocket.address","title":"<code>address: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ParsedSocket.ip_version","title":"<code>ip_version: Literal['ipv4', 'ipv6']</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ParsedSocket.port","title":"<code>port: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ParsedSocket.protocol","title":"<code>protocol: Literal['tcp', 'udp']</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ShellcodeRegs","title":"<code>ShellcodeRegs</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ShellcodeRegs.newfd","title":"<code>newfd: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ShellcodeRegs.stack","title":"<code>stack: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.ShellcodeRegs.syscall_ret","title":"<code>syscall_ret: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.asm_replace_file","title":"<code>asm_replace_file(replace_fd, filename)</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.asm_replace_socket","title":"<code>asm_replace_socket(replace_fd, socket_data)</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.exec_shellcode_with_stack","title":"<code>exec_shellcode_with_stack(ec, blob, stack_size)</code>  <code>async</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.get_shellcode_regs","title":"<code>get_shellcode_regs()</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.hijack_fd","title":"<code>hijack_fd(fdnum, newfile)</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.parse_file_or_socket","title":"<code>parse_file_or_socket(s)</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.parse_socket","title":"<code>parse_socket(url)</code>","text":""},{"location":"source/commands/hijack_fd/#pwndbg.commands.hijack_fd.stack_size_alignment","title":"<code>stack_size_alignment(s)</code>","text":""},{"location":"source/commands/ida/","title":"Ida","text":""},{"location":"source/commands/ida/#pwndbg.commands.ida.parser","title":"<code>parser = argparse.ArgumentParser(description='Select and print stack frame called by this one.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ida/#pwndbg.commands.ida.down","title":"<code>down(n=1)</code>","text":"<p>Select and print stack frame called by this one.</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.ida","title":"<code>ida(name)</code>","text":"<p>Evaluate ida.LocByName() on the supplied value.</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.j","title":"<code>j(*args)</code>","text":"<p>Synchronize IDA's cursor with GDB</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.save_ida","title":"<code>save_ida()</code>","text":"<p>Save the IDA database</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.up","title":"<code>up(n=1)</code>","text":"<p>Select and print stack frame that called this one.</p>"},{"location":"source/commands/ignore/","title":"Ignore","text":"<p>Ignoring a breakpoint</p>"},{"location":"source/commands/ignore/#pwndbg.commands.ignore.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=\"Set ignore-count of breakpoint number N to COUNT.\\n\\nWhile the ignore count is positive, execution will not stop on the breakpoint.\\n\\nBy default, if `N' is ommitted, the last breakpoint (i.e. greatest breakpoint number) will be used.\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ignore/#pwndbg.commands.ignore.ignore","title":"<code>ignore(bpnum, count)</code>","text":""},{"location":"source/commands/integration/","title":"Integration","text":""},{"location":"source/commands/integration/#pwndbg.commands.integration.parser","title":"<code>parser = argparse.ArgumentParser(description='Use the current integration to decompile code near an address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/integration/#pwndbg.commands.integration.decomp","title":"<code>decomp(addr, lines)</code>","text":""},{"location":"source/commands/ipython_interactive/","title":"Ipython interactive","text":"<p>Command to start an interactive IPython prompt.</p>"},{"location":"source/commands/ipython_interactive/#pwndbg.commands.ipython_interactive.ipi","title":"<code>ipi()</code>","text":""},{"location":"source/commands/ipython_interactive/#pwndbg.commands.ipython_interactive.switch_to_ipython_env","title":"<code>switch_to_ipython_env()</code>","text":"<p>We need to change stdout/stderr to the default ones, otherwise we can't use tab or autocomplete</p>"},{"location":"source/commands/jemalloc/","title":"Jemalloc","text":""},{"location":"source/commands/jemalloc/#pwndbg.commands.jemalloc.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints all extents information')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/jemalloc/#pwndbg.commands.jemalloc.jemalloc_extent_info","title":"<code>jemalloc_extent_info(addr, verbose=False, header=True)</code>","text":""},{"location":"source/commands/jemalloc/#pwndbg.commands.jemalloc.jemalloc_find_extent","title":"<code>jemalloc_find_extent(addr)</code>","text":""},{"location":"source/commands/jemalloc/#pwndbg.commands.jemalloc.jemalloc_heap","title":"<code>jemalloc_heap()</code>","text":""},{"location":"source/commands/kbase/","title":"Kbase","text":""},{"location":"source/commands/kbase/#pwndbg.commands.kbase.parser","title":"<code>parser = argparse.ArgumentParser(description='Finds the kernel virtual base address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kbase/#pwndbg.commands.kbase.kbase","title":"<code>kbase(rebase=False)</code>","text":""},{"location":"source/commands/kchecksec/","title":"Kchecksec","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.parser","title":"<code>parser = argparse.ArgumentParser(description='Checks for kernel hardening configuration options.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option","title":"<code>Option</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option.cmdline_option","title":"<code>cmdline_option: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option.desired","title":"<code>desired: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.kchecksec","title":"<code>kchecksec()</code>","text":""},{"location":"source/commands/kcmdline/","title":"Kcmdline","text":""},{"location":"source/commands/kcmdline/#pwndbg.commands.kcmdline.parser","title":"<code>parser = argparse.ArgumentParser(description='Return the kernel commandline (/proc/cmdline).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kcmdline/#pwndbg.commands.kcmdline.kcmdline","title":"<code>kcmdline()</code>","text":""},{"location":"source/commands/kconfig/","title":"Kconfig","text":""},{"location":"source/commands/kconfig/#pwndbg.commands.kconfig.parser","title":"<code>parser = argparse.ArgumentParser(description='Outputs the kernel config (requires CONFIG_IKCONFIG).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kconfig/#pwndbg.commands.kconfig.kconfig","title":"<code>kconfig(config_name=None)</code>","text":""},{"location":"source/commands/killthreads/","title":"Killthreads","text":""},{"location":"source/commands/killthreads/#pwndbg.commands.killthreads.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Kill all or given threads.\\n\\nSwitches to given threads and calls pthread_exit(0) on them.\\nThis is performed with scheduler-locking to prevent other threads from operating at the same time.\\n\\nKilling all other threads may be useful to use GDB checkpoints, e.g., to test given input &amp; restart the execution to the point of interest (checkpoint).\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/killthreads/#pwndbg.commands.killthreads.killthreads","title":"<code>killthreads(thread_ids=None, all=False)</code>","text":""},{"location":"source/commands/klookup/","title":"Klookup","text":""},{"location":"source/commands/klookup/#pwndbg.commands.klookup.parser","title":"<code>parser = argparse.ArgumentParser(description='Lookup kernel symbols')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/klookup/#pwndbg.commands.klookup.klookup","title":"<code>klookup(symbol)</code>","text":""},{"location":"source/commands/kversion/","title":"Kversion","text":""},{"location":"source/commands/kversion/#pwndbg.commands.kversion.parser","title":"<code>parser = argparse.ArgumentParser(description='Outputs the kernel version (/proc/version).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kversion/#pwndbg.commands.kversion.kversion","title":"<code>kversion()</code>","text":""},{"location":"source/commands/leakfind/","title":"Leakfind","text":"<p>Find a chain of leaks given some starting address.</p>"},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nAttempt to find a leak chain given a starting address.\\nScans memory near the given address, looks for pointers, and continues that process to attempt to find leaks.\\n\\nExample: leakfind $rsp --page_name=filename --max_offset=0x48 --max_depth=6. This would look for any chains of leaks that point to a section in filename which begin near $rsp, are never 0x48 bytes further from a known pointer, and are a maximum length of 6.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.dbg_print_map","title":"<code>dbg_print_map(maps)</code>","text":""},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.get_rec_addr_string","title":"<code>get_rec_addr_string(addr, visited_map)</code>","text":""},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.leakfind","title":"<code>leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0)</code>","text":""},{"location":"source/commands/linkmap/","title":"Linkmap","text":""},{"location":"source/commands/linkmap/#pwndbg.commands.linkmap.parser","title":"<code>parser = argparse.ArgumentParser(description='Show the state of the Link Map')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/linkmap/#pwndbg.commands.linkmap.linkmap","title":"<code>linkmap()</code>","text":""},{"location":"source/commands/memoize/","title":"Memoize","text":""},{"location":"source/commands/memoize/#pwndbg.commands.memoize.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nToggles memoization (caching).\\n\\nUseful for diagnosing caching-related bugs. Decreases performance.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/memoize/#pwndbg.commands.memoize.memoize","title":"<code>memoize()</code>","text":""},{"location":"source/commands/misc/","title":"Misc","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.cat_group","title":"<code>cat_group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints out a list of all pwndbg commands.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.errno_","title":"<code>errno_(err)</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.list_and_filter_commands","title":"<code>list_and_filter_commands(filter_str, pwndbg_cmds=True, shell_cmds=False)</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.pwndbg_","title":"<code>pwndbg_(filter_pattern, shell, all_, category_, list_categories)</code>","text":""},{"location":"source/commands/mmap/","title":"Mmap","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.flag_dict","title":"<code>flag_dict = {'MAP_SHARED': 1, 'MAP_PRIVATE': 2, 'MAP_SHARED_VALIDATE': 3, 'MAP_FIXED': 16, 'MAP_ANONYMOUS': 32}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nCalls the mmap syscall and prints its resulting address.\\n\\nNote that the mmap syscall may fail for various reasons\\n(see `man mmap`) and, in case of failure, its return value\\nwill not be a valid pointer.\\n\\nPROT values: NONE (0), READ (1), WRITE (2), EXEC (4)\\nMAP values: SHARED (1), PRIVATE (2), SHARED_VALIDATE (3), FIXED (0x10),\\n            ANONYMOUS (0x20)\\n\\nFlags and protection values can be either a string containing the names of the\\nflags or permissions or a single number corresponding to the bitwise OR of the\\nprotection and flag numbers.\\n\\nExamples:\\n    mmap 0x0 4096 PROT_READ|PROT_WRITE|PROT_EXEC MAP_PRIVATE|MAP_ANONYMOUS -1 0\\n     - Maps a new private+anonymous page with RWX permissions at a location\\n       decided by the kernel.\\n\\n    mmap 0x0 4096 PROT_READ MAP_PRIVATE 10 0\\n     - Maps 4096 bytes of the file pointed to by file descriptor number 10 with\\n       read permission at a location decided by the kernel.\\n\\n    mmap 0xdeadbeef 0x1000\\n     - Maps a new private+anonymous page with RWX permissions at a page boundary\\n       near 0xdeadbeef.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.prot_dict","title":"<code>prot_dict = {'PROT_NONE': 0, 'PROT_READ': 1, 'PROT_WRITE': 2, 'PROT_EXEC': 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.flag_str_to_val","title":"<code>flag_str_to_val(flagstr)</code>","text":"<p>Heuristic to convert MAP_SHARED|MAP_FIXED to integer value.</p>"},{"location":"source/commands/mmap/#pwndbg.commands.mmap.mmap","title":"<code>mmap(addr, length, prot=7, flags=34, fd=-1, offset=0, quiet=False, force=False)</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.parse_str_or_int","title":"<code>parse_str_or_int(val, parser)</code>","text":"<p>Try parsing a string with one of the parsers above or by converting it to an int, or passes the value through if it is already an integer.</p>"},{"location":"source/commands/mmap/#pwndbg.commands.mmap.prot_str_to_val","title":"<code>prot_str_to_val(protstr)</code>","text":"<p>Heuristic to convert PROT_EXEC|PROT_WRITE to integer value.</p>"},{"location":"source/commands/mprotect/","title":"Mprotect","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.SYS_MPROTECT","title":"<code>SYS_MPROTECT = 125</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nCalls the mprotect syscall and prints its result value.\\n\\nNote that the mprotect syscall may fail for various reasons\\n(see `man mprotect`) and a non-zero error return value\\ncan be decoded with the `errno &lt;value&gt;` command.\\n\\nExamples:\\n    mprotect $rsp 4096 PROT_READ|PROT_WRITE|PROT_EXEC\\n    mprotect $rsp 4096 rwx\\n    mprotect $rsp 4096 7\\n    mprotect some_symbol 0x1000 PROT_NONE\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.prot_dict","title":"<code>prot_dict = {'PROT_NONE': 0, 'PROT_READ': 1, 'PROT_WRITE': 2, 'PROT_EXEC': 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.mprotect","title":"<code>mprotect(addr, length, prot)</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.prot_str_to_val","title":"<code>prot_str_to_val(protstr)</code>","text":"<p>Converts a protection string to an integer. Formats include:  - A positive integer, like 3  - A combination of r, w, and x, like rw  - A combination of PROT_READ, PROT_WRITE, and PROT_EXEC, like PROT_READ|PROT_WRITE</p>"},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.prot_val_to_str","title":"<code>prot_val_to_str(protval)</code>","text":""},{"location":"source/commands/nearpc/","title":"Nearpc","text":""},{"location":"source/commands/nearpc/#pwndbg.commands.nearpc.parser","title":"<code>parser = argparse.ArgumentParser(description='Like nearpc, but will emulate instructions from the current $PC forward.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/nearpc/#pwndbg.commands.nearpc.emulate","title":"<code>emulate(pc=None, lines=None, emulate_=True)</code>","text":"<p>Like nearpc, but will emulate instructions from the current $PC forward.</p>"},{"location":"source/commands/nearpc/#pwndbg.commands.nearpc.nearpc","title":"<code>nearpc(pc=None, lines=None, emulate=False, use_cache=False, linear=True)</code>","text":"<p>Disassemble near a specified address.</p>"},{"location":"source/commands/next/","title":"Next","text":"<p>Stepping until an event occurs</p>"},{"location":"source/commands/next/#pwndbg.commands.next.parser","title":"<code>parser = argparse.ArgumentParser(description='Breaks on the next matching instruction.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/next/#pwndbg.commands.next.nextcall","title":"<code>nextcall(symbol_regex=None)</code>","text":"<p>Breaks at the next call instruction</p>"},{"location":"source/commands/next/#pwndbg.commands.next.nextjmp","title":"<code>nextjmp()</code>","text":"<p>Breaks at the next jump instruction</p>"},{"location":"source/commands/next/#pwndbg.commands.next.nextproginstr","title":"<code>nextproginstr()</code>","text":""},{"location":"source/commands/next/#pwndbg.commands.next.nextret","title":"<code>nextret()</code>","text":"<p>Breaks at next return-like instruction</p>"},{"location":"source/commands/next/#pwndbg.commands.next.nextsyscall","title":"<code>nextsyscall()</code>","text":"<p>Breaks at the next syscall not taking branches.</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepover","title":"<code>stepover(addr=None)</code>","text":"<p>Sets a breakpoint on the instruction after this one</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepret","title":"<code>stepret()</code>","text":"<p>Breaks at next return-like instruction by 'stepping' to it</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepsyscall","title":"<code>stepsyscall()</code>","text":"<p>Breaks at the next syscall by taking branches.</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepuntilasm","title":"<code>stepuntilasm(mnemonic, op_str)</code>","text":""},{"location":"source/commands/onegadget/","title":"Onegadget","text":""},{"location":"source/commands/onegadget/#pwndbg.commands.onegadget.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Show onegadget\\n\\nExamples:\\n    onegadget\\n    onegadget --show-unsat\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/onegadget/#pwndbg.commands.onegadget.onegadget","title":"<code>onegadget(show_unsat=False, no_unknown=False, verbose=False)</code>","text":""},{"location":"source/commands/p2p/","title":"P2p","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.\\n\\nAny chain length greater than 0 is valid. If only one mapping is given it just looks for any pointers in that mapping.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.ts","title":"<code>ts = pwndbg.commands.telescope.telescope</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange","title":"<code>AddrRange</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.begin","title":"<code>begin = begin</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.end","title":"<code>end = end</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.__init__","title":"<code>__init__(begin, end)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.address_range","title":"<code>address_range(section)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.address_range_explicit","title":"<code>address_range_explicit(section)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.get_addrrange_any_named","title":"<code>get_addrrange_any_named()</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.maybe_points_to_ranges","title":"<code>maybe_points_to_ranges(ptr, rs)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.p2p","title":"<code>p2p(mapping_names=None)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.p2p_walk","title":"<code>p2p_walk(addr, ranges, current_level)</code>","text":""},{"location":"source/commands/patch/","title":"Patch","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.parser","title":"<code>parser = argparse.ArgumentParser(description='Patches given instruction with given code or bytes.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.parser2","title":"<code>parser2 = argparse.ArgumentParser(description='Revert patch at given address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.parser3","title":"<code>parser3 = argparse.ArgumentParser(description='List all patches.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patches","title":"<code>patches: Dict[int, Tuple[bytearray, bytearray]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patch","title":"<code>patch(address, ins, quiet)</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patch_list","title":"<code>patch_list()</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patch_revert","title":"<code>patch_revert(address)</code>","text":""},{"location":"source/commands/pcplist/","title":"Pcplist","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.parser","title":"<code>parser = argparse.ArgumentParser(description='Print Per-CPU page list')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.pcplist","title":"<code>pcplist(zone=None, list_num=None)</code>","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.print_zone","title":"<code>print_zone(zone, list_num=None)</code>","text":""},{"location":"source/commands/peda/","title":"Peda","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.parser","title":"<code>parser = argparse.ArgumentParser(description='Continue execution until an address or expression.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.xinfo","title":"<code>xinfo = pwndbg.commands.context.context</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.xprint","title":"<code>xprint = pwndbg.commands.telescope.telescope</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.getfile","title":"<code>getfile()</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.xuntil","title":"<code>xuntil(target)</code>","text":""},{"location":"source/commands/pie/","title":"Pie","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.parser","title":"<code>parser = argparse.ArgumentParser(description='Calculate VA of RVA from PIE base.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.breakrva","title":"<code>breakrva(offset=0, module=None)</code>","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.piebase","title":"<code>piebase(offset=None, module=None)</code>","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.translate_addr","title":"<code>translate_addr(offset, module)</code>","text":""},{"location":"source/commands/plist/","title":"Plist","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Dumps the elements of a linked list.\\n\\nThis command traverses the linked list beginning at a given element, dumping its\\ncontents and the contents of all the elements that come after it in the list.\\nTraversal is configurable and can handle multiple types of linked lists, but will\\nalways stop when a cycle is detected.\\n\\nThe path to the first element can be any GDB expression that evaluates to either\\nthe first element directly, or a to pointer to it. The next element is the name\\nof the field containing the next pointer, in either the structure itself or in\\nthe structure given by --inner.\\n\\nAn address value may be given with --sentinel that signals the end of the list.\\nBy default, the value used is NULL (0).\\n\\nIf only one field inside each node is desired, it can be printed exclusively by\\nspecifying its name with --field.\\n\\nThis command supports traversing three types of linked lists, classified by how\\nthe next pointer can be found in the structure and what type it is:\\n    1 - Next pointer is field of structure, type is the same as structure.\\n    2 - Next pointer is field of inner nested structure, pointed to type is the\\n        same as outer structure.\\n    3 - Next pointer is field of inner nested structure, pointed to type is the\\n        same as inner structure.\\nTypes 2 and 3 require --inner to be specified.\\n\\nExample 1:\\n\\n```\\nstruct node {\\n    int value;\\n    struct node *next;\\n};\\nstruct node node_c = { 2, NULL };\\nstruct node node_b = { 1, &amp;node_c };\\nstruct node node_a = { 0, &amp;node_b };\\n```\\n\\npwndbg&gt; plist node_a next\\n0x4000011050 &lt;node_a&gt;: {\\n  value = 0,\\n  next = 0x4000011040 &lt;node_b&gt;\\n}\\n0x4000011040 &lt;node_b&gt;: {\\n  value = 1,\\n  next = 0x4000011010 &lt;node_c&gt;\\n}\\n0x4000011010 &lt;node_c&gt;: {\\n  value = 2,\\n  next = 0x0\\n}\\n\\nExample 2:\\n\\n```\\nstruct node_inner_a {\\n    struct node_inner_a *next;\\n};\\nstruct inner_a_node {\\n    int value;\\n    struct node_inner_a inner;\\n};\\nstruct inner_a_node inner_a_node_c = { 2, { NULL } };\\nstruct inner_a_node inner_a_node_b = { 1, { &amp;inner_a_node_c.inner } };\\nstruct inner_a_node inner_a_node_a = { 0, { &amp;inner_a_node_b.inner } };\\n```\\n\\npwndbg&gt; plist inner_a_node_a -i inner next\\n0x4000011070 &lt;inner_a_node_a&gt;: {\\n  value = 0,\\n  inner = {\\n    next = 0x4000011068 &lt;inner_a_node_b+8&gt;\\n  }\\n}\\n0x4000011060 &lt;inner_a_node_b&gt;: {\\n  value = 1,\\n  inner = {\\n    next = 0x4000011028 &lt;inner_a_node_c+8&gt;\\n  }\\n}\\n0x4000011020 &lt;inner_a_node_c&gt;: {\\n  value = 2,\\n  inner = {\\n    next = 0x0\\n  }\\n}\\n\\nExample 3:\\n\\n```\\nstruct inner_b_node;\\nstruct node_inner_b {\\n    struct inner_b_node *next;\\n};\\nstruct inner_b_node {\\n    int value;\\n    struct node_inner_b inner;\\n};\\nstruct inner_b_node inner_b_node_c = { 2, { NULL } };\\nstruct inner_b_node inner_b_node_b = { 1, { &amp;inner_b_node_c } };\\nstruct inner_b_node inner_b_node_a = { 0, { &amp;inner_b_node_b } };\\n```\\n\\npwndbg&gt; plist inner_b_node_a -i inner next\\n0x4000011090 &lt;inner_b_node_a&gt;: {\\n  value = 0,\\n  inner = {\\n    next = 0x4000011080 &lt;inner_b_node_b&gt;\\n  }\\n}\\n0x4000011080 &lt;inner_b_node_b&gt;: {\\n  value = 1,\\n  inner = {\\n    next = 0x4000011030 &lt;inner_b_node_c&gt;\\n  }\\n}\\n0x4000011030 &lt;inner_b_node_c&gt;: {\\n  value = 2,\\n  inner = {\\n    next = 0x0\\n  }\\n}\\n\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.bit_offset_of_field","title":"<code>bit_offset_of_field(struct, field_name, inner_name=None)</code>","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.get_byte_offset","title":"<code>get_byte_offset(bit_offset)</code>","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.plist","title":"<code>plist(path, next, sentinel, inner_name, field_name, offset, count=None)</code>","text":""},{"location":"source/commands/probeleak/","title":"Probeleak","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nPointer scan for possible offset leaks.\\nExamples:\\n    probeleak $rsp 0x64 - leaks 0x64 bytes starting at stack pointer and search for valid pointers\\n    probeleak $rsp 0x64 --max-dist 0x10 - as above, but pointers may point 0x10 bytes outside of memory page\\n    probeleak $rsp 0x64 --point-to libc --max-ptrs 1 --flags rwx - leaks 0x64 bytes starting at stack pointer and search for one valid pointer which points to a libc rwx page\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.find_module","title":"<code>find_module(addr, max_distance)</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.flags_str2int","title":"<code>flags_str2int(flags_s)</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.probeleak","title":"<code>probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None)</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.satisfied_flags","title":"<code>satisfied_flags(require_flags, flags)</code>","text":""},{"location":"source/commands/procinfo/","title":"Procinfo","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.capabilities","title":"<code>capabilities = {0: 'CAP_CHOWN', 1: 'CAP_DAC_OVERRIDE', 2: 'CAP_DAC_READ_SEARCH', 3: 'CAP_FOWNER', 4: 'CAP_FSETID', 5: 'CAP_KILL', 6: 'CAP_SETGID', 7: 'CAP_SETUID', 8: 'CAP_SETPCAP', 9: 'CAP_LINUX_IMMUTABLE', 10: 'CAP_NET_BIND_SERVICE', 11: 'CAP_NET_BROADCAST', 12: 'CAP_NET_ADMIN', 13: 'CAP_NET_RAW', 14: 'CAP_IPC_LOCK', 15: 'CAP_IPC_OWNER', 16: 'CAP_SYS_MODULE', 17: 'CAP_SYS_RAWIO', 18: 'CAP_SYS_CHROOT', 19: 'CAP_SYS_PTRACE', 20: 'CAP_SYS_PACCT', 21: 'CAP_SYS_ADMIN', 22: 'CAP_SYS_BOOT', 23: 'CAP_SYS_NICE', 24: 'CAP_SYS_RESOURCE', 25: 'CAP_SYS_TIME', 26: 'CAP_SYS_TTY_CONFIG', 27: 'CAP_MKNOD', 28: 'CAP_LEASE', 29: 'CAP_AUDIT_WRITE', 30: 'CAP_AUDIT_CONTROL', 31: 'CAP_SETFCAP', 32: 'CAP_MAC_OVERRIDE', 33: 'CAP_MAC_ADMIN', 34: 'CAP_SYSLOG', 35: 'CAP_WAKE_ALARM', 36: 'CAP_BLOCK_SUSPEND'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process","title":"<code>Process</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.cmdline","title":"<code>cmdline</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.connections","title":"<code>connections</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.cwd","title":"<code>cwd: str</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.open_files","title":"<code>open_files</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.pid","title":"<code>pid = pid</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.selinux","title":"<code>selinux</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.tid","title":"<code>tid = tid</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.__init__","title":"<code>__init__(pid=None, tid=None)</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.netlink","title":"<code>netlink()</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.pid","title":"<code>pid()</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.procinfo","title":"<code>procinfo()</code>","text":"<p>Display information about the running process.</p>"},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.tcp","title":"<code>tcp()</code>","text":"<p>It will first list all listening TCP sockets, and next list all established TCP connections. A typical entry of /proc/net/tcp would look like this (split up into 3 parts because of the length of the line):</p>"},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.unix","title":"<code>unix()</code>","text":""},{"location":"source/commands/profiler/","title":"Profiler","text":"<p>Utilities for profiling pwndbg.</p>"},{"location":"source/commands/profiler/#pwndbg.commands.profiler.parser","title":"<code>parser = argparse.ArgumentParser(description='Utilities for profiling pwndbg.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/profiler/#pwndbg.commands.profiler.parser_start","title":"<code>parser_start = subparsers.add_parser('start', prog='profiler start')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/profiler/#pwndbg.commands.profiler.parser_stop","title":"<code>parser_stop = subparsers.add_parser('stop', prog='profiler stop')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/profiler/#pwndbg.commands.profiler.subparsers","title":"<code>subparsers = parser.add_subparsers(dest='command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/profiler/#pwndbg.commands.profiler.profiler","title":"<code>profiler(command, file='pwndbg.pstats')</code>","text":""},{"location":"source/commands/ptmalloc2/","title":"Ptmalloc2","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.VALID_CHARS","title":"<code>VALID_CHARS = list(map(ord, set(printable) - set('\\t\\r\\n\\x0c\\x0b')))</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows heap related configuration.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.try_free_parser","title":"<code>try_free_parser = argparse.ArgumentParser(description='Check what would happen if free was called with given address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.arena","title":"<code>arena(addr=None)</code>","text":"<p>Print the contents of an arena, default to the current thread's arena.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.arenas","title":"<code>arenas()</code>","text":"<p>Lists this process's arenas.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.bin_ascii","title":"<code>bin_ascii(bs)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.bin_labels_mapping","title":"<code>bin_labels_mapping(collections)</code>","text":"<p>Returns all potential bin labels for all potential addresses We precompute all of them because doing this on demand was too slow and inefficient See #1675 for more details</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.bins","title":"<code>bins(addr=None, tcache_addr=None)</code>","text":"<p>Print the contents of all an arena's bins and a thread's tcache, default to the current thread's arena and tcache.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.fastbins","title":"<code>fastbins(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's fastbins, default to the current thread's arena.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.find_fake_fast","title":"<code>find_fake_fast(target_address, max_candidate_size=None, align=False, glibc_fastbin_bug=False, partial_overwrite=False)</code>","text":"<p>Find candidate fake fast chunks overlapping the specified address.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.format_bin","title":"<code>format_bin(bins, verbose=False, offset=None)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.heap","title":"<code>heap(addr=None, verbose=False, simple=False)</code>","text":"<p>Iteratively print chunks on a heap, default to the current thread's active heap.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.heap_config","title":"<code>heap_config(filter_pattern)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.hi","title":"<code>hi(addr, verbose=False, simple=False, fake=False)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.largebins","title":"<code>largebins(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's largebins, default to the current thread's arena.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.malloc_chunk","title":"<code>malloc_chunk(addr, fake=False, verbose=False, simple=False, next=0, dump=False)</code>","text":"<p>Print a malloc_chunk struct's contents.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.mp","title":"<code>mp()</code>","text":"<p>Print the mp_ struct's contents.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.print_no_arena_found_error","title":"<code>print_no_arena_found_error(tid=None)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.print_no_tcache_bins_found_error","title":"<code>print_no_tcache_bins_found_error(tid=None)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.read_chunk","title":"<code>read_chunk(addr)</code>","text":"<p>Read a chunk's metadata.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.smallbins","title":"<code>smallbins(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's smallbins, default to the current thread's arena.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.tcache","title":"<code>tcache(addr=None)</code>","text":"<p>Print a thread's tcache contents, default to the current thread's tcache.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.tcachebins","title":"<code>tcachebins(addr=None, verbose=False)</code>","text":"<p>Print the contents of a tcache, default to the current thread's tcache.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.top_chunk","title":"<code>top_chunk(addr=None)</code>","text":"<p>Print relevant information about an arena's top chunk, default to the current thread's arena.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.try_free","title":"<code>try_free(addr)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.try_unlink","title":"<code>try_unlink(addr)</code>","text":""},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.unsortedbin","title":"<code>unsortedbin(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's unsortedbin, default to the current thread's arena.</p>"},{"location":"source/commands/ptmalloc2/#pwndbg.commands.ptmalloc2.vis_heap_chunks","title":"<code>vis_heap_chunks(addr=None, count=None, beyond_top=False, no_truncate=False, all_chunks=False)</code>","text":"<p>Visualize chunks on a heap, default to the current arena's active heap.</p>"},{"location":"source/commands/ptmalloc2_tracking/","title":"Ptmalloc2 tracking","text":""},{"location":"source/commands/ptmalloc2_tracking/#pwndbg.commands.ptmalloc2_tracking.disable","title":"<code>disable = subparsers.add_parser('disable', help='Disable heap tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2_tracking/#pwndbg.commands.ptmalloc2_tracking.enable","title":"<code>enable = subparsers.add_parser('enable', help='Enable heap tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2_tracking/#pwndbg.commands.ptmalloc2_tracking.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Manages the heap tracker.\\n\\nThe heap tracker is a module that tracks usage of the GLibc heap and looks for\\nuser errors such as double frees and use after frees.\\n\\nCurrently, the following errors can be detected:\\n    - Use After Free\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2_tracking/#pwndbg.commands.ptmalloc2_tracking.subparsers","title":"<code>subparsers = parser.add_subparsers(required=True, description='Used to enable, disable and query information about the tracker')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2_tracking/#pwndbg.commands.ptmalloc2_tracking.toggle_break","title":"<code>toggle_break = subparsers.add_parser('toggle-break', help='Toggles whether possible UAF conditions will pause execution')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ptmalloc2_tracking/#pwndbg.commands.ptmalloc2_tracking.track_heap","title":"<code>track_heap(mode=None, use_hardware_breakpoints=False)</code>","text":""},{"location":"source/commands/radare2/","title":"Radare2","text":""},{"location":"source/commands/radare2/#pwndbg.commands.radare2.parser","title":"<code>parser = argparse.ArgumentParser(description='Execute stateful radare2 commands through r2pipe.', epilog='Example: r2pipe pdf sym.main')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/radare2/#pwndbg.commands.radare2.r2","title":"<code>r2(arguments, no_seek=False, no_rebase=False)</code>","text":""},{"location":"source/commands/radare2/#pwndbg.commands.radare2.r2pipe","title":"<code>r2pipe(arguments)</code>","text":""},{"location":"source/commands/reload/","title":"Reload","text":""},{"location":"source/commands/reload/#pwndbg.commands.reload.reinit_pwndbg","title":"<code>reinit_pwndbg()</code>","text":"<p>Makes pwndbg reinitialize all state.</p>"},{"location":"source/commands/reload/#pwndbg.commands.reload.reload","title":"<code>reload(*a)</code>","text":""},{"location":"source/commands/reload/#pwndbg.commands.reload.rreload","title":"<code>rreload(module, _exclude_mods=None)</code>","text":"<p>Recursively reload modules. Impl based on https://stackoverflow.com/a/66661311/1508881</p>"},{"location":"source/commands/retaddr/","title":"Retaddr","text":""},{"location":"source/commands/retaddr/#pwndbg.commands.retaddr.retaddr","title":"<code>retaddr()</code>","text":""},{"location":"source/commands/retaddr/#pwndbg.commands.retaddr.stack_explore","title":"<code>stack_explore()</code>","text":""},{"location":"source/commands/rizin/","title":"Rizin","text":""},{"location":"source/commands/rizin/#pwndbg.commands.rizin.parser","title":"<code>parser = argparse.ArgumentParser(description='Execute stateful rizin commands through rzpipe.', epilog='Example: rzpipe pdf sym.main')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/rizin/#pwndbg.commands.rizin.rz","title":"<code>rz(arguments, no_seek=False, no_rebase=False)</code>","text":""},{"location":"source/commands/rizin/#pwndbg.commands.rizin.rzpipe","title":"<code>rzpipe(arguments)</code>","text":""},{"location":"source/commands/rop/","title":"Rop","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.parser","title":"<code>parser = argparse.ArgumentParser(description=\"Dump ROP gadgets with Jon Salwan's ROPgadget tool.\", epilog=\"Example: rop --grep 'pop rdi' -- --nojop\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary","title":"<code>RawMemoryBinary</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.__fileName","title":"<code>__fileName = options.binary</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.__rawBinary","title":"<code>__rawBinary = fp.read()</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.cs","title":"<code>cs = get_disassembler(pwndbg.aglib.regs.pc)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.start_addr","title":"<code>start_addr = start_addr</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.__init__","title":"<code>__init__(options, start_addr)</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getArch","title":"<code>getArch()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getArchMode","title":"<code>getArchMode()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getBinary","title":"<code>getBinary()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getDataSections","title":"<code>getDataSections()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getEndian","title":"<code>getEndian()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getEntryPoint","title":"<code>getEntryPoint()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getExecSections","title":"<code>getExecSections()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getFileName","title":"<code>getFileName()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getFormat","title":"<code>getFormat()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.RawMemoryBinary.getRawBinary","title":"<code>getRawBinary()</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.iterate_over_pages","title":"<code>iterate_over_pages(mem_limit)</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.parse_size","title":"<code>parse_size(size_str)</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.rop","title":"<code>rop(grep, memlimit, argument)</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.split_range_to_chunks","title":"<code>split_range_to_chunks(range_start, range_end, chunk_size=10 * 1024 * 1024)</code>","text":""},{"location":"source/commands/ropper/","title":"Ropper","text":""},{"location":"source/commands/ropper/#pwndbg.commands.ropper.parser","title":"<code>parser = argparse.ArgumentParser(description='ROP gadget search with ropper.', epilog=\"Example: ropper -- --console; ropper -- --search 'mov e?x'\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ropper/#pwndbg.commands.ropper.ropper","title":"<code>ropper(argument)</code>","text":""},{"location":"source/commands/search/","title":"Search","text":""},{"location":"source/commands/search/#pwndbg.commands.search.auto_save","title":"<code>auto_save = pwndbg.config.add_param('auto-save-search', False, 'automatically pass --save to \"search\" command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/search/#pwndbg.commands.search.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=\"Search memory for byte sequences, strings, pointers, and integer values.\\n\\nBy default search results are cached. If you want to cache all results, but only print a subset, use --trunc-out. If you want to cache only a subset of results, and print the results immediately, use --limit. The latter is specially useful if you're searching a huge section of memory.\\n\\n\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/search/#pwndbg.commands.search.saved","title":"<code>saved: Set[int] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/search/#pwndbg.commands.search.print_search_hit","title":"<code>print_search_hit(address)</code>","text":"<p>Prints out a single search hit.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to print</p> required"},{"location":"source/commands/search/#pwndbg.commands.search.search","title":"<code>search(type, arch, asmbp, hex, executable, writable, step, limit, aligned, value, mapping_name, save, next, trunc_out)</code>","text":""},{"location":"source/commands/segments/","title":"Segments","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.segment","title":"<code>segment</code>","text":"<p>               Bases: <code>Function</code></p> <p>Get the flat address of memory based off of the named segment register.</p>"},{"location":"source/commands/segments/#pwndbg.commands.segments.segment.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.segment.__init__","title":"<code>__init__(name)</code>","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.segment.invoke","title":"<code>invoke(arg=gdb.Value(0), *args)</code>","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.fsbase","title":"<code>fsbase()</code>","text":"<p>Prints out the FS base address. See also $fsbase.</p>"},{"location":"source/commands/segments/#pwndbg.commands.segments.gsbase","title":"<code>gsbase()</code>","text":"<p>Prints out the GS base address. See also $gsbase.</p>"},{"location":"source/commands/shell/","title":"Shell","text":"<p>Wrapper for shell commands.</p>"},{"location":"source/commands/shell/#pwndbg.commands.shell.pwncmd_names","title":"<code>pwncmd_names = ['constgrep', 'disasm', 'pwn', 'unhex']</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.pwncmds","title":"<code>pwncmds = list(filter(which, pwncmd_names))</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.shellcmd_names","title":"<code>shellcmd_names = ['awk', 'bash', 'cat', 'chattr', 'chmod', 'chown', 'cp', 'date', 'diff', 'egrep', 'grep', 'htop', 'id', 'less', 'ls', 'man', 'mkdir', 'mktemp', 'more', 'mv', 'nano', 'nc', 'ping', 'pkill', 'ps', 'pstree', 'pwd', 'rm', 'sed', 'sh', 'sort', 'ssh', 'sudo', 'tail', 'top', 'touch', 'uniq', 'vi', 'vim', 'w', 'wget', 'who', 'whoami', 'zsh']</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.shellcmds","title":"<code>shellcmds = list(filter(which, shellcmd_names))</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.register_shell_function","title":"<code>register_shell_function(cmd, deprecated=False)</code>","text":""},{"location":"source/commands/sigreturn/","title":"Sigreturn","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.SIGRETURN_CORE_REGISTER","title":"<code>SIGRETURN_CORE_REGISTER: Dict[str, Set[str]] = {'x86-64': {*amd64.gpr, amd64.frame, amd64.stack, amd64.pc}, 'i386': {*i386.gpr, i386.frame, i386.stack, i386.pc}, 'aarch64': {*aarch64.gpr, 'sp', 'pc'}, 'arm': {*arm.gpr, 'fp', 'ip', 'sp', 'lr', 'pc'}}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.SIGRETURN_FRAME_LAYOUTS","title":"<code>SIGRETURN_FRAME_LAYOUTS: Dict[str, List[Tuple[int, str]]] = {'x86-64': sorted([(-8, '&amp;pretcode')] + list(pwnlib.rop.srop.registers['amd64'].items())), 'i386': sorted(pwnlib.rop.srop.registers['i386'].items()), 'aarch64': sorted(pwnlib.rop.srop.registers['aarch64'].items()), 'arm': sorted(pwnlib.rop.srop.registers['arm'].items())}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.parser","title":"<code>parser = argparse.ArgumentParser(description='Display the SigreturnFrame at the specific address')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.print_value","title":"<code>print_value(string, address, print_address)</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.sigreturn","title":"<code>sigreturn(address=None, display_all=False, print_address=False)</code>","text":""},{"location":"source/commands/slab/","title":"Slab","text":"<p>Commands for dealing with Linux kernel slab allocator. Currently, only SLUB is supported.</p> <p>Some of the code here was inspired from https://github.com/NeatMonster/slabdbg Some of the code here was inspired from https://github.com/osandov/drgn</p>"},{"location":"source/commands/slab/#pwndbg.commands.slab.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints information about the slab allocator')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.parser_contains","title":"<code>parser_contains = subparsers.add_parser('contains', prog='slab contains')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.parser_info","title":"<code>parser_info = subparsers.add_parser('info', prog='slab info')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.parser_list","title":"<code>parser_list = subparsers.add_parser('list', prog='slab list')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.subparsers","title":"<code>subparsers = parser.add_subparsers(dest='command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager","title":"<code>IndentContextManager</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.indent","title":"<code>indent = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.__exit__","title":"<code>__exit__(exc_type, exc_value, exc_tb)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.print","title":"<code>print(*a, **kw)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.print_cpu_cache","title":"<code>print_cpu_cache(cpu_cache, verbose, indent)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.print_node_cache","title":"<code>print_node_cache(node_cache, verbose, indent)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.print_slab","title":"<code>print_slab(slab, indent, verbose)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.slab","title":"<code>slab(command, filter_=None, names=None, verbose=False, addresses=None)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.slab_contains","title":"<code>slab_contains(address)</code>","text":"<p>prints the slab_cache associated with the provided address</p>"},{"location":"source/commands/slab/#pwndbg.commands.slab.slab_info","title":"<code>slab_info(name, verbose)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.slab_list","title":"<code>slab_list(filter_)</code>","text":""},{"location":"source/commands/spray/","title":"Spray","text":""},{"location":"source/commands/spray/#pwndbg.commands.spray.parser","title":"<code>parser = argparse.ArgumentParser(description='Spray memory with cyclic() generated values')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/spray/#pwndbg.commands.spray.spray","title":"<code>spray(addr, length, value, only_funcptrs)</code>","text":""},{"location":"source/commands/start/","title":"Start","text":"<p>Launches the target process after setting a breakpoint at a convenient entry point.</p>"},{"location":"source/commands/start/#pwndbg.commands.start.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter, description='\\nStart the debugged program stopping at its entrypoint address.\\n\\nNote that the entrypoint may not be the first instruction executed\\nby the program. If you want to stop on the first executed instruction,\\nuse the GDB\\'s `starti` command.\\n\\nArgs may include \"*\", or \"[...]\"; they are expanded using the\\nshell that will start the program (specified by the \"$SHELL\" environment\\nvariable).  Input and output redirection with \"&gt;\", \"&lt;\", or \"&gt;&gt;\"\\nare also allowed.\\n\\nWith no arguments, uses arguments last specified (with \"run\" or\\n\"set args\").  To cancel previous arguments and run with no arguments,\\nuse \"set args\" without arguments.\\n\\nTo start the inferior without using a shell, use \"set startup-with-shell off\".\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.breakpoint_at_entry","title":"<code>breakpoint_at_entry()</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.entry","title":"<code>entry(args=None)</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.sstart","title":"<code>sstart()</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.start","title":"<code>start(args=None)</code>","text":""},{"location":"source/commands/strings/","title":"Strings","text":""},{"location":"source/commands/strings/#pwndbg.commands.strings.parser","title":"<code>parser = argparse.ArgumentParser(description='Extracts and displays ASCII strings from readable memory pages of the debugged process.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/strings/#pwndbg.commands.strings.strings","title":"<code>strings(n=4, page_names=[], save_as=None)</code>","text":""},{"location":"source/commands/telescope/","title":"Telescope","text":"<p>Prints out pointer chains starting at some address in memory.</p> <p>Generally used to print out the stack or register values.</p>"},{"location":"source/commands/telescope/#pwndbg.commands.telescope.offset_delimiter","title":"<code>offset_delimiter = theme.add_param('telescope-offset-delimiter', ':', 'offset delimiter of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.offset_separator","title":"<code>offset_separator = theme.add_param('telescope-offset-separator', '\u2502', 'offset separator of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.parser","title":"<code>parser = argparse.ArgumentParser(description='Dereferences on stack data, printing the entire stack frame with specified count and offset .')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.print_framepointer_offset","title":"<code>print_framepointer_offset = pwndbg.config.add_param('telescope-framepointer-offset', True, 'print offset to framepointer for each address, if sufficiently small')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.repeating_marker","title":"<code>repeating_marker = theme.add_param('telescope-repeating-marker', '... \u2193', 'repeating values marker of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.skip_repeating_values","title":"<code>skip_repeating_values = pwndbg.config.add_param('telescope-skip-repeating-val', True, 'whether to skip repeating values of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.skip_repeating_values_minimum","title":"<code>skip_repeating_values_minimum = pwndbg.config.add_param('telescope-skip-repeating-val-minimum', 3, 'minimum amount of repeated values before skipping lines')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.telescope_lines","title":"<code>telescope_lines = pwndbg.config.add_param('telescope-lines', 8, 'number of lines to printed by the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.regs_or_frame_offset","title":"<code>regs_or_frame_offset(addr, bp, regs, longest_regs)</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.stack","title":"<code>stack(count, offset, frame, inverse)</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.stackf","title":"<code>stackf(count, offset)</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.telescope","title":"<code>telescope(address=None, count=telescope_lines, to_string=False, reverse=False, frame=False, inverse=False)</code>","text":"<p>Recursively dereferences pointers starting at the specified address ($sp by default)</p>"},{"location":"source/commands/tips/","title":"Tips","text":""},{"location":"source/commands/tips/#pwndbg.commands.tips.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows tips.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/tips/#pwndbg.commands.tips.tips","title":"<code>tips(all)</code>","text":""},{"location":"source/commands/tls/","title":"Tls","text":"<p>Command to print the information of the current Thread Local Storage (TLS).</p>"},{"location":"source/commands/tls/#pwndbg.commands.tls.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/tls/#pwndbg.commands.tls.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='List all threads belonging to the selected inferior.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/tls/#pwndbg.commands.tls.threads","title":"<code>threads(num_threads, respect_config)</code>","text":""},{"location":"source/commands/tls/#pwndbg.commands.tls.tls","title":"<code>tls(pthread_self=False)</code>","text":""},{"location":"source/commands/valist/","title":"Valist","text":""},{"location":"source/commands/valist/#pwndbg.commands.valist.parser","title":"<code>parser = argparse.ArgumentParser(description='Dumps the arguments of a va_list.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/valist/#pwndbg.commands.valist.valist","title":"<code>valist(addr, count)</code>","text":""},{"location":"source/commands/version/","title":"Version","text":"<p>Displays gdb, python and pwndbg versions.</p>"},{"location":"source/commands/version/#pwndbg.commands.version.bugreport_group","title":"<code>bugreport_group = bugreport_parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.bugreport_parser","title":"<code>bugreport_parser = argparse.ArgumentParser(description='Generate a bug report.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.all_versions","title":"<code>all_versions()</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.bugreport","title":"<code>bugreport(run_browser=False, use_gh=False)</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.capstone_version","title":"<code>capstone_version()</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.unicorn_version","title":"<code>unicorn_version()</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.version","title":"<code>version()</code>","text":"<p>Displays GDB, Python, and pwndbg versions.</p>"},{"location":"source/commands/vmmap/","title":"Vmmap","text":"<p>Command to print the virtual memory map a la /proc/self/maps.</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.integer_types","title":"<code>integer_types = (int, pwndbg.dbg_mod.Value)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.parser","title":"<code>parser = argparse.ArgumentParser(description='Load virtual memory map pages from ELF file.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.calculate_total_memory","title":"<code>calculate_total_memory(pages)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.gap_text","title":"<code>gap_text(page)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.pages_filter","title":"<code>pages_filter(gdbval_or_str)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_adjacent_map","title":"<code>print_adjacent_map(map_start, map_end)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_gap","title":"<code>print_gap(current, last_map)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_guard","title":"<code>print_guard(page)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_map","title":"<code>print_map(page)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_vmmap_gaps","title":"<code>print_vmmap_gaps(pages)</code>","text":"<p>Indicates the size of adjacent memory regions and unmapped gaps between them in process memory</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_vmmap_gaps_table_header","title":"<code>print_vmmap_gaps_table_header()</code>","text":"<p>Prints the table header for the vmmap --gaps command.</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_vmmap_table_header","title":"<code>print_vmmap_table_header()</code>","text":"<p>Prints the table header for the vmmap command.</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap","title":"<code>vmmap(gdbval_or_str=None, writable=False, executable=False, lines_after=1, lines_before=1, context=None, gaps=False)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_add","title":"<code>vmmap_add(start, size, flags, offset)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_clear","title":"<code>vmmap_clear()</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_explore","title":"<code>vmmap_explore(address)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_load","title":"<code>vmmap_load(filename)</code>","text":""},{"location":"source/commands/windbg/","title":"Windbg","text":"<p>Compatibility functionality for Windbg users.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.da_parser","title":"<code>da_parser = argparse.ArgumentParser(description='Dump a string at the specified address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ds_parser","title":"<code>ds_parser = argparse.ArgumentParser(description='Dump a string at the specified address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.parser","title":"<code>parser = argparse.ArgumentParser(description='List the symbols nearest to the provided value.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bc","title":"<code>bc(which='*')</code>","text":"<p>Clear the breakpoint with the specified index.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bd","title":"<code>bd(which='*')</code>","text":"<p>Disable the breakpoint with the specified index.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.be","title":"<code>be(which='*')</code>","text":"<p>Enable the breakpoint with the specified index.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bl","title":"<code>bl()</code>","text":"<p>List breakpoints</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bp","title":"<code>bp(where)</code>","text":"<p>Set a breakpoint at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dX","title":"<code>dX(size, address, count, to_string=False, repeat=False)</code>","text":"<p>Traditionally, windbg will display 16 bytes of data per line.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.da","title":"<code>da(address, max)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.db","title":"<code>db(address, count=64)</code>","text":"<p>Starting at the specified address, dump N bytes (default 64).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dc","title":"<code>dc(address, count=8)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dd","title":"<code>dd(address, count=16)</code>","text":"<p>Starting at the specified address, dump N dwords (default 16).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dds","title":"<code>dds(addr)</code>","text":"<p>Dump pointers and symbols at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dq","title":"<code>dq(address, count=8)</code>","text":"<p>Starting at the specified address, dump N qwords (default 8).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ds","title":"<code>ds(address, max)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dw","title":"<code>dw(address, count=32)</code>","text":"<p>Starting at the specified address, dump N words (default 32).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eX","title":"<code>eX(size, address, data, hex=True)</code>","text":"<p>This relies on windbg's default hex encoding being enforced</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eb","title":"<code>eb(address, data)</code>","text":"<p>Write hex bytes at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ed","title":"<code>ed(address, data)</code>","text":"<p>Write hex dwords at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.enhex","title":"<code>enhex(size, value)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eq","title":"<code>eq(address, data)</code>","text":"<p>Write hex qwords at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ew","title":"<code>ew(address, data)</code>","text":"<p>Write hex words at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ez","title":"<code>ez(address, data)</code>","text":"<p>Write a character at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eza","title":"<code>eza(address, data)</code>","text":"<p>Write a string at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.go","title":"<code>go()</code>","text":"<p>Windbg compatibility alias for 'continue' command.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.k","title":"<code>k()</code>","text":"<p>Print a backtrace (alias 'bt')</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ln","title":"<code>ln(value=None)</code>","text":"<p>List the symbols nearest to the provided value.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.pc","title":"<code>pc()</code>","text":"<p>Windbg compatibility alias for 'nextcall' command.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.peb","title":"<code>peb()</code>","text":""},{"location":"source/commands/xinfo/","title":"Xinfo","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows offsets of the specified address from various useful locations.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.print_line","title":"<code>print_line(name, addr, first, second, op, width=20)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo","title":"<code>xinfo(address=None)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo_default","title":"<code>xinfo_default(page, addr)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo_mmap_file","title":"<code>xinfo_mmap_file(page, addr)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo_stack","title":"<code>xinfo_stack(page, addr)</code>","text":""},{"location":"source/commands/xor/","title":"Xor","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.parser","title":"<code>parser = argparse.ArgumentParser(description=\"Memfrobs a region of memory (xor with '*').\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.memfrob","title":"<code>memfrob(address, count)</code>","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.xor","title":"<code>xor(address, key, count)</code>","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.xor_memory","title":"<code>xor_memory(address, key, count)</code>","text":"<p>Helper function for xorring memory in gdb</p>"},{"location":"source/dbg/__init__/","title":"init","text":"<p>The abstracted debugger interface.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.dbg","title":"<code>dbg: Debugger = None</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch","title":"<code>Arch</code>","text":"<p>The definition of an architecture.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch.endian","title":"<code>endian: Literal['little', 'big']</code>  <code>property</code>","text":"<p>Wether code in this module is little or big.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the architecture.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch.ptrsize","title":"<code>ptrsize: int</code>  <code>property</code>","text":"<p>Length of the pointer in this module.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.BreakpointLocation","title":"<code>BreakpointLocation</code>","text":"<p>This is the location specification for a breakpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.BreakpointLocation.address","title":"<code>address: int = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.BreakpointLocation.__init__","title":"<code>__init__(address)</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.CommandHandle","title":"<code>CommandHandle</code>","text":"<p>An opaque handle to an installed command.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.CommandHandle.remove","title":"<code>remove()</code>","text":"<p>Removes this command from the command palette of the debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger","title":"<code>Debugger</code>","text":"<p>The base class representing a debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.add_command","title":"<code>add_command(name, handler, doc)</code>","text":"<p>Adds a command with the given name to the debugger, that invokes the given function every time it is called.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.addrsz","title":"<code>addrsz(address)</code>","text":"<p>Format the given address value.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.commands","title":"<code>commands()</code>","text":"<p>List the commands available in this session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.event_handler","title":"<code>event_handler(ty)</code>","text":"<p>Sets up the given function to be called when an event of the given type gets fired. Returns a callable that corresponds to the wrapped function. This function my be used as a decorator.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":"<p>The size of the command window, in characters, if available.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.has_event_type","title":"<code>has_event_type(ty)</code>","text":"<p>Whether the given event type is supported by this debugger. Indicates that a user either can or cannot register an event handler of this type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.history","title":"<code>history(last=10)</code>","text":"<p>The command history of the interactive session in this debugger.</p> <p>This function returns the last <code>last</code> items in the command history, as an oldest-to-youngest-sorted list of tuples, where the first element in each tuple is the index of the command in the history, and the second element is a string giving the command itself.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.is_gdblib_available","title":"<code>is_gdblib_available()</code>","text":"<p>Whether gdblib is available under this debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.lex_args","title":"<code>lex_args(command_line)</code>","text":"<p>Lexes the given command line into a list of arguments, according to the conventions of the debugger being used and of the interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.resume_events","title":"<code>resume_events(ty)</code>","text":"<p>Resume the delivery of all events of the given type, if previously suspeded through a call to <code>suspend_events</code>. Does nothing if the delivery has not been previously suspeded.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.selected_frame","title":"<code>selected_frame()</code>","text":"<p>The stack frame currently being focused on in this interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.selected_inferior","title":"<code>selected_inferior()</code>","text":"<p>The inferior process currently being focused on in this interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.selected_thread","title":"<code>selected_thread()</code>","text":"<p>The thread currently being focused on in this interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.set_python_diagnostics","title":"<code>set_python_diagnostics(enabled)</code>","text":"<p>Enables or disables Python diagnostic messages for this debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.set_sysroot","title":"<code>set_sysroot(sysroot)</code>","text":"<p>Sets the system root for this debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.setup","title":"<code>setup(*args)</code>","text":"<p>Perform debugger-specific initialization.</p> <p>This method should be run immediately after <code>pwndbg.dbg</code> is set to an instance of this class, and, as such, is allowed to run code that depends on it being set.</p> <p>Because we can't really know what a given debugger object will need as part of its setup process, we allow for as many arguments as desired to be passed in, and leave it up to the implementations to decide what they need. This shouldn't be a problem, seeing as, unlike other methods in this class, this should only be called as part of the debugger-specific bringup code.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.string_limit","title":"<code>string_limit()</code>","text":"<p>The maximum size of a string.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.supports_breakpoint_creation_during_stop_handler","title":"<code>supports_breakpoint_creation_during_stop_handler()</code>","text":"<p>Whether breakpoint or watchpoint creation through <code>break_at</code> is supported during breakpoint stop handlers.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.suspend_events","title":"<code>suspend_events(ty)</code>","text":"<p>Suspend delivery of all events of the given type until it is resumed through a call to <code>resume_events</code>.</p> <p>Events triggered during a suspension will be ignored, and will not be delived, even after delivery is resumed.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.x86_disassembly_flavor","title":"<code>x86_disassembly_flavor()</code>","text":"<p>The flavor of disassembly to use for x86 targets.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction","title":"<code>DisassembledInstruction</code>","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction.addr","title":"<code>addr: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction.asm","title":"<code>asm: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction.length","title":"<code>length: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Error","title":"<code>Error</code>","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType","title":"<code>EventType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Events that can be listened for and reacted to in a debugger.</p> The events types listed here are defined as follows <ul> <li><code>START</code>: This event is fired some time between the creation of or   attachment to the process to be debugged, and the start of its   execution.</li> <li><code>STOP</code>: This event is fired after execution of the process has been   suspended, but before control is returned to the user for interactive   debugging.</li> <li><code>EXIT</code>: This event is fired after the process being debugged has been   detached from or has finished executing.</li> <li><code>MEMORY_CHANGED</code>: This event is fired when the user interactively makes   changes to the memory of the process being debugged.</li> <li><code>REGISTER_CHANGED</code>: Like <code>MEMORY_CHANGED</code>, but for registers.</li> <li><code>CONTINUE</code>: This event is fired after the user has requested for   process execution to continue after it had been previously suspended.</li> <li><code>NEW_MODULE</code>: This event is fired when a new application module has   been encountered by the debugger. This usually happens when a new   application module is loaded into the memory space of the process being   debugged. In GDB terminology, these are called <code>objfile</code>s.</li> </ul>"},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.CONTINUE","title":"<code>CONTINUE = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.EXIT","title":"<code>EXIT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.MEMORY_CHANGED","title":"<code>MEMORY_CHANGED = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.NEW_MODULE","title":"<code>NEW_MODULE = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.REGISTER_CHANGED","title":"<code>REGISTER_CHANGED = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.START","title":"<code>START = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.STOP","title":"<code>STOP = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.ExecutionController","title":"<code>ExecutionController</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.ExecutionController.cont","title":"<code>cont(until)</code>","text":"<p>Continues execution until the given breakpoint or whatchpoint is hit.</p> <p>Throws <code>CancelledError</code> if a breakpoint or watchpoint is hit that is not the one given in <code>until</code>, the program exits, or if any other unexpected event happens.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.ExecutionController.single_step","title":"<code>single_step()</code>","text":"<p>Steps to the next instruction.</p> <p>Throws <code>CancelledError</code> if a breakpoint or watchpoint is hit, the program exits, or if any other unexpected event that diverts execution happens while fulfulling the step.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame","title":"<code>Frame</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.__eq__","title":"<code>__eq__(rhs)</code>","text":"<p>Whether this frame is the same as the given frame. Two frames are the same if they point to the same stack frame and have the same execution context.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.child","title":"<code>child()</code>","text":"<p>The child frame of this frame, if it exists.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.evaluate_expression","title":"<code>evaluate_expression(expression, lock_scheduler=False)</code>","text":"<p>Evaluate the given expression in the context of this frame, and return a <code>Value</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.evaluate_expression--lock_scheduler","title":"<code>lock_scheduler</code>","text":"<p>Additionally, callers of this function might specify that they want to enable scheduler locking during the evaluation of this expression. This is a GDB-only option, and is intended for cases in which the result would be incorrect without it enabled, when running in GDB. Other debuggers should ignore this parameter.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.lookup_symbol","title":"<code>lookup_symbol(name, *, type=SymbolLookupType.ANY)</code>","text":"<p>Looks up and returns the address of a symbol in current frame by its name.</p> <p>Parameters: - name (str): The name of the symbol to look up. - type (SymbolLookupType, optional): The type of symbol to search for. Defaults   to SymbolLookupType.ANY.</p> <p>Returns: - pwndbg.dbg_mod.Value | None: The value of the symbol if found, or None if not found.</p> <p>Raises: - pwndbg.dbg_mod.Error: If symbol name contains invalid characters</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.parent","title":"<code>parent()</code>","text":"<p>The parent frame of this frame, if it exists.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.pc","title":"<code>pc()</code>","text":"<p>The value of the program counter for this frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.reg_write","title":"<code>reg_write(name, val)</code>","text":"<p>Sets the value of the register with the given name to the given value. Returns true if the register exists, false othewise. Throws an exception if the register exists but cannot be written to.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.regs","title":"<code>regs()</code>","text":"<p>Access the values of the registers in this frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.sal","title":"<code>sal()</code>","text":"<p>The filename of the source code file associated with this frame, and the line number associated with it, if available.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.sp","title":"<code>sp()</code>","text":"<p>The value of the stack pointer for this frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap","title":"<code>MemoryMap</code>","text":"<p>A wrapper around a sequence of memory ranges</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap.is_qemu","title":"<code>is_qemu()</code>","text":"<p>Returns whether this memory map was generated from a QEMU target.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap.ranges","title":"<code>ranges()</code>","text":"<p>Returns all ranges in this memory map.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process","title":"<code>Process</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.alive","title":"<code>alive()</code>","text":"<p>Returns whether this process is alive.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.arch","title":"<code>arch()</code>","text":"<p>The default architecture of this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.break_at","title":"<code>break_at(location, stop_handler=None, internal=False)</code>","text":"<p>Install a breakpoint or watchpoint at the given location.</p> <p>The type of the location determines whether the newly created object is a watchpoint or a breakpoint. <code>BreakpointLocation</code> locations yield breakpoints, while <code>WatchpointLocation</code> locations yield watchpoints.</p> <p>Aditionally, one may specify a stop handler function, to be run when the breakpoint or whatchpoint is hit, and that determines whether execution should stop. With a return value of <code>True</code> being interpreted as a signal to stop, and a return value of <code>False</code> being interpreted as a signal to continue execution. The extent of the actions that may be taken during the stop handler is determined by the debugger.</p> <p>Marking a breakpoint or watchpoint as <code>internal</code> hints to the implementation that the created breakpoint or watchpoint should not be directly nameable by the user, and that it should not print any messages upon being triggered. Implementations should try to honor this hint, but they are not required to in case honoring it is either not possible or comes at a significant impact to performance.</p> <p>This function returns a handle to the newly created breakpoint or watchpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.create_value","title":"<code>create_value(value, type=None)</code>","text":"<p>Create a new value in the context of this process, with the given value and, optionally, type. If no type is provided, one will be chosen automatically.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.disasm","title":"<code>disasm(address)</code>","text":"<p>Returns the disassembled instruction at the given address in the address space of the running process, or <code>None</code> if there's no valid instruction at that address.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.dispatch_execution_controller","title":"<code>dispatch_execution_controller(procedure)</code>","text":"<p>Queues up the given execution controller-based coroutine for execution, sometime between the calling of this function and the</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.download_remote_file","title":"<code>download_remote_file(remote_path, local_path)</code>","text":"<p>Downloads the given file from the remote host and saves it to the local given path. Should only be called if <code>is_remote()</code> is true.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.evaluate_expression","title":"<code>evaluate_expression(expression)</code>","text":"<p>Evaluate the given expression in the context of the current process, and return a <code>Value</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.find_in_memory","title":"<code>find_in_memory(pattern, start, size, align, max_matches=-1, step=-1)</code>","text":"<p>Searches for a bit pattern in the memory space of the process. The bit pattern can be searched for in a given memory range, and with a given alignment. The maximum number of matches that will be generated is given by <code>max_matches</code>. A value of <code>max_matches</code> of <code>-1</code> will generate all matches.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_dynamically_linked","title":"<code>is_dynamically_linked()</code>","text":"<p>Returns whether this process makes use of dynamically linked libraries.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_dynamically_linked--dynamically-linked","title":"<code>\"dynamically linked\"</code>","text":"<p>What exactly it means to be \"dynamically linked\" here is a little ill-defined. Ideally, this function should return true if the process uses the default dynamic linker for the system, as that would better reflect whether the process uses dynamic linking.</p> <p>Currently, though, Pwndbg expects it to behave the same as a check for the string \"No shared libraries loaded at this time.\" in the output of the <code>info dll</code> GDB command, which checks for the presence of other modules in the address space of the process, rather than whether or not the dynamic linker is used.</p> <p>We should probably sort this out in the future.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_linux","title":"<code>is_linux()</code>","text":"<p>Returns whether the current ABI is GNU/Linux.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_remote","title":"<code>is_remote()</code>","text":"<p>Returns whether this process is a remote process connected to using the GDB remote debugging protocol.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.lookup_symbol","title":"<code>lookup_symbol(name, *, prefer_static=False, type=SymbolLookupType.ANY, objfile_endswith=None)</code>","text":"<p>Looks up and returns the address of a symbol by its name.</p> <p>Parameters: - name (str): The name of the symbol to look up. - prefer_static (bool, optional): If True, prioritize symbols in the static block,   if supported by the debugger. Defaults to False. - type (SymbolLookupType, optional): The type of symbol to search for. Defaults   to SymbolLookupType.ANY. - objfile_endswith (str | None, optional): If specified, limits the search to the   first object file whose name ends with the provided string.</p> <p>Returns: - pwndbg.dbg_mod.Value | None: The value of the symbol if found, or None if not found.</p> <p>Raises: - pwndbg.dbg_mod.Error: If no object file matching the <code>objfile_endswith</code> pattern is found.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.main_module_entry","title":"<code>main_module_entry()</code>","text":"<p>Returns the entry point of the main module.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.main_module_name","title":"<code>main_module_name()</code>","text":"<p>Returns the name of the main module.</p> <p>On remote targets, this may be prefixed with \"target:\" string.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.module_section_locations","title":"<code>module_section_locations()</code>","text":"<p>Return a list of (address, size, section_name, module_name) tuples for the loaded sections in every module of this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.pid","title":"<code>pid()</code>","text":"<p>Returns the process ID of this process if it is alive.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.read_memory","title":"<code>read_memory(address, size, partial=False)</code>","text":"<p>Reads the requested number of bytes from the address given in the memory space of this process. Will read as many bytes as possible starting at that location, and returns how many were read.</p> <p>Throws an exception if reading fails and partial is False.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.send_monitor","title":"<code>send_monitor(cmd)</code>","text":"<p>Sends the given monitor command to the GDB remote debugging protocol server. Should only be called if <code>is_remote()</code> is true.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.send_remote","title":"<code>send_remote(packet)</code>","text":"<p>Sends the given packet to the GDB remote debugging protocol server. Should only be called if <code>is_remote()</code> is true.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.stopped_with_signal","title":"<code>stopped_with_signal()</code>","text":"<p>Returns whether this process was stopped by a signal.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.symbol_name_at_address","title":"<code>symbol_name_at_address(address)</code>","text":"<p>Returns the name of the symbol at the given address in the program, if one exists.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.threads","title":"<code>threads()</code>","text":"<p>Returns a list containing the threads in this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.types_with_name","title":"<code>types_with_name(name)</code>","text":"<p>Returns a list of all types in this process that match the given name.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.vmmap","title":"<code>vmmap()</code>","text":"<p>Returns the virtual memory map of this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.write_memory","title":"<code>write_memory(address, data, partial=False)</code>","text":"<p>Writes as many bytes from the given data buffer as possible into the given address in the memory space of this process.</p> <p>Throws an exception if writing fails and partial is False.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Registers","title":"<code>Registers</code>","text":"<p>A handle to the register values in a frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Registers.by_name","title":"<code>by_name(name)</code>","text":"<p>Gets the value of a register if it exists, None otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.StopPoint","title":"<code>StopPoint</code>","text":"<p>The handle to either an insalled breakpoint or watchpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.StopPoint.remove","title":"<code>remove()</code>","text":"<p>Removes the breakpoint associated with this handle.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.StopPoint.set_enabled","title":"<code>set_enabled(enabled)</code>","text":"<p>Enables or disables this breakpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.SymbolLookupType","title":"<code>SymbolLookupType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing types of symbol lookups for filtering symbol searches.</p> <p>Attributes: - ANY: Represents searching for any symbol type (default). - FUNCTION: Represents searching specifically for function symbols. - VARIABLE: Represents searching specifically for variable symbols.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.SymbolLookupType.ANY","title":"<code>ANY = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.SymbolLookupType.FUNCTION","title":"<code>FUNCTION = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.SymbolLookupType.VARIABLE","title":"<code>VARIABLE = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread","title":"<code>Thread</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread.bottom_frame","title":"<code>bottom_frame()</code>","text":"<p>Frame at the bottom of the call stack for this thread.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread.index","title":"<code>index()</code>","text":"<p>The unique index of this thread from the perspective of the debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread.ptid","title":"<code>ptid()</code>","text":"<p>The PTID of this thread, if available.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type","title":"<code>Type</code>","text":"<p>Class representing a type in the context of an inferior process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.alignof","title":"<code>alignof: int</code>  <code>property</code>","text":"<p>The alignment of this type, in bytes.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.code","title":"<code>code: TypeCode</code>  <code>property</code>","text":"<p>What category of type this object belongs to.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.name_identifier","title":"<code>name_identifier: str | None</code>  <code>property</code>","text":"<p>Returns the identifier of this type, eg: - someStructName - someEnumName - someTypedefName</p> <p>Returns None if the type is anonymous or does not have a name, such as: - Anonymous structs - Anonymous Typedefs - Basic types like char[], void, etc.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.name_to_human_readable","title":"<code>name_to_human_readable: str</code>  <code>property</code>","text":"<p>Returns the human friendly name of this type, eg: - char [16] - int - char * - void * - fooStructName - barEnumName - barTypedefName</p> <p>This function is not standardized, may return different names in gdb/lldb, eg: gdb: <code>char [16]</code> or <code>char [50]</code> or <code>struct {...}</code> lldb: <code>char[16]</code> or <code>char[]</code>    or <code>(anonymous struct)</code></p> <p>You should not use this function. Only for human eyes.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.sizeof","title":"<code>sizeof: int</code>  <code>property</code>","text":"<p>The size of this type, in bytes.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.__eq__","title":"<code>__eq__(rhs)</code>","text":"<p>Returns True if types are the same</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.array","title":"<code>array(count)</code>","text":"<p>Return a type that corresponds to an array whose elements have this type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.enum_member","title":"<code>enum_member(field_name)</code>","text":"<p>Retrieve the integer value of an enum member.</p> <p>It returns: - integer value, when found field - returns None, If the field does not exist</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.fields","title":"<code>fields()</code>","text":"<p>List of all fields in this type, if it is a structured type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.func_arguments","title":"<code>func_arguments()</code>","text":"<p>Returns a list of function arguments type.</p> <p>Returns:</p> Type Description <code>List[Type] | None</code> <p>List[Type] | None: The function arguments type, or None if debug information is missing.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If called on an unsupported type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.has_field","title":"<code>has_field(name)</code>","text":"<p>Whether this type has a field with the given name.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.keys","title":"<code>keys()</code>","text":"<p>Returns a list containing all the field names of this type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.offsetof","title":"<code>offsetof(field_name)</code>","text":"<p>Calculate the byte offset of a field within a struct or union.</p> <p>This method recursively traverses nested structures and unions, and it computes the byte-aligned offset for the specified field.</p> <p>It returns: - offset in bytes if found - None if the field doesn't exist or if an unsupported alignment/bit-field is encountered</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.pointer","title":"<code>pointer()</code>","text":"<p>Return a pointer type that has this type as its pointee.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.strip_typedefs","title":"<code>strip_typedefs()</code>","text":"<p>Return a type that corresponds to the base type after a typedef chain, if this is a typedef. Returns the type itself otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.target","title":"<code>target()</code>","text":"<p>Return the target of this reference type, if this is a reference type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode","title":"<code>TypeCode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Broad categories of types.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.ARRAY","title":"<code>ARRAY = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.BOOL","title":"<code>BOOL = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.ENUM","title":"<code>ENUM = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.FUNC","title":"<code>FUNC = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.INT","title":"<code>INT = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.INVALID","title":"<code>INVALID = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.POINTER","title":"<code>POINTER = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.STRUCT","title":"<code>STRUCT = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.TYPEDEF","title":"<code>TYPEDEF = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.UNION","title":"<code>UNION = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField","title":"<code>TypeField</code>","text":"<p>The fields in a structured type.</p> <p>Currently this is just a mirror of <code>gdb.Field</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.artificial","title":"<code>artificial = artificial</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.bitpos","title":"<code>bitpos = bitpos</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.bitsize","title":"<code>bitsize = bitsize</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.enumval","title":"<code>enumval = enumval</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.is_base_class","title":"<code>is_base_class = is_base_class</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.parent_type","title":"<code>parent_type = parent_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.__init__","title":"<code>__init__(bitpos, name, type, parent_type, enumval=None, artificial=False, is_base_class=False, bitsize=0)</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Value","title":"<code>Value</code>","text":"<p>Class representing a value in the context of an inferior process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.address","title":"<code>address: Value | None</code>  <code>property</code>","text":"<p>The address of this value, in memory, if addressable, otherwise <code>None</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.is_optimized_out","title":"<code>is_optimized_out: bool</code>  <code>property</code>","text":"<p>Whether this value is present in debugging information, but has been optimized out of the actual program.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.type","title":"<code>type: Type</code>  <code>property</code>","text":"<p>The type associated with this value.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__add__","title":"<code>__add__(rhs)</code>","text":"<p>Adds an integer to this value, if that makes sense. Throws an exception otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__getitem__","title":"<code>__getitem__(idx)</code>","text":"<p>Gets the value with the given name that belongs to this value. For structure types, this is the field with the given name. For array types, this is the field at the given index. For pointer types, this is the value of <code>*(ptr+idx)</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__int__","title":"<code>__int__()</code>","text":"<p>Converts this value to an integer, if possible.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__sub__","title":"<code>__sub__(rhs)</code>","text":"<p>Subtract an integer from this value, if that makes sense. Throws an exception otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.cast","title":"<code>cast(type)</code>","text":"<p>Returns a new value with the same value as this object, but of the given type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.dereference","title":"<code>dereference()</code>","text":"<p>If this is a poitner value, dereferences the pointer and returns a new instance of Value, containing the value pointed to by this pointer.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.fetch_lazy","title":"<code>fetch_lazy()</code>","text":"<p>Fetches the value if it is lazy, does nothing otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.string","title":"<code>string()</code>","text":"<p>If this value is a string, then this method converts it to a Python string.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.value_to_human_readable","title":"<code>value_to_human_readable()</code>","text":"Text Only<pre><code>    Converts a Value to a human-readable string representation.\n\n    The format is similar to what is produced by the `str()` function for gdb.Value,\n    displaying nested fields and pointers in a user-friendly way.\n\n    **Usage Notes:**\n    - This function is intended solely for displaying results to the user.\n    - The output format may differ between debugger implementations (e.g., GDB vs LLDB),\n      as each debugger may format values differently. For instance:\n        - GDB might produce: '{\n</code></pre> <p>value = 0,   inner = {     next = 0x555555558098    } }'             - LLDB might produce: '(inner_a_node) *$PWNDBG_CREATED_VALUE_0 = {   value = 0   inner = {     next = 0x0000555555558098   } }'         - As such, this function should not be relied upon for parsing or programmatic use."},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation","title":"<code>WatchpointLocation</code>","text":"<p>This is the location specification for a watchpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.address","title":"<code>address: int = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.size","title":"<code>size: int = size</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.watch_read","title":"<code>watch_read: bool = watch_read</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.watch_write","title":"<code>watch_write: bool = watch_write</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.__init__","title":"<code>__init__(address, size, watch_read, watch_write)</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.selection","title":"<code>selection(target, get_current, select)</code>","text":"<p>Debuggers have global state. Many of our queries require that we select a given object globally before we make them. When doing that, we must always be careful to return selection to its previous state before exiting. This class automatically manages the selection of a single object type.</p> <p>Upon entrace to the <code>with</code> block, the element given by <code>target</code> will be compared to the object returned by calling <code>get_current</code>. If they compare different, the value previously returned by <code>get_current</code> is saved, and the element given by <code>target</code> will be selected by passing it as an argument to <code>select</code>, and, after execution leaves the <code>with</code> block, the previously saved element will be selected in the same fashion as the first element.</p> <p>If the elements don't compare different, this is a no-op.</p>"},{"location":"source/dbg/gdb/__init__/","title":"init","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.BPWP_DEFERRED_DELETE","title":"<code>BPWP_DEFERRED_DELETE: Set[GDBStopPoint] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.BPWP_DEFERRED_DISABLE","title":"<code>BPWP_DEFERRED_DISABLE: Set[GDBStopPoint] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.BPWP_DEFERRED_ENABLE","title":"<code>BPWP_DEFERRED_ENABLE: Set[GDBStopPoint] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.EXECUTION_CONTROLLER","title":"<code>EXECUTION_CONTROLLER = GDBExecutionController()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.BreakpointAdapter","title":"<code>BreakpointAdapter</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.BreakpointAdapter.stop_handler","title":"<code>stop_handler: Callable[[], bool]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.BreakpointAdapter.stop","title":"<code>stop()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB","title":"<code>GDB</code>","text":"<p>               Bases: <code>Debugger</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.add_command","title":"<code>add_command(name, handler, doc)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.addrsz","title":"<code>addrsz(address)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.commands","title":"<code>commands()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.event_handler","title":"<code>event_handler(ty)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":"<p>Get the size of the command window.</p> <p>GDB keeps these parameters up to date with the actual window size of the command output. This is the full terminal size in CLI mode or the size of the cmd window in TUI mode.</p> <p>When the window size is set to be unlimited (0), the parameter is None.</p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.has_event_type","title":"<code>has_event_type(ty)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.history","title":"<code>history(last=10)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.is_gdblib_available","title":"<code>is_gdblib_available()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.lex_args","title":"<code>lex_args(command_line)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.resume_events","title":"<code>resume_events(ty)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.selected_frame","title":"<code>selected_frame()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.selected_inferior","title":"<code>selected_inferior()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.selected_thread","title":"<code>selected_thread()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.set_python_diagnostics","title":"<code>set_python_diagnostics(enabled)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.set_sysroot","title":"<code>set_sysroot(sysroot)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.setup","title":"<code>setup()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.string_limit","title":"<code>string_limit()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.supports_breakpoint_creation_during_stop_handler","title":"<code>supports_breakpoint_creation_during_stop_handler()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.suspend_events","title":"<code>suspend_events(ty)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDB.x86_disassembly_flavor","title":"<code>x86_disassembly_flavor()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBArch","title":"<code>GDBArch</code>","text":"<p>               Bases: <code>Arch</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBArch.endian","title":"<code>endian: Literal['little', 'big']</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBArch.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBArch.ptrsize","title":"<code>ptrsize: int</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBArch.__init__","title":"<code>__init__(endian, name, ptrsize)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommand","title":"<code>GDBCommand</code>","text":"<p>               Bases: <code>Command</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommand.__doc__","title":"<code>__doc__ = doc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommand.debugger","title":"<code>debugger = debugger</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommand.handler","title":"<code>handler = handler</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommand.__init__","title":"<code>__init__(debugger, name, handler, doc)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommand.invoke","title":"<code>invoke(args, from_tty)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommandHandle","title":"<code>GDBCommandHandle</code>","text":"<p>               Bases: <code>CommandHandle</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommandHandle.command","title":"<code>command = command</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommandHandle.__init__","title":"<code>__init__(command)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBCommandHandle.remove","title":"<code>remove()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBExecutionController","title":"<code>GDBExecutionController</code>","text":"<p>               Bases: <code>ExecutionController</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBExecutionController.cont","title":"<code>cont(until)</code>  <code>async</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBExecutionController.single_step","title":"<code>single_step()</code>  <code>async</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame","title":"<code>GDBFrame</code>","text":"<p>               Bases: <code>Frame</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.__eq__","title":"<code>__eq__(rhs)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.child","title":"<code>child()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.evaluate_expression","title":"<code>evaluate_expression(expression, lock_scheduler=False)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.lookup_symbol","title":"<code>lookup_symbol(name, *, type=pwndbg.dbg_mod.SymbolLookupType.ANY)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.parent","title":"<code>parent()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.pc","title":"<code>pc()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.reg_write","title":"<code>reg_write(name, val)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.regs","title":"<code>regs()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.sal","title":"<code>sal()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBFrame.sp","title":"<code>sp()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBMemoryMap","title":"<code>GDBMemoryMap</code>","text":"<p>               Bases: <code>MemoryMap</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBMemoryMap.pages","title":"<code>pages = pages</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBMemoryMap.qemu","title":"<code>qemu = qemu</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBMemoryMap.__init__","title":"<code>__init__(qemu, pages)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBMemoryMap.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBMemoryMap.ranges","title":"<code>ranges()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess","title":"<code>GDBProcess</code>","text":"<p>               Bases: <code>Process</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.in_bpwp_stop_handler","title":"<code>in_bpwp_stop_handler: bool = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.alive","title":"<code>alive()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.arch","title":"<code>arch()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.break_at","title":"<code>break_at(location, stop_handler=None, internal=False)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.create_value","title":"<code>create_value(value, type=None)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.disasm","title":"<code>disasm(address)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.dispatch_execution_controller","title":"<code>dispatch_execution_controller(procedure)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.download_remote_file","title":"<code>download_remote_file(remote_path, local_path)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.evaluate_expression","title":"<code>evaluate_expression(expression)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.find_in_memory","title":"<code>find_in_memory(pattern, start, size, align, max_matches=-1, step=-1)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.is_dynamically_linked","title":"<code>is_dynamically_linked()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.is_linux","title":"<code>is_linux()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.lookup_symbol","title":"<code>lookup_symbol(name, *, prefer_static=False, type=pwndbg.dbg_mod.SymbolLookupType.ANY, objfile_endswith=None)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.main_module_entry","title":"<code>main_module_entry()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.main_module_name","title":"<code>main_module_name()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.module_section_locations","title":"<code>module_section_locations()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.pid","title":"<code>pid()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.read_memory","title":"<code>read_memory(address, size, partial=False)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.send_monitor","title":"<code>send_monitor(cmd)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.send_remote","title":"<code>send_remote(packet)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.stopped_with_signal","title":"<code>stopped_with_signal()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.symbol_name_at_address","title":"<code>symbol_name_at_address(address)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.threads","title":"<code>threads()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.types_with_name","title":"<code>types_with_name(name)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.vmmap","title":"<code>vmmap()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBProcess.write_memory","title":"<code>write_memory(address, data, partial=False)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBRegisters","title":"<code>GDBRegisters</code>","text":"<p>               Bases: <code>Registers</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBRegisters.frame","title":"<code>frame = frame</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBRegisters.__init__","title":"<code>__init__(frame)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBRegisters.by_name","title":"<code>by_name(name)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint","title":"<code>GDBStopPoint</code>","text":"<p>               Bases: <code>StopPoint</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint.inner","title":"<code>inner: gdb.Breakpoint = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint.inner_stop","title":"<code>inner_stop: Callable[[], bool] | None = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint.proc","title":"<code>proc: GDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint.remove","title":"<code>remove()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBStopPoint.set_enabled","title":"<code>set_enabled(enabled)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBThread","title":"<code>GDBThread</code>","text":"<p>               Bases: <code>Thread</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBThread.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBThread.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBThread.bottom_frame","title":"<code>bottom_frame()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBThread.index","title":"<code>index()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBThread.ptid","title":"<code>ptid()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType","title":"<code>GDBType</code>","text":"<p>               Bases: <code>Type</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.CODE_MAPPING","title":"<code>CODE_MAPPING = {gdb.TYPE_CODE_BOOL: pwndbg.dbg_mod.TypeCode.BOOL, gdb.TYPE_CODE_INT: pwndbg.dbg_mod.TypeCode.INT, gdb.TYPE_CODE_UNION: pwndbg.dbg_mod.TypeCode.UNION, gdb.TYPE_CODE_STRUCT: pwndbg.dbg_mod.TypeCode.STRUCT, gdb.TYPE_CODE_ENUM: pwndbg.dbg_mod.TypeCode.ENUM, gdb.TYPE_CODE_TYPEDEF: pwndbg.dbg_mod.TypeCode.TYPEDEF, gdb.TYPE_CODE_PTR: pwndbg.dbg_mod.TypeCode.POINTER, gdb.TYPE_CODE_ARRAY: pwndbg.dbg_mod.TypeCode.ARRAY, gdb.TYPE_CODE_FUNC: pwndbg.dbg_mod.TypeCode.FUNC, gdb.TYPE_CODE_METHOD: pwndbg.dbg_mod.TypeCode.FUNC}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.alignof","title":"<code>alignof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.code","title":"<code>code: pwndbg.dbg_mod.TypeCode</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.name_identifier","title":"<code>name_identifier: str | None</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.name_to_human_readable","title":"<code>name_to_human_readable: str</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.sizeof","title":"<code>sizeof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.__eq__","title":"<code>__eq__(rhs)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.array","title":"<code>array(count)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.fields","title":"<code>fields()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.func_arguments","title":"<code>func_arguments()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.has_field","title":"<code>has_field(name)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.keys","title":"<code>keys()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.offsetof","title":"<code>offsetof(field_name)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.pointer","title":"<code>pointer()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.strip_typedefs","title":"<code>strip_typedefs()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBType.target","title":"<code>target()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue","title":"<code>GDBValue</code>","text":"<p>               Bases: <code>Value</code></p>"},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.address","title":"<code>address: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.is_optimized_out","title":"<code>is_optimized_out: bool</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.type","title":"<code>type: pwndbg.dbg_mod.Type</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.__add__","title":"<code>__add__(rhs)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.__sub__","title":"<code>__sub__(rhs)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.cast","title":"<code>cast(type)</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.dereference","title":"<code>dereference()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.fetch_lazy","title":"<code>fetch_lazy()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.string","title":"<code>string()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.GDBValue.value_to_human_readable","title":"<code>value_to_human_readable()</code>","text":""},{"location":"source/dbg/gdb/__init__/#pwndbg.dbg.gdb.parse_and_eval","title":"<code>parse_and_eval(expression, global_context)</code>","text":"<p>Same as <code>gdb.parse_and_eval</code>, but only uses <code>global_context</code> if it is supported by the current version of GDB.</p> <p><code>global_context</code> was introduced in GDB 14.</p>"},{"location":"source/dbg/gdb/debug_sym/","title":"Debug sym","text":""},{"location":"source/dbg/gdb/symbol/","title":"Symbol","text":"<p>Looking up addresses for function names / symbols, and vice-versa.</p>"},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.DOMAIN_MAPPING","title":"<code>DOMAIN_MAPPING = {Domain.ANY: gdb.SYMBOL_VAR_DOMAIN, Domain.VARIABLE: gdb.SYMBOL_VAR_DOMAIN, Domain.FUNCTION: gdb.SYMBOL_FUNCTION_DOMAIN}</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.order_prefs","title":"<code>order_prefs = {True: (_global_static_symbol_to_address, _global_exported_symbol_to_address), False: (_global_exported_symbol_to_address, _global_static_symbol_to_address)}</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.skipped_exceptions","title":"<code>skipped_exceptions = ('No frame selected', 'Cannot find thread-local')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.Domain","title":"<code>Domain</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.Domain.ANY","title":"<code>ANY = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.Domain.FUNCTION","title":"<code>FUNCTION = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.Domain.VARIABLE","title":"<code>VARIABLE = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.Domain.validate","title":"<code>validate(sym)</code>","text":""},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.lookup_frame_symbol","title":"<code>lookup_frame_symbol(name, *, domain=Domain.ANY)</code>","text":"<p>Get the address for local <code>symbol</code> from frame, in most time you don't need it</p>"},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.lookup_symbol","title":"<code>lookup_symbol(name, *, prefer_static=False, domain=Domain.ANY, objfile_endswith=None)</code>","text":"<p>Get the address for <code>symbol</code></p>"},{"location":"source/dbg/gdb/symbol/#pwndbg.dbg.gdb.symbol.resolve_addr","title":"<code>resolve_addr(address)</code>","text":"<p>Retrieve the name for the symbol located at <code>address</code> Empty string if no symbol</p>"},{"location":"source/dbg/lldb/__init__/","title":"init","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.EXECUTION_CONTROLLER","title":"<code>EXECUTION_CONTROLLER = LLDBExecutionController()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB_VERSION","title":"<code>LLDB_VERSION: Tuple[int, int] = None</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB","title":"<code>LLDB</code>","text":"<p>               Bases: <code>Debugger</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.controllers","title":"<code>controllers: List[Tuple[LLDBProcess, Coroutine[Any, Any, None]]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.event_handlers","title":"<code>event_handlers: Dict[pwndbg.dbg_mod.EventType, List[Callable[..., T]]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.exec_states","title":"<code>exec_states: List[lldb.SBExecutionState]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.prompt_hook","title":"<code>prompt_hook: Callable[[], None]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.suspended_events","title":"<code>suspended_events: Dict[pwndbg.dbg_mod.EventType, bool]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.add_command","title":"<code>add_command(command_name, handler, doc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.addrsz","title":"<code>addrsz(address)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.commands","title":"<code>commands()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.event_handler","title":"<code>event_handler(ty)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.has_event_type","title":"<code>has_event_type(ty)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.history","title":"<code>history(last=10)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.is_gdblib_available","title":"<code>is_gdblib_available()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.lex_args","title":"<code>lex_args(command_line)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.resume_events","title":"<code>resume_events(ty)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.selected_frame","title":"<code>selected_frame()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.selected_inferior","title":"<code>selected_inferior()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.selected_thread","title":"<code>selected_thread()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.set_python_diagnostics","title":"<code>set_python_diagnostics(enabled)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.set_sysroot","title":"<code>set_sysroot(sysroot)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.setup","title":"<code>setup(*args, **kwargs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.string_limit","title":"<code>string_limit()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.supports_breakpoint_creation_during_stop_handler","title":"<code>supports_breakpoint_creation_during_stop_handler()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.suspend_events","title":"<code>suspend_events(ty)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.x86_disassembly_flavor","title":"<code>x86_disassembly_flavor()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch","title":"<code>LLDBArch</code>","text":"<p>               Bases: <code>Arch</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.endian","title":"<code>endian: Literal['little', 'big']</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.ptrsize","title":"<code>ptrsize: int</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.__init__","title":"<code>__init__(name, ptrsize, endian)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand","title":"<code>LLDBCommand</code>","text":"<p>               Bases: <code>CommandHandle</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand.command_name","title":"<code>command_name = command_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand.handler_name","title":"<code>handler_name = handler_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand.__init__","title":"<code>__init__(handler_name, command_name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBExecutionController","title":"<code>LLDBExecutionController</code>","text":"<p>               Bases: <code>ExecutionController</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBExecutionController.cont","title":"<code>cont(target)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBExecutionController.single_step","title":"<code>single_step()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame","title":"<code>LLDBFrame</code>","text":"<p>               Bases: <code>Frame</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.inner","title":"<code>inner: lldb.SBFrame = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.__eq__","title":"<code>__eq__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.child","title":"<code>child()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.evaluate_expression","title":"<code>evaluate_expression(expression, lock_scheduler=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.lookup_symbol","title":"<code>lookup_symbol(name, *, type=pwndbg.dbg_mod.SymbolLookupType.ANY)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.parent","title":"<code>parent()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.pc","title":"<code>pc()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.reg_write","title":"<code>reg_write(name, val)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.regs","title":"<code>regs()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.sal","title":"<code>sal()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.sp","title":"<code>sp()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap","title":"<code>LLDBMemoryMap</code>","text":"<p>               Bases: <code>MemoryMap</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.pages","title":"<code>pages = pages</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.__init__","title":"<code>__init__(pages)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.ranges","title":"<code>ranges()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess","title":"<code>LLDBProcess</code>","text":"<p>               Bases: <code>Process</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.dbg","title":"<code>dbg = dbg</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.process","title":"<code>process = process</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.target","title":"<code>target = target</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.__init__","title":"<code>__init__(dbg, process, target, is_gdb_remote)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.alive","title":"<code>alive()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.arch","title":"<code>arch()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.break_at","title":"<code>break_at(location, stop_handler=None, internal=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.create_value","title":"<code>create_value(value, type=None)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.disasm","title":"<code>disasm(address)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.dispatch_execution_controller","title":"<code>dispatch_execution_controller(procedure)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.download_remote_file","title":"<code>download_remote_file(remote_path, local_path)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.evaluate_expression","title":"<code>evaluate_expression(expression)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.find_in_memory","title":"<code>find_in_memory(pattern, start, size, align, max_matches=-1, step=-1)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.find_largest_range_len","title":"<code>find_largest_range_len(min_search, max_search, test)</code>","text":"<p>Finds the largest memory range given a minimum and a maximum value for the size of the rage. This is a binary search, so it should do on the order of log2(max_search - min_search) attempts before it arrives at an answer.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.get_known_pages","title":"<code>get_known_pages()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.is_dynamically_linked","title":"<code>is_dynamically_linked()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.is_linux","title":"<code>is_linux()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.lookup_symbol","title":"<code>lookup_symbol(name, *, prefer_static=False, type=pwndbg.dbg_mod.SymbolLookupType.ANY, objfile_endswith=None)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.main_module_entry","title":"<code>main_module_entry()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.main_module_name","title":"<code>main_module_name()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.module_section_locations","title":"<code>module_section_locations()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.pid","title":"<code>pid()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.read_memory","title":"<code>read_memory(address, size, partial=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.send_monitor","title":"<code>send_monitor(cmd)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.send_remote","title":"<code>send_remote(packet)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.stopped_with_signal","title":"<code>stopped_with_signal()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.symbol_name_at_address","title":"<code>symbol_name_at_address(address)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.threads","title":"<code>threads()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.types_with_name","title":"<code>types_with_name(name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.vmmap","title":"<code>vmmap()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.write_memory","title":"<code>write_memory(address, data, partial=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters","title":"<code>LLDBRegisters</code>","text":"<p>               Bases: <code>Registers</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.groups","title":"<code>groups: lldb.SBValueList = groups</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.__init__","title":"<code>__init__(groups, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.by_name","title":"<code>by_name(name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint","title":"<code>LLDBStopPoint</code>","text":"<p>               Bases: <code>StopPoint</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.inner","title":"<code>inner: lldb.SBBreakpoint | lldb.SBWatchpoint = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.stop_handler_name","title":"<code>stop_handler_name: str | None = stop_handler_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.__init__","title":"<code>__init__(inner, proc, stop_handler_name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.remove","title":"<code>remove()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.set_enabled","title":"<code>set_enabled(enabled)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread","title":"<code>LLDBThread</code>","text":"<p>               Bases: <code>Thread</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.inner","title":"<code>inner: lldb.SBThread = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.bottom_frame","title":"<code>bottom_frame()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.index","title":"<code>index()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.ptid","title":"<code>ptid()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType","title":"<code>LLDBType</code>","text":"<p>               Bases: <code>Type</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.alignof","title":"<code>alignof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.code","title":"<code>code: pwndbg.dbg_mod.TypeCode</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.inner","title":"<code>inner: lldb.SBType = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.name_identifier","title":"<code>name_identifier: str | None</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.name_to_human_readable","title":"<code>name_to_human_readable: str</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.sizeof","title":"<code>sizeof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.__eq__","title":"<code>__eq__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.array","title":"<code>array(count)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.fields","title":"<code>fields()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.func_arguments","title":"<code>func_arguments()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.pointer","title":"<code>pointer()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.strip_typedefs","title":"<code>strip_typedefs()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.target","title":"<code>target()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue","title":"<code>LLDBValue</code>","text":"<p>               Bases: <code>Value</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.address","title":"<code>address: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.is_optimized_out","title":"<code>is_optimized_out: bool</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.proc","title":"<code>proc = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.type","title":"<code>type: pwndbg.dbg_mod.Type</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__add__","title":"<code>__add__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__sub__","title":"<code>__sub__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.cast","title":"<code>cast(type)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.dereference","title":"<code>dereference()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.fetch_lazy","title":"<code>fetch_lazy()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.string","title":"<code>string()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.value_to_human_readable","title":"<code>value_to_human_readable()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable","title":"<code>OneShotAwaitable</code>","text":"<p>Used as part of the logic for the execution controller. This is an Awaitable object that yields the value passed to its constructor exactly once.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable.value","title":"<code>value = value</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable.__await__","title":"<code>__await__()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable.__init__","title":"<code>__init__(value)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldContinue","title":"<code>YieldContinue</code>","text":"<p>Continues execution of the process until the breakpoint or watchpoint given in the constructor is hit or the operation is cancelled.</p> <p>This class is part of the execution controller system, so it is intented to be yielded by the async function with access to an execution controller, and caught and hanlded by the event loop in the LLDB Pwndbg CLI.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldContinue.target","title":"<code>target: LLDBStopPoint = target</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldContinue.__init__","title":"<code>__init__(target)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldSingleStep","title":"<code>YieldSingleStep</code>","text":"<p>Moves execution of the process being debugged forward by one instruction.</p> <p>This class is part of the execution controller system, so it is intented to be yielded by the async function with access to an execution controller, and caught and hanlded by the event loop in the LLDB Pwndbg CLI.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.map_type_code","title":"<code>map_type_code(type)</code>","text":"<p>Determines the type code of a given LLDB SBType.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.rename_register","title":"<code>rename_register(name, proc)</code>","text":"<p>Some register names differ between Pwndbg/GDB and LLDB. This function takes in a register name in the Pwndbg/GDB convention and returns the equivalent LLDB name for the register.</p>"},{"location":"source/dbg/lldb/hooks/","title":"Hooks","text":"<p>Code that sets up hooks for LLDB events.</p>"},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.dbg","title":"<code>dbg: LLDB = pwndbg.dbg</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.should_show_context","title":"<code>should_show_context = False</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.on_exit","title":"<code>on_exit()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.on_start","title":"<code>on_start()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.on_stop","title":"<code>on_stop()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.prompt_hook","title":"<code>prompt_hook()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.renew_show_context","title":"<code>renew_show_context()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.reset_config","title":"<code>reset_config()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.update_typeinfo","title":"<code>update_typeinfo()</code>","text":""},{"location":"source/dbg/lldb/pset/","title":"Pset","text":""},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.InvalidParse","title":"<code>InvalidParse</code>","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.parse_value","title":"<code>parse_value(param, expression)</code>","text":""},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.pset","title":"<code>pset(name, value)</code>","text":"<p>Parses and sets a Pwndbg configuration value.</p>"},{"location":"source/dbg/lldb/util/","title":"Util","text":""},{"location":"source/dbg/lldb/util/#pwndbg.dbg.lldb.util.system_decode","title":"<code>system_decode(b)</code>","text":"<p>LLDB requires Python strings in many places where it makes sense to accept bytes values. This is mostly an artifact of how Swig maps C <code>char*</code> to <code>str</code> in Python, but since Swig will refuse bytes objects, we have to figure out a way to pass this data as a regular string object, even if that's nonsensical in Python terms.</p> <p>This function tries its best to resolve that by decoding it with the same decoder the filesystem uses, and, failing that, ASCII.</p>"},{"location":"source/dbg/lldb/repl/__init__/","title":"init","text":"<p>The Pwndbg REPL that is the interface to all debugging on LLDB.</p> <p>Pwndbg has an event system that allows it to react to events in the process being debugged, such as when new executable modules get added to the its address space, when the value of memory and registers change, and pretty much all possible changes to its execution state. We'd like to have the event system work the same way under LLDB as it does under GDB.</p> <p>Fortunately for us, the events types that are native to LLDB map really well to the event types in GDB and Pwndbg. Very, very unfortunately for us, however, that's basically where our luck ends.</p> <p>LLDB, as of version 18, only provides two ways to capture events: registering directly with the broadcaster, or registering globally. The former is not available to us in the standard LLDB REPL, as we don't get access to the process object until after it's been launched1. Likewise for the latter, as the interactive debugger will register to receive the global process state change events before everyone else, and LLDB doesn't allow for multiple listeners for the same event bits in the same event class2.</p> <p>This leaves us with handling process management ourselves as the only option we really have to implement event dispatch in Pwndbg. Easy, right? We can just hijack the commands that deal with target and process creation, and leave everything else untouched. Unfortunately for us, again, shadowing builtin commands is simply not allowed3.</p> <p>So, really, all that's left for us is either implement our own REPL, or get rid of the event system.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.LLDB_EXCLUSIVE","title":"<code>LLDB_EXCLUSIVE = [('script', lambda cmd: cmd.startswith('sc') and 'script'.startswith(cmd)), ('expression', lambda cmd: cmd.startswith('e') and 'expression'.startswith(cmd))]</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.continue_ap","title":"<code>continue_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.continue_unsupported","title":"<code>continue_unsupported = ['ignore-count']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.gdb_remote_ap","title":"<code>gdb_remote_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_attach_ap","title":"<code>process_attach_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_attach_unsupported","title":"<code>process_attach_unsupported = ['python-class', 'plugin', 'structured-data-key', 'structured-data-value']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_connect_ap","title":"<code>process_connect_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_launch_ap","title":"<code>process_launch_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_launch_unsupported","title":"<code>process_launch_unsupported = ['disable-aslr', 'script-class', 'environment', 'plugin', 'shell-expand-args', 'arch', 'shell', 'stderr', 'stdin', 'structured-data-key', 'no-stdio', 'stdout', 'tty', 'structured-data-value', 'working-dir']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.show_tip","title":"<code>show_tip = pwndbg.config.add_param('show-tips', True, 'whether to display the tip of the day on startup')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.target_create_ap","title":"<code>target_create_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.target_create_unsupported","title":"<code>target_create_unsupported = ['build', 'core', 'no-dependents', 'remote-file', 'symfile', 'version']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay","title":"<code>EventRelay</code>","text":"<p>               Bases: <code>EventHandler</code></p> <p>The event system that is sensible for the REPL process driver to use isn't an exact match with the one used by the rest of Pwndbg. They're close, but there's a bit of work we have to do to properly convey certain events.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.dbg","title":"<code>dbg = dbg</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.ignore_resumed","title":"<code>ignore_resumed = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.__init__","title":"<code>__init__(dbg)</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.created","title":"<code>created()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.exited","title":"<code>exited()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.modules_loaded","title":"<code>modules_loaded()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.resumed","title":"<code>resumed()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.suspended","title":"<code>suspended()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.continue_process","title":"<code>continue_process(driver, args, dbg)</code>","text":"<p>Continues the execution of a process.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.gdb_remote","title":"<code>gdb_remote(driver, relay, args, dbg)</code>","text":"<p>Like <code>process_connect</code>, but more lenient with the remote URL format.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.lex_args","title":"<code>lex_args(args)</code>","text":"<p>Splits the arguments, respecting quotation marks.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.parse","title":"<code>parse(args, parser, unsupported)</code>","text":"<p>Parses a list of string arguments into an object containing the parsed data.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_attach","title":"<code>process_attach(driver, relay, args, dbg)</code>","text":"<p>Attaches to a process with the given arguments.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_connect","title":"<code>process_connect(driver, relay, args, dbg)</code>","text":"<p>Connects to the given remote process.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_launch","title":"<code>process_launch(driver, relay, args, dbg)</code>","text":"<p>Launches a process with the given arguments.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.run","title":"<code>run(startup=None, debug=False)</code>","text":"<p>Runs the Pwndbg REPL under LLDB. Optionally enters the commands given in <code>startup</code> as part of the startup process.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.run_ipython_shell","title":"<code>run_ipython_shell()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.show_greeting","title":"<code>show_greeting()</code>","text":"<p>Show the Pwndbg greeting, the same way the GDB version of Pwndbg would. This one is considerably simpler than the GDB version, however, as we control the lifetime of the program, we know exactly when the greeting needs to be shown, so we don't bother with any of the lifetime checks.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.target_create","title":"<code>target_create(args, dbg)</code>","text":"<p>Creates a new target, registers it with the Pwndbg LLDB implementation, and sets up listeners for it.</p>"},{"location":"source/dbg/lldb/repl/io/","title":"Io","text":"<p>For our REPL, we need to drive our own I/O with the process being debugged. This module contains all the strategies we have for doing that.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.LIVE_PSEUDO_TERMINAL_OBJECTS","title":"<code>LIVE_PSEUDO_TERMINAL_OBJECTS = False</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.PTY_AVAILABLE","title":"<code>PTY_AVAILABLE = True</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.SELECT_AVAILABLE","title":"<code>SELECT_AVAILABLE = True</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.TC_LFLAG","title":"<code>TC_LFLAG = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.TERM_CONTROL_AVAILABLE","title":"<code>TERM_CONTROL_AVAILABLE = True</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver","title":"<code>IODriver</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.on_output_event","title":"<code>on_output_event()</code>","text":"<p>Hints that there might be data in either the standard output or the standard error streams. This should be called when an <code>eBroadcastBitSTDOUT</code> or <code>eBroadcastBitSTDERR</code> is encountered by the event loop.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.on_process_start","title":"<code>on_process_start(proc)</code>","text":"<p>Allow the I/O driver an opportunity to change aspects of the process after it has been launched, but before it has started executing, if it so wishes.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.start","title":"<code>start(process)</code>","text":"<p>Starts the handling of I/O by this driver on the given process.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.stdio","title":"<code>stdio()</code>","text":"<p>The names for the stdin, stdout and stderr files, respectively. These will get passed as arguments to <code>SBTarget.Launch</code></p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.stop","title":"<code>stop()</code>","text":"<p>Stops the handling of I/O by this driver.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText","title":"<code>IODriverPlainText</code>","text":"<p>               Bases: <code>IODriver</code></p> <p>Plaintext-based I/O driver. It simply copies input from our standard input to the standard input of a given process, and copies output from the standard output of a given process to out standard output.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.in_thr","title":"<code>in_thr: threading.Thread</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.likely_output","title":"<code>likely_output: threading.BoundedSemaphore = threading.BoundedSemaphore(1)</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.out_thr","title":"<code>out_thr: threading.Thread</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.process","title":"<code>process: lldb.SBProcess = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.stop_requested","title":"<code>stop_requested: threading.Event = threading.Event()</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.on_output_event","title":"<code>on_output_event()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.on_process_start","title":"<code>on_process_start(proc)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.start","title":"<code>start(process)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.stdio","title":"<code>stdio()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.stop","title":"<code>stop()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal","title":"<code>IODriverPseudoTerminal</code>","text":"<p>               Bases: <code>IODriver</code></p> <p>pty-based I/O driver. Forwards input from standard input and has support for terminal width and height, and for terminal-based file operations on the program being debugged.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.has_terminal_control","title":"<code>has_terminal_control: bool</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.input_buffer","title":"<code>input_buffer: bytes = b''</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.io_thread","title":"<code>io_thread: threading.Thread</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.manager","title":"<code>manager: int = manager</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.process","title":"<code>process: lldb.SBProcess = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.stop_requested","title":"<code>stop_requested: threading.Event = threading.Event()</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.termcontrol","title":"<code>termcontrol: OpportunisticTerminalControl = OpportunisticTerminalControl()</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.worker","title":"<code>worker: str = worker</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.__init__","title":"<code>__init__(manager, worker)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.on_output_event","title":"<code>on_output_event()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.on_process_start","title":"<code>on_process_start(proc)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.start","title":"<code>start(process)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.stdio","title":"<code>stdio()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.stop","title":"<code>stop()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl","title":"<code>OpportunisticTerminalControl</code>","text":"<p>Handles optional terminal control for a given file descriptor. Crucially, all the functions in this class should work regardless of whether terminal control is actually supported on not, but should do nothing in case it is not supported.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.fd","title":"<code>fd: int = fd</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.supported","title":"<code>supported: bool = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.__init__","title":"<code>__init__(fd=-1)</code>","text":"<p>Creates an opportunistic terminal control object for the given file descriptor. If no file descriptor is given, this class will try to open '/dev/tty', and use that.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.get_echo","title":"<code>get_echo()</code>","text":"<p>Gets the current state of echoing for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.get_line_buffering","title":"<code>get_line_buffering()</code>","text":"<p>Gets the current state of line buffering for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.set_echo","title":"<code>set_echo(enabled)</code>","text":"<p>Enables or disables echoing for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.set_line_buffering","title":"<code>set_line_buffering(enabled)</code>","text":"<p>Enables or disables line buffering for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.get_io_driver","title":"<code>get_io_driver()</code>","text":"<p>Instances a new IODriver using the best strategy available in the current system. Meaning a PTY on Unix and plain text on Windows.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.make_pty","title":"<code>make_pty()</code>","text":"<p>We need to make a pseudo-terminal ourselves if we want the process to handle naturally for the user. Returns a tuple with the path of the worker device and the file descriptor of the manager device if successful.</p>"},{"location":"source/dbg/lldb/repl/proc/","title":"Proc","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler","title":"<code>EventHandler</code>","text":"<p>The event types that make sense for us to track in the process driver aren't the same as the ones in the rest of Pwndbg, so we just expose the native events in process driver, and let the rest of the REPL deal with any complexities that might arise from the translation.</p> <p>This is mostly intended to keep the complexity of generating the START and NEW_THREAD events correctly out of the process driver.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.created","title":"<code>created()</code>","text":"<p>This function is called when a process is created or attached to.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.exited","title":"<code>exited()</code>","text":"<p>This function is called when a process terminates or is detached from.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.modules_loaded","title":"<code>modules_loaded()</code>","text":"<p>This function is called when a new modules have been loaded.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.resumed","title":"<code>resumed()</code>","text":"<p>This function is called when the execution of a process is resumed.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.suspended","title":"<code>suspended()</code>","text":"<p>This function is called when the execution of a process is suspended.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver","title":"<code>ProcessDriver</code>","text":"<p>Drives the execution of a process, responding to its events and handling its I/O, and exposes a simple synchronous interface to the REPL interface.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.debug","title":"<code>debug: bool = debug</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.eh","title":"<code>eh: EventHandler = event_handler</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.io","title":"<code>io: IODriver = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.listener","title":"<code>listener: lldb.SBListener = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.process","title":"<code>process: lldb.SBProcess = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.__init__","title":"<code>__init__(event_handler, debug=False)</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.attach","title":"<code>attach(target, io, info)</code>","text":"<p>Attach to a process and handles startup events. Always stops on first opportunity, and returns immediately after the process has stopped.</p> <p>Fires the created() event.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.connect","title":"<code>connect(target, io, url, plugin)</code>","text":"<p>Connects to a remote proces with the given URL using the plugin with the given name, and attaches to the process until LLDB issues a start event to us.</p> <p>Potentially fires all types of events, as it is not known when LLDB will return control of the process to us.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.cont","title":"<code>cont()</code>","text":"<p>Continues execution of the process this object is driving, and returns whenever the process stops.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.has_process","title":"<code>has_process()</code>","text":"<p>Whether there's an active process in this driver.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.interrupt","title":"<code>interrupt()</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.launch","title":"<code>launch(target, io, env, args, working_dir)</code>","text":"<p>Launches the process and handles startup events. Always stops on first opportunity, and returns immediately after the process has stopped.</p> <p>Fires the created() event.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.run_coroutine","title":"<code>run_coroutine(coroutine)</code>","text":"<p>Runs the given coroutine and allows it to control the execution of the process in this driver. Returns <code>True</code> if the coroutine ran to completion, and <code>False</code> if it was cancelled.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.run_lldb_command","title":"<code>run_lldb_command(command)</code>","text":"<p>Runs the given LLDB command and ataches I/O if necessary.</p>"},{"location":"source/dbg/lldb/repl/readline/","title":"Readline","text":"<p>Readline interface for the Pwndbg LLDB REPL.</p> <p>Mostly concerns itself with argument completion.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.HISTORY_FILE","title":"<code>HISTORY_FILE = os.path.expanduser('~/.pwndbg_history')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.PROMPT","title":"<code>PROMPT = message.readline_escape(message.prompt, 'pwndbg-lldb&gt; ')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.complete_descrs","title":"<code>complete_descrs = lldb.SBStringList()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.complete_values","title":"<code>complete_values = lldb.SBStringList()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.complete","title":"<code>complete(dbg, text, state)</code>","text":"<p>Runs the tab autocompletion function for readline based on the values returned by <code>SBCommandInterpreter.HandleCompletion</code>.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.ctx_with_history","title":"<code>ctx_with_history()</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.disable_readline","title":"<code>disable_readline()</code>","text":"<p>Disables the readline functionality.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.display_completions","title":"<code>display_completions(substitutions, matches, longest_match_len)</code>","text":"<p>Display the completions found by <code>complete</code> in the style of LLDB.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.enable_readline","title":"<code>enable_readline(dbg)</code>","text":"<p>Enables the readline functionality.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.wrap_with_history","title":"<code>wrap_with_history(function)</code>","text":""},{"location":"source/emu/__init__/","title":"init","text":""},{"location":"source/emu/emulator/","title":"Emulator","text":"<p>Emulation assistance from Unicorn.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.ARM_BANNED_INSTRUCTIONS","title":"<code>ARM_BANNED_INSTRUCTIONS = {C.arm.ARM_INS_MRC, C.arm.ARM_INS_MRRC, C.arm.ARM_INS_MRC2, C.arm.ARM_INS_MRRC2}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.BANNED_INSTRUCTIONS","title":"<code>BANNED_INSTRUCTIONS = {'mips': {C.mips.MIPS_INS_RDHWR}, 'arm': ARM_BANNED_INSTRUCTIONS, 'armcm': ARM_BANNED_INSTRUCTIONS}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.DEBUG","title":"<code>DEBUG = NO_DEBUG</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_SYSCALL","title":"<code>arch_to_SYSCALL = {U.UC_ARCH_X86: [C.x86_const.X86_INS_SYSCALL, C.x86_const.X86_INS_SYSENTER, C.x86_const.X86_INS_SYSEXIT, C.x86_const.X86_INS_SYSRET, C.x86_const.X86_INS_IRET, C.x86_const.X86_INS_IRETD, C.x86_const.X86_INS_IRETQ, C.x86_const.X86_INS_INT, C.x86_const.X86_INS_INT1, C.x86_const.X86_INS_INT3], U.UC_ARCH_MIPS: [C.mips_const.MIPS_INS_SYSCALL], U.UC_ARCH_SPARC: [C.sparc_const.SPARC_INS_T], U.UC_ARCH_ARM: [C.arm_const.ARM_INS_SVC], U.UC_ARCH_ARM64: [C.arm64_const.ARM64_INS_SVC], U.UC_ARCH_PPC: [C.ppc_const.PPC_INS_SC], U.UC_ARCH_RISCV: [C.riscv_const.RISCV_INS_ECALL]}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_UC","title":"<code>arch_to_UC = {'i386': U.UC_ARCH_X86, 'x86-64': U.UC_ARCH_X86, 'mips': U.UC_ARCH_MIPS, 'sparc': U.UC_ARCH_SPARC, 'arm': U.UC_ARCH_ARM, 'armcm': U.UC_ARCH_ARM, 'aarch64': U.UC_ARCH_ARM64, 'rv32': U.UC_ARCH_RISCV, 'rv64': U.UC_ARCH_RISCV}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_UC_consts","title":"<code>arch_to_UC_consts = {'i386': parse_consts(U.x86_const), 'x86-64': parse_consts(U.x86_const), 'mips': parse_consts(U.mips_const), 'sparc': parse_consts(U.sparc_const), 'arm': parse_consts(U.arm_const), 'armcm': parse_consts(U.arm_const), 'aarch64': parse_consts(U.arm64_const), 'rv32': parse_consts(U.riscv_const), 'rv64': parse_consts(U.riscv_const)}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_reg_const_map","title":"<code>arch_to_reg_const_map = {'i386': create_reg_to_const_map(arch_to_UC_consts['i386']), 'x86-64': create_reg_to_const_map(arch_to_UC_consts['x86-64'], {'FSBASE': U.x86_const.UC_X86_REG_FS_BASE, 'GSBASE': U.x86_const.UC_X86_REG_GS_BASE}), 'mips': create_reg_to_const_map(arch_to_UC_consts['mips']), 'sparc': create_reg_to_const_map(arch_to_UC_consts['sparc']), 'arm': create_reg_to_const_map(arch_to_UC_consts['arm']), 'armcm': create_reg_to_const_map(arch_to_UC_consts['armcm']), 'aarch64': create_reg_to_const_map(arch_to_UC_consts['aarch64'], {'CPSR': U.arm64_const.UC_ARM64_REG_NZCV}), 'rv32': create_reg_to_const_map(arch_to_UC_consts['rv32']), 'rv64': create_reg_to_const_map(arch_to_UC_consts['rv64'])}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.blacklisted_regs","title":"<code>blacklisted_regs = ['ip', 'cs', 'ds', 'es', 'fs', 'gs', 'ss']</code>  <code>module-attribute</code>","text":"<p>e = pwndbg.emu.emulator.Emulator() e.until_jump()</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator","title":"<code>Emulator</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.arch","title":"<code>arch = pwndbg.aglib.arch.current</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.const_regs","title":"<code>const_regs = arch_to_reg_const_map[self.arch]</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.last_pc","title":"<code>last_pc = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.last_single_step_result","title":"<code>last_single_step_result = InstructionExecutedResult(None, None)</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.last_step_succeeded","title":"<code>last_step_succeeded: bool</code>  <code>property</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.regs","title":"<code>regs: pwndbg.lib.regs.RegisterSet = pwndbg.aglib.regs.current</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.uc","title":"<code>uc = U.Uc(arch_to_UC[self.arch], self.uc_mode)</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.uc_mode","title":"<code>uc_mode = self.get_uc_mode()</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.valid","title":"<code>valid = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.__getattr__","title":"<code>__getattr__(name)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.dumpregs","title":"<code>dumpregs()</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.emu_start","title":"<code>emu_start(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.emu_stop","title":"<code>emu_stop(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.emulate_with_hook","title":"<code>emulate_with_hook(hook, count=512)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.format_telescope","title":"<code>format_telescope(address, limit)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.format_telescope_list","title":"<code>format_telescope_list(chain, limit, enhance_string_len=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.get_reg_enum","title":"<code>get_reg_enum(reg)</code>","text":"<p>Returns the Unicorn Emulator enum code for the named register.</p> <p>Also supports general registers like 'sp' and 'pc'.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.get_uc_mode","title":"<code>get_uc_mode()</code>","text":"<p>Retrieve the mode used by Unicorn for the current architecture.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_add","title":"<code>hook_add(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_del","title":"<code>hook_del(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_intr","title":"<code>hook_intr(uc, intno, user_data)</code>","text":"<p>We never want to emulate through an interrupt.  Just stop.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_mem_invalid","title":"<code>hook_mem_invalid(uc, access, address, size, value, user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.map_page","title":"<code>map_page(page)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.mem_read","title":"<code>mem_read(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.memory_read_string","title":"<code>memory_read_string(address, max_string_len=None, max_read=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.read_memory","title":"<code>read_memory(address, size)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.read_register","title":"<code>read_register(name)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.read_thumb_bit","title":"<code>read_thumb_bit()</code>","text":"<p>Return 0 or 1, representing the status of the Thumb bit in the current Arm architecture</p> <p>This reads from the emulator itself, meaning this can be read to determine a state transitions between non-Thumb and Thumb mode</p> <p>Return None if the Thumb bit is not relevent to the current architecture</p> <p>Mimics the <code>read_thumb_bit</code> function defined in aglib/arch.py</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.single_step","title":"<code>single_step(pc=None)</code>","text":"<p>Steps one instruction.</p> <p>Yields:</p> Type Description <code>int</code> <p>Each iteration, yields a tuple of (address_just_executed, instruction_size).</p> <code>int</code> <p>Returns (None, None) upon failure to execute the instruction</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.single_step_hook_code","title":"<code>single_step_hook_code(_uc, address, instruction_size, _user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.single_step_iter","title":"<code>single_step_iter(pc=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.telescope","title":"<code>telescope(address, limit, read_size=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.telescope_enhance","title":"<code>telescope_enhance(value, code=True, enhance_string_len=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.trace_hook","title":"<code>trace_hook(_uc, address, instruction_size, _user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_call","title":"<code>until_call(pc=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_jump","title":"<code>until_jump(pc=None)</code>","text":"<p>Emulates instructions starting at the specified address until the program counter is set to an address which does not linearly follow the previously-emulated instruction.</p> <p>Parameters:</p> Name Type Description Default <code>pc(int)</code> <p>Address to start at.  If <code>None</code>, uses the current instruction.</p> required <code>types(list,set)</code> <p>List of instruction groups to stop at. By default, it stops at all jumps, calls, and returns.</p> required Return <p>Returns a tuple containing the address of the jump instruction, and its target in the format (address, target).</p> <p>If emulation is forced to stop (e.g., because of a syscall or invalid memory access) then address is the instruction which could not be emulated through, and target will be None.</p> Notes <p>This routine does not consider 'call $+5'</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_jump_hook_code","title":"<code>until_jump_hook_code(_uc, address, instruction_size, _user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_syscall","title":"<code>until_syscall(pc=None)</code>","text":"<p>Emulates instructions starting at the specified address until the program counter points at a syscall instruction (int 0x80, svc, etc.).</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_syscall_hook_code","title":"<code>until_syscall_hook_code(uc, address, size, user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.update_pc","title":"<code>update_pc(pc=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.InstructionExecutedResult","title":"<code>InstructionExecutedResult</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.InstructionExecutedResult.address","title":"<code>address: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.InstructionExecutedResult.size","title":"<code>size: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.create_reg_to_const_map","title":"<code>create_reg_to_const_map(base_consts, additional_mapping=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.debug","title":"<code>debug(debug_type, fmt, args=())</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.parse_consts","title":"<code>parse_consts(u_consts)</code>","text":"<p>Unicorn \"consts\" is a python module consisting of a variable definition for each known entity. We repack it here as a dict for performance.</p> <p>Maps \"UC_*\" -&gt; integer value of the constant</p>"},{"location":"source/gdblib/__init__/","title":"init","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.__all__","title":"<code>__all__ = ()</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.gdb_version","title":"<code>gdb_version = tuple(map(int, re.search('(\\\\d+)[^\\\\d]+(\\\\d+)', gdb.VERSION).groups()))</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.msg","title":"<code>msg = 'Unsupported GDB version, pwndbg only support GDB12+'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.regs","title":"<code>regs = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.load_gdblib","title":"<code>load_gdblib()</code>","text":"<p>Import all gdblib modules that need to run code on import</p>"},{"location":"source/gdblib/bpoint/","title":"Bpoint","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.Breakpoint","title":"<code>Breakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Breakpoint class, similar to gdb.Breakpoint, but clears the caches associated with the stop event before determining whether it should stop the inferior or not.</p> <p>Unlike gdb.Breakpoint, users of this class should override <code>should_stop()</code>, instead of <code>stop()</code>, as the latter is used to do cache invalidation.</p>"},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.Breakpoint.should_stop","title":"<code>should_stop()</code>","text":"<p>This function is called whenever this breakpoint is hit in the code and its return value determines whether the inferior will be stopped.</p>"},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.Breakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/config/","title":"Config","text":"<p>Dynamic configuration system for pwndbg, using GDB's built-in Parameter mechanism.</p> <p>To create a new pwndbg configuration point, call <code>pwndbg.config.add_param</code>.</p> <p>Parameters should be declared in the module in which they are primarily used, or in this module for general-purpose parameters.</p> <p>All pwndbg Parameter types are accessible via property access on this module, for example:</p> Text Only<pre><code>&gt;&gt;&gt; pwndbg.config.add_param('example-value', 7, 'an example')\n&gt;&gt;&gt; int(pwndbg.config.example_value)\n7\n</code></pre>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.CLASS_MAPPING","title":"<code>CLASS_MAPPING = {pwndbg.lib.config.PARAM_BOOLEAN: gdb.PARAM_BOOLEAN, pwndbg.lib.config.PARAM_AUTO_BOOLEAN: gdb.PARAM_AUTO_BOOLEAN, pwndbg.lib.config.PARAM_ZINTEGER: gdb.PARAM_ZINTEGER, pwndbg.lib.config.PARAM_STRING: gdb.PARAM_STRING, pwndbg.lib.config.PARAM_ZUINTEGER: gdb.PARAM_ZUINTEGER, pwndbg.lib.config.PARAM_ENUM: gdb.PARAM_ENUM, pwndbg.lib.config.PARAM_OPTIONAL_FILENAME: gdb.PARAM_OPTIONAL_FILENAME, pwndbg.lib.config.PARAM_ZUINTEGER_UNLIMITED: gdb.PARAM_ZUINTEGER_UNLIMITED, pwndbg.lib.config.PARAM_INTEGER: gdb.PARAM_INTEGER, pwndbg.lib.config.PARAM_UINTEGER: gdb.PARAM_UINTEGER}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter","title":"<code>Parameter</code>","text":"<p>               Bases: <code>Parameter</code></p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.__doc__","title":"<code>__doc__ = param.help_docstring or None</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.native_default","title":"<code>native_default</code>  <code>property</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.native_value","title":"<code>native_value</code>  <code>property</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.param","title":"<code>param = param</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.set_doc","title":"<code>set_doc = 'Set ' + param.set_show_doc + '.'</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.show_doc","title":"<code>show_doc = 'Show ' + param.set_show_doc + '.'</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.value","title":"<code>value = param.value</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.__init__","title":"<code>__init__(param)</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.get_set_string","title":"<code>get_set_string()</code>","text":"<p>Handles the GDB <code>set &lt;param&gt;</code></p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.get_show_string","title":"<code>get_show_string(svalue)</code>","text":"<p>Handles the GDB <code>show &lt;param&gt;</code></p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.init_super","title":"<code>init_super(param)</code>","text":"<p>Initializes the super class for GDB &gt;= 9</p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.init_params","title":"<code>init_params()</code>","text":""},{"location":"source/gdblib/events/","title":"Events","text":"<p>Enables callbacks into functions to be automatically invoked when various events occur to the debuggee (e.g. STOP on SIGINT) by using a decorator.</p>"},{"location":"source/gdblib/events/#pwndbg.gdblib.events.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.connected","title":"<code>connected = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.debug","title":"<code>debug = config.add_param('debug-events', False, 'display internal event debugging info')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.executing_event","title":"<code>executing_event = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.gdb_workaround_stop_event","title":"<code>gdb_workaround_stop_event = config.add_param('gdb-workaround-stop-event', 0, \"Enable asynchronous stop events as a workaround to improve 'commands' functionality.\\nNote: This may cause unexpected behavior with pwndbg or gdb.execute.\\n\\nValues:\\n0 - Disable the workaround (default).\\n1 - Enable asynchronous stop events; gdb.execute may behave unexpectedly(asynchronously).\\n2 - Disable only deadlock detection; deadlocks may still occur.\\n    \")</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.paused","title":"<code>paused = defaultdict(bool)</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.queued_events","title":"<code>queued_events: Deque[Callable[..., Any]] = deque()</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.registered","title":"<code>registered: Dict[Any, Dict[HandlerPriority, List[Callable[..., Any]]]] = {gdb.events.exited: {}, gdb.events.cont: {}, gdb.events.new_objfile: {}, gdb.events.stop: {}, gdb.events.start: {}, gdb.events.new_thread: {}, gdb.events.before_prompt: {}, gdb.events.memory_changed: {}, gdb.events.register_changed: {}}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.HandlerPriority","title":"<code>HandlerPriority</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A priority level for an event handler, ordered from highest to lowest priority.</p>"},{"location":"source/gdblib/events/#pwndbg.gdblib.events.HandlerPriority.CACHE_CLEAR","title":"<code>CACHE_CLEAR = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.HandlerPriority.LOW","title":"<code>LOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent","title":"<code>StartEvent</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.registered","title":"<code>registered: List[Callable[..., Any]] = []</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.running","title":"<code>running = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.connect","title":"<code>connect(function)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.disconnect","title":"<code>disconnect(function)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.on_exited","title":"<code>on_exited()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.on_new_objfile","title":"<code>on_new_objfile()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.on_stop","title":"<code>on_stop()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.after_reload","title":"<code>after_reload(fire_start=True)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.before_prompt","title":"<code>before_prompt(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.connect","title":"<code>connect(func, event_handler, name='', priority=HandlerPriority.LOW)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.cont","title":"<code>cont(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.exit","title":"<code>exit(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.invoke_event","title":"<code>invoke_event(event, *args, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.log_objfiles","title":"<code>log_objfiles(ofile=None)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.mem_changed","title":"<code>mem_changed(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.new_objfile","title":"<code>new_objfile(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.on_reload","title":"<code>on_reload()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.pause","title":"<code>pause(event_registry)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.reg_changed","title":"<code>reg_changed(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.start","title":"<code>start(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.stop","title":"<code>stop(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.thread","title":"<code>thread(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.unpause","title":"<code>unpause(event_registry)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.wrap_safe_event_handler","title":"<code>wrap_safe_event_handler(event_handler, event_type)</code>","text":"<p>Wraps an event handler to ensure it is only executed when the event is safe. Invalid events are queued and executed later when safe.</p> <p>Note: Avoid using <code>gdb.post_event</code> because of another bug in gdbserver where the <code>gdb.newest_frame</code> function may not work properly.</p> <p>Workaround to fix bug in gdbserver (gdb.events.new_objfile): https://github.com/pwndbg/pwndbg/issues/2576 Workaround to fix bug in gdb (gdb.events.stop): https://github.com/pwndbg/pwndbg/issues/425</p>"},{"location":"source/gdblib/functions/","title":"Functions","text":"<p>Put all functions defined for gdb in here.</p> <p>This file might be changed into a module in the future.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.functions","title":"<code>functions: List[_GdbFunction] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.GdbFunction","title":"<code>GdbFunction(only_when_running=False)</code>","text":""},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.argc","title":"<code>argc(*args)</code>","text":"<p>Evaluates to argc.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.argv","title":"<code>argv(number_value)</code>","text":"<p>Evaluate argv on the supplied value.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.base","title":"<code>base(name_pattern)</code>","text":"<p>Return base address of the first memory mapping containing the given name.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.dbg_value_to_gdb","title":"<code>dbg_value_to_gdb(d)</code>","text":""},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.environ","title":"<code>environ(name_value)</code>","text":"<p>Evaluate getenv() on the supplied value.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.envp","title":"<code>envp(number_value)</code>","text":"<p>Evaluate envp on the supplied value.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.hex2ptr","title":"<code>hex2ptr(hex_string)</code>","text":"<p>Converts a hex string to a little-endian address and returns the address. Example usage: $hex2ptr(\"00 70 75 c1 cd ef 59 00\")</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.rebase","title":"<code>rebase(addr)</code>","text":"<p>Return rebased address.</p>"},{"location":"source/gdblib/got/","title":"Got","text":"<p>Global Offset Table Tracker</p> <p>Subsystem for tracking accesses to external function calls made through pointers in an inferior's Global Offset Table, such as those made by the stubs in the Procedure Linkage Table.</p> <p>Currently, it does this by attatching watchpoints to the entries in the GOT and taking note of where the call came from, but it could be done much faster by injecting our own code into the program space to track this.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.GOT_TRACKING","title":"<code>GOT_TRACKING = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.INSTALLED_WATCHPOINTS","title":"<code>INSTALLED_WATCHPOINTS: Dict[int, Tuple[Tracker, Patcher]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.IRELATIVE_SLOTS","title":"<code>IRELATIVE_SLOTS = {'x86-64': {RelocTypes.R_X86_64_IRELATIVE}, 'i386': {RelocTypes.R_386_IRELATIVE}, 'aarch64': {RelocTypes.R_AARCH64_P32_IRELATIVE, RelocTypes.R_AARCH64_IRELATIVE}, 'mips': set(), 'powerpc': {RelocTypes.R_PPC_IRELATIVE}, 'sparc': {RelocTypes.R_SPARC_IRELATIVE}, 'arm': {RelocTypes.R_ARM_IRELATIVE}, 'armcm': {RelocTypes.R_ARM_IRELATIVE}, 'rv32': {RelocTypes.R_RISCV_IRELATIVE}, 'rv64': {RelocTypes.R_RISCV_IRELATIVE}}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.JUMP_SLOTS","title":"<code>JUMP_SLOTS = {'x86-64': {RelocTypes.R_X86_64_JUMP_SLOT}, 'i386': {RelocTypes.R_386_JMP_SLOT}, 'aarch64': {RelocTypes.R_AARCH64_JUMP_SLOT}, 'mips': {RelocTypes.R_MIPS_JUMP_SLOT}, 'powerpc': {RelocTypes.R_PPC_JMP_SLOT}, 'sparc': {RelocTypes.R_SPARC_JMP_SLOT}, 'arm': {RelocTypes.R_ARM_JUMP_SLOT}, 'armcm': {RelocTypes.R_ARM_JUMP_SLOT}, 'rv32': {RelocTypes.R_RISCV_JUMP_SLOT}, 'rv64': {RelocTypes.R_RISCV_JUMP_SLOT}}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TRAP_ALLOCATOR","title":"<code>TRAP_ALLOCATOR = TrapAllocator()</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher","title":"<code>Patcher</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Watches for changes made by program code to the GOT and fixes them up.</p> <p>This class is paired with Tracker, and instances of both classes always function together.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.entry","title":"<code>entry = entry</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.init","title":"<code>init = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.silent","title":"<code>silent = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.tracker","title":"<code>tracker = tracker</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.__init__","title":"<code>__init__(entry, tracker)</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.should_stop","title":"<code>should_stop()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes","title":"<code>RelocTypes</code>","text":"<p>This class contains all the relocation type constants so that one may interpret the relocations types present in the DYNAMIC segment. These constants are defined in each of the processors' SystemV R4 psABI document, or equivalent, and should stay the same across all implementations of libc on systems that adhere to that ABI, such as Linux.</p> <p>Most of these were sourced from GLibc, which conveniently lists all of the relocations types in a single file1.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_386_IRELATIVE","title":"<code>R_386_IRELATIVE = 42</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_386_JMP_SLOT","title":"<code>R_386_JMP_SLOT = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_390_IRELATIVE","title":"<code>R_390_IRELATIVE = 61</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_390_JMP_SLOT","title":"<code>R_390_JMP_SLOT = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_68K_JMP_SLOT","title":"<code>R_68K_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_AARCH64_IRELATIVE","title":"<code>R_AARCH64_IRELATIVE = 1032</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_AARCH64_JUMP_SLOT","title":"<code>R_AARCH64_JUMP_SLOT = 1026</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_AARCH64_P32_IRELATIVE","title":"<code>R_AARCH64_P32_IRELATIVE = 188</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ALPHA_JMP_SLOT","title":"<code>R_ALPHA_JMP_SLOT = 26</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ARC_JMP_SLOT","title":"<code>R_ARC_JMP_SLOT = 55</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ARM_IRELATIVE","title":"<code>R_ARM_IRELATIVE = 160</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ARM_JUMP_SLOT","title":"<code>R_ARM_JUMP_SLOT = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_CKCORE_JUMP_SLOT","title":"<code>R_CKCORE_JUMP_SLOT = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_CRIS_JUMP_SLOT","title":"<code>R_CRIS_JUMP_SLOT = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_M32R_JMP_SLOT","title":"<code>R_M32R_JMP_SLOT = 52</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_METAG_JMP_SLOT","title":"<code>R_METAG_JMP_SLOT = 44</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_MICROBLAZE_JUMP_SLOT","title":"<code>R_MICROBLAZE_JUMP_SLOT = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_MIPS_JUMP_SLOT","title":"<code>R_MIPS_JUMP_SLOT = 127</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_MN10300_JMP_SLOT","title":"<code>R_MN10300_JMP_SLOT = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_NDS32_JMP_SLOT","title":"<code>R_NDS32_JMP_SLOT = 41</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_NIOS2_JUMP_SLOT","title":"<code>R_NIOS2_JUMP_SLOT = 38</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_OR1K_JMP_SLOT","title":"<code>R_OR1K_JMP_SLOT = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC64_IRELATIVE","title":"<code>R_PPC64_IRELATIVE = 248</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC64_JMP_SLOT","title":"<code>R_PPC64_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC_IRELATIVE","title":"<code>R_PPC_IRELATIVE = 248</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC_JMP_SLOT","title":"<code>R_PPC_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_RISCV_IRELATIVE","title":"<code>R_RISCV_IRELATIVE = 58</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_RISCV_JUMP_SLOT","title":"<code>R_RISCV_JUMP_SLOT = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_SH_JMP_SLOT","title":"<code>R_SH_JMP_SLOT = 164</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_SPARC_IRELATIVE","title":"<code>R_SPARC_IRELATIVE = 249</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_SPARC_JMP_SLOT","title":"<code>R_SPARC_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_TILEGX_JMP_SLOT","title":"<code>R_TILEGX_JMP_SLOT = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_TILEPRO_JMP_SLOT","title":"<code>R_TILEPRO_JMP_SLOT = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_X86_64_IRELATIVE","title":"<code>R_X86_64_IRELATIVE = 37</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_X86_64_JUMP_SLOT","title":"<code>R_X86_64_JUMP_SLOT = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker","title":"<code>Tracker</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Class that tracks the accesses made to the entries in the GOT.</p> <p>This class is paired with Patcher, and instances of both classes always function together.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.dynamic_section","title":"<code>dynamic_section = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.hits","title":"<code>hits: Dict[Tuple[int, ...], int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.link_map_entry","title":"<code>link_map_entry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.relocation_fn","title":"<code>relocation_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.relocation_index","title":"<code>relocation_index = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.silent","title":"<code>silent = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.target","title":"<code>target = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.total_hits","title":"<code>total_hits = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.trapped_address","title":"<code>trapped_address = TRAP_ALLOCATOR.alloc()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.delete","title":"<code>delete()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.should_stop","title":"<code>should_stop()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator","title":"<code>TrapAllocator</code>","text":"<p>Utility that allocates and manages executable addresses in the space of the executing program that we can trap.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.block_capacity","title":"<code>block_capacity = 4096</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.slot_size","title":"<code>slot_size = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.alloc","title":"<code>alloc()</code>","text":"<p>Allocates a new address to where program execution can be diverted.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.clear","title":"<code>clear()</code>","text":"<p>Deletes all memory mappings and frees all addresses.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.free","title":"<code>free(address)</code>","text":"<p>Indicates that an address obtained from alloc() can be recycled.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.all_tracked_entries","title":"<code>all_tracked_entries()</code>","text":"<p>Return an iterator over all of the GOT whose accesses are being tracked.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.disable_got_call_tracking","title":"<code>disable_got_call_tracking()</code>","text":"<p>Disable the analysis of calls made through the GOT.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.display_name","title":"<code>display_name(name, basename=False)</code>","text":"<p>Return the display name for a symbol or objfile.</p> <p>Ideally, we'd like to display all of the names of the symbols as text, but there is really nothing stopping symbol names from being stored in some fairly wacky encoding or really from having names that aren't text at all.</p> <p>We should try our best to turn whatever the symbol name is into text, but not so much that non-text entries or entries in unknown encodings become unrecognizable.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.enable_got_call_tracking","title":"<code>enable_got_call_tracking(disable_hardware_whatchpoints=True)</code>","text":"<p>Enable the analysis of calls made through the GOT.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.is_mmap_error","title":"<code>is_mmap_error(ptr)</code>","text":"<p>Checks whether the return value of an mmap of indicates an error.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.jump_slots_for","title":"<code>jump_slots_for(dynamic)</code>","text":"<p>Returns the jump slot addresses described by the given dynamic section.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.tracked_entry_by_address","title":"<code>tracked_entry_by_address(address)</code>","text":"<p>Return the tracker associated with the entry at the given address, if any.</p>"},{"location":"source/gdblib/hooks/","title":"Hooks","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.init","title":"<code>init()</code>","text":"<p>Calls all GDB hook functions that need to be called when GDB/pwndbg itself is loaded, as opposed to when an actual hook event occurs</p>"},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.on_exit","title":"<code>on_exit()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.on_start","title":"<code>on_start()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.on_stop","title":"<code>on_stop()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.reset_config","title":"<code>reset_config()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.update_arch","title":"<code>update_arch()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.update_typeinfo","title":"<code>update_typeinfo()</code>","text":""},{"location":"source/gdblib/info/","title":"Info","text":"<p>Runs a few useful commands which are available under \"info\".</p>"},{"location":"source/gdblib/info/#pwndbg.gdblib.info.address","title":"<code>address(symbol)</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.auxv","title":"<code>auxv()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.files","title":"<code>files()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.parsed_sharedlibrary","title":"<code>parsed_sharedlibrary()</code>","text":"<p>Returns a dictionary of shared libraries with their .text section from and to addresses.</p>"},{"location":"source/gdblib/info/#pwndbg.gdblib.info.proc_mappings","title":"<code>proc_mappings()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.sharedlibrary","title":"<code>sharedlibrary()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.sharedlibrary_paths","title":"<code>sharedlibrary_paths()</code>","text":"<p>Get the paths of all shared libraries loaded in the process by parsing the output of \"info sharedlibrary\".</p>"},{"location":"source/gdblib/info/#pwndbg.gdblib.info.target","title":"<code>target()</code>","text":""},{"location":"source/gdblib/prompt/","title":"Prompt","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.context_shown","title":"<code>context_shown = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.cur","title":"<code>cur: Tuple[gdb.Inferior, gdb.InferiorThread] | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.last_alive_state","title":"<code>last_alive_state = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.show_tip","title":"<code>show_tip = pwndbg.config.add_param('show-tips', True, 'whether to display the tip of the day on startup')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.initial_hook","title":"<code>initial_hook(*a)</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.prompt_hook","title":"<code>prompt_hook(*a)</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.reset_context_shown","title":"<code>reset_context_shown(*a)</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.set_prompt","title":"<code>set_prompt()</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.show_hint","title":"<code>show_hint()</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.thread_is_stopped","title":"<code>thread_is_stopped()</code>","text":"<p>This detects whether selected thread is stopped. It is not stopped in situations when gdb is executing commands that are attached to a breakpoint by <code>command</code> command.</p> <p>For more info see issue #229 ( https://github.com/pwndbg/pwndbg/issues/299 ) :return: Whether gdb executes commands attached to bp with <code>command</code> command.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/","title":"Ptmalloc2 tracking","text":"<p>Heap Tracking</p> <p>This module implements runtime tracking of the heap, allowing pwndbg to detect heap related misbehavior coming from an inferior in real time, which lets us catch UAF bugs, double frees (and more), and report them to the user.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking--approach","title":"Approach","text":"<p>The approach used starting with using breakpoints to hook into the following libc symbols: <code>malloc</code>, <code>free</code>, <code>calloc</code>, and <code>realloc</code>. Each hook has a reference to a shared instance of the <code>Tracker</code> class, which is responsible for handling the tracking of the chunks of memory from the heap.</p> <p>The tracker keeps two sorted maps of chunks, for freed and in use chunks, keyed by their base address. Newly allocated chunks are added to the map of in use chunks right before an allocating call returns, and newly freed chunks are moved from the map of in use chunks to the map of free ones right before a freeing call returns. The tracker is also responsible for installing watchpoints for free chunks when they're added to the free chunk map and deleting them when their corresponding chunks are removed from the map.</p> <p>Additionally, because going through the data structures inside of libc to determine whether a chunk is free or not is, more often than not, a fairly slow operation, this module will only do so when it determines its view of the chunks has diverged from the one in libc in a way that would affect behavior. When such a diffence is detected, this module will rebuild the chunk maps in the range it determines to have been affected.</p> <p>Currently, the way it does this is by deleting and querying from libc the new status of all chunks that overlap the region of a new allocation when it detects that allocation overlaps chunks it previously considered free.</p> <p>This approach lets us avoid a lot of the following linked lists that comes with trying to answer the allocation status of a chunk, by keeping at hand as much known-good information as possible about them. Keep in mind that, although it is much faster than going to libc every time we need to know the allocation status of a chunk, this approach does have drawbacks when it comes to memory usage.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking--compatibility","title":"Compatibility","text":"<p>Currently module assumes the inferior is using GLibc.</p> <p>There are points along the code in this module where the assumptions it makes are explicitly documented and checked to be valid for the current inferior, so that it may be immediately clear to the user that something has gone wrong if they happen to not be valid. However, be aware that there may be assumptions that were not made explicit.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.CALLOC_NAME","title":"<code>CALLOC_NAME = 'calloc'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.DEFERED_DELETE","title":"<code>DEFERED_DELETE: List[gdb.Breakpoint] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FREE_NAME","title":"<code>FREE_NAME = 'free'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.LIBC_NAME","title":"<code>LIBC_NAME = 'libc.so.6'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.MALLOC_NAME","title":"<code>MALLOC_NAME = 'malloc'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.PRINT_DEBUG","title":"<code>PRINT_DEBUG = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.REALLOC_NAME","title":"<code>REALLOC_NAME = 'realloc'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.calloc_enter","title":"<code>calloc_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.free_enter","title":"<code>free_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.last_issue","title":"<code>last_issue: str | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.malloc_enter","title":"<code>malloc_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.realloc_enter","title":"<code>realloc_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.stop_on_error","title":"<code>stop_on_error = True</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocChunkWatchpoint","title":"<code>AllocChunkWatchpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocChunkWatchpoint.chunk","title":"<code>chunk = chunk</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocChunkWatchpoint.__init__","title":"<code>__init__(chunk)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocChunkWatchpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint","title":"<code>AllocExitBreakpoint</code>","text":"<p>               Bases: <code>FinishBreakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint.requested_size","title":"<code>requested_size = requested_size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint.__init__","title":"<code>__init__(tracker, requested_size, name)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint.out_of_scope","title":"<code>out_of_scope()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.AllocExitBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.CallocEnterBreakpoint","title":"<code>CallocEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.CallocEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.CallocEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.CallocEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Chunk","title":"<code>Chunk</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Chunk.address","title":"<code>address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Chunk.flags","title":"<code>flags = flags</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Chunk.requested_size","title":"<code>requested_size = requested_size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Chunk.size","title":"<code>size = size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Chunk.__init__","title":"<code>__init__(address, size, requested_size, flags)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeChunkWatchpoint","title":"<code>FreeChunkWatchpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeChunkWatchpoint.chunk","title":"<code>chunk = chunk</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeChunkWatchpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeChunkWatchpoint.__init__","title":"<code>__init__(chunk, tracker)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeChunkWatchpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeEnterBreakpoint","title":"<code>FreeEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeExitBreakpoint","title":"<code>FreeExitBreakpoint</code>","text":"<p>               Bases: <code>FinishBreakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeExitBreakpoint.ptr","title":"<code>ptr = ptr</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeExitBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeExitBreakpoint.__init__","title":"<code>__init__(tracker, ptr)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeExitBreakpoint.out_of_scope","title":"<code>out_of_scope()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.FreeExitBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.MallocEnterBreakpoint","title":"<code>MallocEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.MallocEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.MallocEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.MallocEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocEnterBreakpoint","title":"<code>ReallocEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint","title":"<code>ReallocExitBreakpoint</code>","text":"<p>               Bases: <code>FinishBreakpoint</code></p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint.freed_ptr","title":"<code>freed_ptr = freed_ptr</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint.requested_size","title":"<code>requested_size = requested_size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint.__init__","title":"<code>__init__(tracker, freed_ptr, requested_size)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint.out_of_scope","title":"<code>out_of_scope()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.ReallocExitBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker","title":"<code>Tracker</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.alloc_chunks","title":"<code>alloc_chunks: SortedDict[int, Chunk] = SortedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.free_chunks","title":"<code>free_chunks: SortedDict[int, Chunk] = SortedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.free_watchpoints","title":"<code>free_watchpoints: Dict[int, FreeChunkWatchpoint] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.memory_management_calls","title":"<code>memory_management_calls: Dict[int, bool] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.enter_memory_management","title":"<code>enter_memory_management(name)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.exit_memory_management","title":"<code>exit_memory_management()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.free","title":"<code>free(address)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.is_performing_memory_management","title":"<code>is_performing_memory_management()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.Tracker.malloc","title":"<code>malloc(chunk)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.get_chunk","title":"<code>get_chunk(address, requested_size)</code>","text":"<p>Reads a chunk from a given address.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.in_program_code_stack","title":"<code>in_program_code_stack()</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.install","title":"<code>install(disable_hardware_watchpoints=True)</code>","text":""},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.is_enabled","title":"<code>is_enabled()</code>","text":"<p>Whether the heap tracker in enabled.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.resolve_address","title":"<code>resolve_address(name)</code>","text":"<p>Checks whether a given symbol is available and part of libc, and returns its address.</p>"},{"location":"source/gdblib/ptmalloc2_tracking/#pwndbg.gdblib.ptmalloc2_tracking.uninstall","title":"<code>uninstall()</code>","text":""},{"location":"source/gdblib/scheduler/","title":"Scheduler","text":""},{"location":"source/gdblib/scheduler/#pwndbg.gdblib.scheduler.lock_scheduler","title":"<code>lock_scheduler()</code>","text":"<p>This context manager can be used to run GDB commands with threads scheduling being locked which means that other threads will be stopped during execution.</p> <p>This is useful to prevent bugs where e.g.: gdb.parse_and_eval(\"(int)foo()\") would execute foo() on the current debugee thread but would also unlock other threads for being executed and those other threads may for example hit a breakpoint we set previously which would be confusing for the user.</p> <p>See also: https://sourceware.org/gdb/onlinedocs/gdb/All_002dStop-Mode.html</p>"},{"location":"source/gdblib/scheduler/#pwndbg.gdblib.scheduler.parse_and_eval_with_scheduler_lock","title":"<code>parse_and_eval_with_scheduler_lock(expr)</code>","text":""},{"location":"source/gdblib/shellcode/","title":"Shellcode","text":"<p>Shellcode</p> <p>This module implements functionality that allows for the execution of a small amount of code in the context of the inferior.</p>"},{"location":"source/gdblib/shellcode/#pwndbg.gdblib.shellcode.exec_shellcode","title":"<code>exec_shellcode(blob, restore_context=True, capture=None, disable_breakpoints=False)</code>","text":"<p>Tries executing the given blob of machine code in the current context of the inferior, optionally restoring the values of the registers as they were before the shellcode ran, as a means to allow for execution of the inferior to continue uninterrupted. The value of the program counter is always restored.</p> <p>Additionally, the caller may specify an object to be called before the context is restored, so that information stored in the registers after the shellcode finishes can be retrieved. The return value of that call will be returned by this function.</p>"},{"location":"source/gdblib/shellcode/#pwndbg.gdblib.shellcode.exec_shellcode--safety","title":"Safety","text":"<p>Seeing as this function injects code directly into the inferior and runs it, the caller must be careful to inject code that will (1) terminate and (2) not cause the inferior to misbehave. Otherwise, it is fairly easy to crash or currupt the memory in the inferior.</p>"},{"location":"source/gdblib/shellcode/#pwndbg.gdblib.shellcode.exec_syscall","title":"<code>exec_syscall(syscall, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None, disable_breakpoints=False)</code>","text":"<p>Tries executing the given syscall in the context of the inferior.</p>"},{"location":"source/gdblib/symbol/","title":"Symbol","text":"<p>Looking up addresses for function names / symbols, and vice-versa.</p> <p>Uses IDA when available if there isn't sufficient symbol information available.</p>"},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.selected_frame_source_absolute_filename","title":"<code>selected_frame_source_absolute_filename()</code>","text":"<p>Retrieve the symbol table\u2019s source absolute file name from the selected frame.</p> <p>In case of missing symbol table or frame information, None is returned.</p>"},{"location":"source/gdblib/vmmap/","title":"Vmmap","text":"<p>Routines to enumerate mapped memory, and attempt to associate address ranges with various ELF files and permissions.</p> <p>The reason that we need robustness is that not every operating system has /proc/$$/maps, which backs 'info proc mapping'.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.coredump_maps","title":"<code>coredump_maps()</code>","text":"<p>Parses <code>info proc mappings</code> and <code>maintenance info sections</code> and tries to make sense out of the result :)</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.get_known_maps","title":"<code>get_known_maps()</code>","text":"<p>Similar to <code>vmmap.get()</code>, except only returns maps in cases where the mappings are known, like if it's a coredump, or if process mappings are available.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_auxv","title":"<code>info_auxv(skip_exe=False)</code>","text":"<p>Extracts the name of the executable from the output of the command \"info auxv\". Note that if the executable path is a symlink, it is not dereferenced by <code>info auxv</code> and we also don't dereference it.</p> <p>Parameters:</p> Name Type Description Default <code>skip_exe(bool)</code> <p>Do not return any mappings that belong to the exe.</p> required <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A list of pwndbg.lib.memory.Page objects.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_files","title":"<code>info_files()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_proc_maps","title":"<code>info_proc_maps(parse_flags=True)</code>","text":"<p>Parse the result of info proc mappings.</p> <p>Example output:</p> Text Only<pre><code>    Start Addr           End Addr       Size     Offset  Perms  objfile\n      0x400000           0x401000     0x1000        0x0  r--p   /root/hello_world/main\n      0x401000           0x497000    0x96000     0x1000  r-xp   /root/hello_world/main\n      0x497000           0x4be000    0x27000    0x97000  r--p   /root/hello_world/main\n      0x4be000           0x4c3000     0x5000    0xbd000  r--p   /root/hello_world/main\n      0x4c3000           0x4c5000     0x2000    0xc2000  rw-p   /root/hello_world/main\n      0x4c5000           0x4cb000     0x6000        0x0  rw-p\n      0x4cb000           0x4ed000    0x22000        0x0  rw-p   [heap]\n0x7ffff7ff9000     0x7ffff7ffd000     0x4000        0x0  r--p   [vvar]\n0x7ffff7ffd000     0x7ffff7fff000     0x2000        0x0  r-xp   [vdso]\n0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rw-p   [stack]\n</code></pre> <p>0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   [vsyscall]</p> <p>Note: this may return no pages due to a bug/behavior of GDB. See https://sourceware.org/bugzilla/show_bug.cgi?id=31207 for more information.</p> <p>Returns:</p> Type Description <code>Page</code> <p>A tuple of pwndbg.lib.memory.Page objects or an empty tuple if</p> <code>...</code> <p>info proc mapping is not supported on the target.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_sharedlibrary","title":"<code>info_sharedlibrary()</code>","text":"<p>Parses the output of <code>info sharedlibrary</code>.</p> <p>Specifically, all we really want is any valid pointer into each library, and the path to the library on disk.</p> <p>With this information, we can use the ELF parser to get all of the page permissions for every mapped page in the ELF.</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A list of pwndbg.lib.memory.Page objects.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.is_corefile","title":"<code>is_corefile()</code>","text":"For example output use <p>gdb ./tests/binaries/crash_simple.out -ex run -ex 'generate-core-file ./core' -ex 'quit'</p> And then use <p>gdb ./tests/binaries/crash_simple.out -core ./core -ex 'info target'</p> <p>And:     gdb -core ./core</p> <p>As the two differ in output slighty.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.parse_info_proc_mappings_line","title":"<code>parse_info_proc_mappings_line(line, perms_available, parse_flags)</code>","text":"<p>Parse a line from <code>info proc mappings</code> and return a pwndbg.lib.memory.Page object if the line is valid.</p> Example lines <p>0x4c3000           0x4c5000     0x2000    0xc2000  rw-p   /root/hello_world/main 0x4c5000           0x4cb000     0x6000        0x0  rw-p</p> <p>The objfile column might be empty, and the permissions column is only present in GDB versions &gt;= 12.1 https://github.com/bminor/binutils-gdb/commit/29ef4c0699e1b46d41ade00ae07a54f979ea21cc</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>A line from <code>info proc mappings</code>.</p> required <p>Returns:</p> Type Description <code>Optional[Page]</code> <p>A pwndbg.lib.memory.Page object or None.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.proc_tid_maps","title":"<code>proc_tid_maps()</code>","text":"<p>Parse the contents of /proc/$TID/maps on the server. (TID == Thread Identifier. We do not use PID since it may not be correct)</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...] | None</code> <p>A tuple of pwndbg.lib.memory.Page objects or None if</p> <code>Tuple[Page, ...] | None</code> <p>/proc/$tid/maps doesn't exist or when we debug a qemu-user target</p>"},{"location":"source/gdblib/tui/__init__/","title":"init","text":""},{"location":"source/gdblib/tui/__init__/#pwndbg.gdblib.tui.setup","title":"<code>setup()</code>","text":""},{"location":"source/gdblib/tui/context/","title":"Context","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.sections","title":"<code>sections = ['legend'] + [section.__name__.replace('context_', '') for section in context_sections.values()]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.target_func","title":"<code>target_func: Callable[..., gdb._Window] = lambda window, section_name=section_name: ContextTUIWindow(window, section_name)</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow","title":"<code>ContextTUIWindow</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.__init__","title":"<code>__init__(tui_window, section)</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.click","title":"<code>click(x, y, button)</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.close","title":"<code>close()</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.hscroll","title":"<code>hscroll(num)</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.render","title":"<code>render()</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.vscroll","title":"<code>vscroll(num)</code>","text":""},{"location":"source/gdblib/tui/control/","title":"Control","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow","title":"<code>ControlTUIWindow</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.__init__","title":"<code>__init__(tui_window)</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.click","title":"<code>click(x, y, button)</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.close","title":"<code>close()</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.hscroll","title":"<code>hscroll(num)</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.render","title":"<code>render()</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.vscroll","title":"<code>vscroll(num)</code>","text":""},{"location":"source/integration/__init__/","title":"init","text":""},{"location":"source/integration/__init__/#pwndbg.integration.function_lookup","title":"<code>function_lookup = pwndbg.config.add_param('integration-function-lookup', True, 'whether to use integration to look up function type signatures')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.provider","title":"<code>provider: IntegrationProvider = IntegrationProvider()</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.provider_name","title":"<code>provider_name = pwndbg.config.add_param('integration-provider', 'none', 'which provider to use for integration features', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['none', 'binja', 'ida'])</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.smart_enhance","title":"<code>smart_enhance = pwndbg.config.add_param('integration-smart-enhance', True, 'whether to use integration to determine if code should be disassembled during enhancing')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.symbol_lookup","title":"<code>symbol_lookup = pwndbg.config.add_param('integration-symbol-lookup', True, 'whether to use integration to look up unknown symbols')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider","title":"<code>ConfigurableProvider</code>  <code>dataclass</code>","text":"<p>               Bases: <code>IntegrationProvider</code></p> <p>A wrapper around an IntegrationProvider that skips calling functions if disabled in config.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.inner","title":"<code>inner: IntegrationProvider</code>  <code>instance-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_stack_var_name","title":"<code>get_stack_var_name(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_versions","title":"<code>get_versions()</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider","title":"<code>IntegrationProvider</code>","text":"<p>A class representing an integration that provides intelligence external to GDB.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":"<p>Decompiles the code near an address given a line count.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":"<p>Gets any comments attached to an instruction.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":"<p>Gets the type signature of a function, used for argument labeling.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_stack_var_name","title":"<code>get_stack_var_name(addr)</code>","text":"<p>Gets the name of a stack variable based on only the address of the variable.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":"<p>Get a symbol at an address, or an offset from a symbol.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_versions","title":"<code>get_versions()</code>","text":"<p>Gets any version strings relevant to the integration, which are used when displaying the <code>version</code> command.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":"<p>Checks if integration thinks that an address is in a function, which is used to determine if <code>tel</code> should try to disassemble something.</p> <p>If uncertain, it's better to default to True than to False.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.switch_providers","title":"<code>switch_providers()</code>","text":""},{"location":"source/integration/binja/","title":"Binja","text":"<p>Talks to an XMLRPC server running inside of an active Binary Ninja instance, in order to query it about the database. Allows symbol resolution and interactive debugging.</p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.K","title":"<code>K = TypeVar('K')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_autosync","title":"<code>bn_autosync = pwndbg.config.add_param('bn-autosync', False, 'whether to automatically run bn-sync every step')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_il_level","title":"<code>bn_il_level = pwndbg.config.add_param('bn-il-level', 'hlil', 'the IL level to use when displaying Binary Ninja decompilation', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['disasm', 'llil', 'mlil', 'hlil'])</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_rpc_host","title":"<code>bn_rpc_host = pwndbg.config.add_param('bn-rpc-host', '127.0.0.1', 'Binary Ninja XML-RPC server host')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_rpc_port","title":"<code>bn_rpc_port = pwndbg.config.add_param('bn-rpc-port', 31337, 'Binary Ninja XML-RPC server port')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_timeout","title":"<code>bn_timeout = pwndbg.config.add_param('bn-timeout', 2, 'time to wait for Binary Ninja XML-RPC, in seconds')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.style","title":"<code>style = theme.add_param('bn-decomp-style', 'dark', f'Decompilation highlight theme for Binary Ninja (valid values are {', '.join(themes.keys())})')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.themes","title":"<code>themes = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider","title":"<code>BinjaProvider</code>","text":"<p>               Bases: <code>IntegrationProvider</code></p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_stack_var_name","title":"<code>get_stack_var_name(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_versions","title":"<code>get_versions()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.DarkTheme","title":"<code>DarkTheme</code>","text":"<p>               Bases: <code>Style</code></p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.DarkTheme.styles","title":"<code>styles = bn_to_pygment_theme({'TextToken': '#e0e0e0', 'InstructionToken': '#eddfb3', 'OperandSeparatorToken': '#e0e0e0', 'RegisterToken': '#e0e0e0', 'IntegerToken': '#a2d9af', 'PossibleAddressToken': '#a2d9af', 'BeginMemoryOperandToken': '#e0e0e0', 'EndMemoryOperandToken': '#e0e0e0', 'FloatingPointToken': '#a2d9af', 'AnnotationToken': '#dac4d1', 'CodeRelativeAddressToken': '#a2d9af', 'ArgumentNameToken': '#e0e0e0', 'HexDumpByteValueToken': '#e0e0e0', 'HexDumpSkippedByteToken': '#e0e0e0', 'HexDumpInvalidByteToken': '#909090', 'HexDumpTextToken': '#e0e0e0', 'OpcodeToken': '#909090', 'StringToken': '#dac4d1', 'CharacterConstantToken': '#dac4d1', 'KeywordToken': '#eddfb3', 'TypeNameToken': '#edbd81', 'FieldNameToken': '#b0dde4', 'NameSpaceToken': '#80c6e9', 'NameSpaceSeparatorToken': '#80c6e9', 'TagToken': '#e0e0e0', 'StructOffsetToken': '#b0dde4', 'StructOffsetByteValueToken': '#e0e0e0', 'StructureHexDumpTextToken': '#e0e0e0', 'GotoLabelToken': '#80c6e9', 'CommentToken': '#dac4d1', 'PossibleValueToken': '#e0e0e0', 'PossibleValueTypeToken': '#e0e0e0', 'ArrayIndexToken': '#a2d9af', 'IndentationToken': '#5d5d5d', 'UnknownMemoryToken': '#909090', 'EnumerationMemberToken': '#eddfb3', 'OperationToken': '#89a4b1', 'BaseStructureNameToken': '#dac4d1', 'BaseStructureSeparatorToken': '#dac4d1', 'BraceToken': '#e0e0e0', 'CodeSymbolToken': '#80c6e9', 'DataSymbolToken': '#8ee6ed', 'LocalVariableToken': '#e0e0e0', 'ImportToken': '#edbd81', 'AddressDisplayToken': '#a2d9af', 'IndirectImportToken': '#edbd81', 'ExternalSymbolToken': '#edbd81', 'StackVariableToken': '#c1dcc7', 'AddressSeparatorToken': '#e0e0e0'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.LightTheme","title":"<code>LightTheme</code>","text":"<p>               Bases: <code>Style</code></p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.LightTheme.styles","title":"<code>styles = bn_to_pygment_theme({'TextToken': '#1f1f1f', 'InstructionToken': '#8d8d2d', 'OperandSeparatorToken': '#1f1f1f', 'RegisterToken': '#1f1f1f', 'IntegerToken': '#30820d', 'PossibleAddressToken': '#30820d', 'BeginMemoryOperandToken': '#1f1f1f', 'EndMemoryOperandToken': '#1f1f1f', 'FloatingPointToken': '#30820d', 'AnnotationToken': '#bf2624', 'CodeRelativeAddressToken': '#30820d', 'ArgumentNameToken': '#1f1f1f', 'HexDumpByteValueToken': '#1f1f1f', 'HexDumpSkippedByteToken': '#1f1f1f', 'HexDumpInvalidByteToken': '#7a7a7a', 'HexDumpTextToken': '#1f1f1f', 'OpcodeToken': '#7a7a7a', 'StringToken': '#203635', 'CharacterConstantToken': '#203635', 'KeywordToken': '#8d8d2d', 'TypeNameToken': '#e07c35', 'FieldNameToken': '#35dae0', 'NameSpaceToken': '#00a4c7', 'NameSpaceSeparatorToken': '#00a4c7', 'TagToken': '#1f1f1f', 'StructOffsetToken': '#35dae0', 'StructOffsetByteValueToken': '#1f1f1f', 'StructureHexDumpTextToken': '#1f1f1f', 'GotoLabelToken': '#00a4c7', 'CommentToken': '#bf2624', 'PossibleValueToken': '#1f1f1f', 'PossibleValueTypeToken': '#1f1f1f', 'ArrayIndexToken': '#30820d', 'IndentationToken': '#bcbcbc', 'UnknownMemoryToken': '#7a7a7a', 'EnumerationMemberToken': '#8d8d2d', 'OperationToken': '#5b848d', 'BaseStructureNameToken': '#bf2624', 'BaseStructureSeparatorToken': '#bf2624', 'BraceToken': '#1f1f1f', 'CodeSymbolToken': '#00a4c7', 'DataSymbolToken': '#278cad', 'LocalVariableToken': '#1f1f1f', 'ImportToken': '#e07c35', 'AddressDisplayToken': '#30820d', 'IndirectImportToken': '#e07c35', 'ExternalSymbolToken': '#e07c35', 'StackVariableToken': '#275016', 'AddressSeparatorToken': '#1f1f1f'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.auto_clear_pc","title":"<code>auto_clear_pc()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.auto_update_bp","title":"<code>auto_update_bp()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.auto_update_pc","title":"<code>auto_update_pc()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.available","title":"<code>available()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.base","title":"<code>base()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_to_pygment_theme","title":"<code>bn_to_pygment_theme(theme)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_to_pygment_tok","title":"<code>bn_to_pygment_tok(tok)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.can_connect","title":"<code>can_connect()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.init_bn_rpc_client","title":"<code>init_bn_rpc_client()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.l2r","title":"<code>l2r(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.navigate_to","title":"<code>navigate_to(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.r2l","title":"<code>r2l(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.with_bn","title":"<code>with_bn(fallback=None)</code>","text":""},{"location":"source/integration/ida/","title":"Ida","text":"<p>Talks to an XMLRPC server running inside of an active IDA Pro instance, in order to query it about the database.  Allows symbol resolution and interactive debugging.</p>"},{"location":"source/integration/ida/#pwndbg.integration.ida.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.colored_pc","title":"<code>colored_pc = None</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_replacements","title":"<code>ida_replacements = {'__int64': 'signed long long int', '__int32': 'signed int', '__int16': 'signed short', '__int8': 'signed char', '__uint64': 'unsigned long long int', '__uint32': 'unsigned int', '__uint16': 'unsigned short', '__uint8': 'unsigned char', '_BOOL_1': 'unsigned char', '_BOOL_2': 'unsigned short', '_BOOL_4': 'unsigned int', '_BYTE': 'unsigned char', '_WORD': 'unsigned short', '_DWORD': 'unsigned int', '_QWORD': 'unsigned long long', '__pure': '', '__hidden': '', '__return_ptr': '', '__struct_ptr': '', '__array_ptr': '', '__fastcall': '', '__cdecl': '', '__thiscall': '', '__userpurge': ''}</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_rpc_host","title":"<code>ida_rpc_host = pwndbg.config.add_param('ida-rpc-host', '127.0.0.1', 'ida xmlrpc server address')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_rpc_port","title":"<code>ida_rpc_port = pwndbg.config.add_param('ida-rpc-port', 31337, 'ida xmlrpc server port')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_timeout","title":"<code>ida_timeout = pwndbg.config.add_param('ida-timeout', 2, 'time to wait for ida xmlrpc in seconds')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.idc","title":"<code>idc = IDC()</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IDC","title":"<code>IDC</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IDC.query","title":"<code>query = \"{k:v for k,v in globals()['idc'].__dict__.items() if type(v) in (int,long)}\"</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IDC.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider","title":"<code>IdaProvider</code>","text":"<p>               Bases: <code>IntegrationProvider</code></p>"},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_versions","title":"<code>get_versions()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Anterior","title":"<code>Anterior(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ArgCount","title":"<code>ArgCount(address)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Auto_Color_PC","title":"<code>Auto_Color_PC()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Auto_UnColor_PC","title":"<code>Auto_UnColor_PC()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Comment","title":"<code>Comment(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetBptEA","title":"<code>GetBptEA(i)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetBptQty","title":"<code>GetBptQty()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetBreakpoints","title":"<code>GetBreakpoints()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetFlags","title":"<code>GetFlags(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetFuncOffset","title":"<code>GetFuncOffset(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetFunctionName","title":"<code>GetFunctionName(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetIdbPath","title":"<code>GetIdbPath()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberFlag","title":"<code>GetMemberFlag(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberId","title":"<code>GetMemberId(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberName","title":"<code>GetMemberName(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberQty","title":"<code>GetMemberQty(sid)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberSize","title":"<code>GetMemberSize(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucId","title":"<code>GetStrucId(idx)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucName","title":"<code>GetStrucName(sid)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucNextOff","title":"<code>GetStrucNextOff(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucQty","title":"<code>GetStrucQty()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucSize","title":"<code>GetStrucSize(sid)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetType","title":"<code>GetType(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Jump","title":"<code>Jump(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.LocByName","title":"<code>LocByName(name)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Name","title":"<code>Name(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.NextHead","title":"<code>NextHead(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.PrevHead","title":"<code>PrevHead(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.SaveBase","title":"<code>SaveBase(path)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.SetColor","title":"<code>SetColor(pc, color)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.UpdateBreakpoints","title":"<code>UpdateBreakpoints()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.available","title":"<code>available()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.base","title":"<code>base()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.can_connect","title":"<code>can_connect()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.decompile","title":"<code>decompile(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.decompile_context","title":"<code>decompile_context(pc, context_lines)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.get_ida_versions","title":"<code>get_ida_versions()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.has_cached_cfunc","title":"<code>has_cached_cfunc(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.here","title":"<code>here()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.init_ida_rpc_client","title":"<code>init_ida_rpc_client()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.isASCII","title":"<code>isASCII(flags)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.l2r","title":"<code>l2r(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.print_member","title":"<code>print_member(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.print_structs","title":"<code>print_structs()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.r2l","title":"<code>r2l(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.remote","title":"<code>remote(function)</code>","text":"<p>Runs the provided function in IDA's interpreter.</p> <p>The function must be self-contained and not reference any global variables.</p>"},{"location":"source/integration/ida/#pwndbg.integration.ida.returns_address","title":"<code>returns_address(function)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.takes_address","title":"<code>takes_address(function)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.withHexrays","title":"<code>withHexrays(func)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.withIDA","title":"<code>withIDA(func)</code>","text":""},{"location":"source/lib/__init__/","title":"init","text":""},{"location":"source/lib/abi/","title":"Abi","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.DEFAULT_ABIS","title":"<code>DEFAULT_ABIS: Dict[Tuple[int, str, str], ABI] = {(32, 'i386', 'linux'): linux_i386, (64, 'x86-64', 'linux'): linux_amd64, (64, 'aarch64', 'linux'): linux_aarch64, (32, 'arm', 'linux'): linux_arm, (32, 'thumb', 'linux'): linux_arm, (32, 'mips', 'linux'): linux_mips, (64, 'mips', 'linux'): linux_mips64, (32, 'powerpc', 'linux'): linux_ppc, (64, 'powerpc', 'linux'): linux_ppc64, (32, 'rv32', 'linux'): linux_riscv32, (64, 'rv64', 'linux'): linux_riscv64}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SIGRETURN_ABIS","title":"<code>SIGRETURN_ABIS: Dict[Tuple[int, str, str], SigreturnABI] = {(32, 'i386', 'linux'): linux_i386_sigreturn, (64, 'x86-64', 'linux'): linux_amd64_sigreturn, (32, 'arm', 'linux'): linux_arm_sigreturn, (32, 'thumb', 'linux'): linux_arm_sigreturn}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SYSCALL_ABIS","title":"<code>SYSCALL_ABIS: Dict[Tuple[int, str, str], SyscallABI] = {(32, 'i386', 'linux'): linux_i386_syscall, (64, 'x86-64', 'linux'): linux_amd64_syscall, (64, 'aarch64', 'linux'): linux_aarch64_syscall, (32, 'arm', 'linux'): linux_arm_syscall, (32, 'thumb', 'linux'): linux_arm_syscall, (32, 'mips', 'linux'): linux_mips_syscall, (64, 'mips', 'linux'): linux_mips64_syscall, (32, 'powerpc', 'linux'): linux_ppc_syscall, (64, 'powerpc', 'linux'): linux_ppc64_syscall, (32, 'rv32', 'linux'): linux_riscv32_syscall, (64, 'rv64', 'linux'): linux_riscv64_syscall}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_aarch64","title":"<code>linux_aarch64 = ABI(['x0', 'x1', 'x2', 'x3'], 16, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_aarch64_syscall","title":"<code>linux_aarch64_syscall = SyscallABI(['x8', 'x0', 'x1', 'x2', 'x3', 'x4', 'x5'], 16, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64","title":"<code>linux_amd64 = ABI(['rdi', 'rsi', 'rdx', 'rcx', 'r8', 'r9'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64_sigreturn","title":"<code>linux_amd64_sigreturn = SigreturnABI(['rax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64_srop","title":"<code>linux_amd64_srop = ABI(['rax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64_syscall","title":"<code>linux_amd64_syscall = SyscallABI(['rax', 'rdi', 'rsi', 'rdx', 'r10', 'r8', 'r9'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm","title":"<code>linux_arm = ABI(['r0', 'r1', 'r2', 'r3'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm_sigreturn","title":"<code>linux_arm_sigreturn = SigreturnABI(['r7'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm_srop","title":"<code>linux_arm_srop = ABI(['r7'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm_syscall","title":"<code>linux_arm_syscall = SyscallABI(['r7', 'r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386","title":"<code>linux_i386 = ABI([], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386_sigreturn","title":"<code>linux_i386_sigreturn = SigreturnABI(['eax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386_srop","title":"<code>linux_i386_srop = ABI(['eax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386_syscall","title":"<code>linux_i386_syscall = SyscallABI(['eax', 'ebx', 'ecx', 'edx', 'esi', 'edi', 'ebp'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips","title":"<code>linux_mips = ABI(['$a0', '$a1', '$a2', '$a3'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips64","title":"<code>linux_mips64 = ABI(['$a0', '$a1', '$a2', '$a3', '$a4', '$a5', '$a6', '$a7'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips64_syscall","title":"<code>linux_mips64_syscall = SyscallABI(['$v0', '$a0', '$a1', '$a2', '$a3', '$a4', '$a5'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips_syscall","title":"<code>linux_mips_syscall = SyscallABI(['$v0', '$a0', '$a1', '$a2', '$a3'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc","title":"<code>linux_ppc = ABI(['r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc64","title":"<code>linux_ppc64 = ABI(['r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc64_syscall","title":"<code>linux_ppc64_syscall = SyscallABI(['r0', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc_syscall","title":"<code>linux_ppc_syscall = SyscallABI(['r0', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv32","title":"<code>linux_riscv32 = ABI(['a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv32_syscall","title":"<code>linux_riscv32_syscall = SyscallABI(['a7', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv64","title":"<code>linux_riscv64 = ABI(['a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv64_syscall","title":"<code>linux_riscv64_syscall = SyscallABI(['a7', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI","title":"<code>ABI</code>","text":"<p>Encapsulates information about a calling convention.</p>"},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.arg_alignment","title":"<code>arg_alignment = align</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.register_arguments","title":"<code>register_arguments: List[str] = regs</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.returns","title":"<code>returns = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.stack_minimum","title":"<code>stack_minimum = minimum</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.__init__","title":"<code>__init__(regs, align, minimum)</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.default","title":"<code>default()</code>  <code>staticmethod</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.sigreturn","title":"<code>sigreturn()</code>  <code>staticmethod</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.syscall","title":"<code>syscall()</code>  <code>staticmethod</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SigreturnABI","title":"<code>SigreturnABI</code>","text":"<p>               Bases: <code>SyscallABI</code></p> <p>The sigreturn ABI is similar to the syscall ABI, except that both PC and SP are loaded from the stack.  Because of this, there is no 'return' slot necessary on the stack.</p>"},{"location":"source/lib/abi/#pwndbg.lib.abi.SigreturnABI.returns","title":"<code>returns = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SyscallABI","title":"<code>SyscallABI</code>","text":"<p>               Bases: <code>ABI</code></p> <p>The syscall ABI treats the syscall number as the zeroth argument, which must be loaded into the specified register.</p>"},{"location":"source/lib/abi/#pwndbg.lib.abi.SyscallABI.syscall_register","title":"<code>syscall_register = register_arguments.pop(0)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SyscallABI.__init__","title":"<code>__init__(register_arguments, *a, **kw)</code>","text":""},{"location":"source/lib/android/","title":"Android","text":""},{"location":"source/lib/android/#pwndbg.lib.android.KNOWN_AIDS","title":"<code>KNOWN_AIDS = {0: 'AID_ROOT', 1000: 'AID_SYSTEM', 1001: 'AID_RADIO', 1002: 'AID_BLUETOOTH', 1003: 'AID_GRAPHICS', 1004: 'AID_INPUT', 1005: 'AID_AUDIO', 1006: 'AID_CAMERA', 1007: 'AID_LOG', 1008: 'AID_COMPASS', 1009: 'AID_MOUNT', 1010: 'AID_WIFI', 1011: 'AID_ADB', 1012: 'AID_INSTALL', 1013: 'AID_MEDIA', 1014: 'AID_DHCP', 1015: 'AID_SDCARD_RW', 1016: 'AID_VPN', 1017: 'AID_KEYSTORE', 1018: 'AID_USB', 1019: 'AID_DRM', 1020: 'AID_MDNSR', 1021: 'AID_GPS', 1022: 'AID_UNUSED1', 1023: 'AID_MEDIA_RW', 1024: 'AID_MTP', 1025: 'AID_UNUSED2', 1026: 'AID_DRMRPC', 1027: 'AID_NFC', 1028: 'AID_SDCARD_R', 1029: 'AID_CLAT', 1030: 'AID_LOOP_RADIO', 1031: 'AID_MEDIA_DRM', 1032: 'AID_PACKAGE_INFO', 1033: 'AID_SDCARD_PICS', 1034: 'AID_SDCARD_AV', 1035: 'AID_SDCARD_ALL', 1036: 'AID_LOGD', 1037: 'AID_SHARED_RELRO', 1038: 'AID_DBUS', 1039: 'AID_TLSDATE', 1040: 'AID_MEDIA_EX', 1041: 'AID_AUDIOSERVER', 1042: 'AID_METRICS_COLL', 1043: 'AID_METRICSD', 1044: 'AID_WEBSERV', 1045: 'AID_DEBUGGERD', 1046: 'AID_MEDIA_CODEC', 1047: 'AID_CAMERASERVER', 1048: 'AID_FIREWALL', 1049: 'AID_TRUNKS', 1050: 'AID_NVRAM', 2001: 'AID_CACHE', 2002: 'AID_DIAG', 2900: 'AID_OEM_RESERVED_START', 2999: 'AID_OEM_RESERVED_END', 3001: 'AID_NET_BT_ADMIN', 3002: 'AID_NET_BT', 3003: 'AID_INET', 3004: 'AID_NET_RAW', 3005: 'AID_NET_ADMIN', 3006: 'AID_NET_BW_STATS', 3007: 'AID_NET_BW_ACCT', 3008: 'AID_NET_BT_STACK', 3009: 'AID_READPROC', 3010: 'AID_WAKELOCK', 5000: 'AID_OEM_RESERVED_2_START', 5999: 'AID_OEM_RESERVED_2_END', 9997: 'AID_EVERYBODY', 9998: 'AID_MISC', 9999: 'AID_NOBODY', 10000: 'AID_APP', 50000: 'AID_SHARED_GID_START', 59999: 'AID_SHARED_GID_END', 99000: 'AID_ISOLATED_START', 99999: 'AID_ISOLATED_END', 100000: 'AID_USER'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/android/#pwndbg.lib.android.aid_name","title":"<code>aid_name(uid)</code>","text":""},{"location":"source/lib/arch/","title":"Arch","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.FMT_BIG_ENDIAN","title":"<code>FMT_BIG_ENDIAN = {1: 'B', 2: '&gt;H', 4: '&gt;I', 8: '&gt;Q'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.FMT_LITTLE_ENDIAN","title":"<code>FMT_LITTLE_ENDIAN = {1: 'B', 2: '&lt;H', 4: '&lt;I', 8: '&lt;Q'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch","title":"<code>Arch</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.native_endian","title":"<code>native_endian = str(sys.byteorder)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.__init__","title":"<code>__init__(arch_name, ptrsize, endian)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.pack","title":"<code>pack(integer)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.pack_size","title":"<code>pack_size(integer, size)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.unpack","title":"<code>unpack(data)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.unpack_size","title":"<code>unpack_size(data, size)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.update","title":"<code>update(arch_name, ptrsize, endian)</code>","text":""},{"location":"source/lib/cache/","title":"Cache","text":"<p>Caches return values until some event in the inferior happens, e.g. execution stops because of a SIGINT or breakpoint, or a new library/objfile are loaded, etc.</p>"},{"location":"source/lib/cache/#pwndbg.lib.cache.Cache","title":"<code>Cache = Union[Dict[Tuple[Any, ...], Any], DebugCacheDict]</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.IS_CACHING","title":"<code>IS_CACHING = True</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.IS_CACHING_DISABLED_FOR","title":"<code>IS_CACHING_DISABLED_FOR: Dict[str, bool] = {'stop': False, 'exit': False, 'objfile': False, 'start': False, 'cont': False, 'thread': False, 'prompt': False, 'forever': False}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.debug","title":"<code>debug = NO_DEBUG</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.debug_name","title":"<code>debug_name = 'regs'</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict","title":"<code>DebugCacheDict</code>","text":"<p>               Bases: <code>UserDict</code></p>"},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.func","title":"<code>func = func</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.hits","title":"<code>hits = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.misses","title":"<code>misses = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.name","title":"<code>name = f'{func.__module__.split('.')[-1]}.{func.__name__}'</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.__init__","title":"<code>__init__(func, *args, **kwargs)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.__setitem__","title":"<code>__setitem__(key, value)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.clear","title":"<code>clear()</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.cache_until","title":"<code>cache_until(*event_names)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.clear_cache","title":"<code>clear_cache(cache_name)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.clear_caches","title":"<code>clear_caches()</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.connect_clear_caching_events","title":"<code>connect_clear_caching_events(event_dicts, **kwargs)</code>","text":"<p>Connect given debugger event hooks to correspoonding _CacheUntilEvent instances</p>"},{"location":"source/lib/common/","title":"Common","text":""},{"location":"source/lib/common/#pwndbg.lib.common.hex2ptr_common","title":"<code>hex2ptr_common(arg)</code>","text":"<p>Converts a hex string to a little-endian integer address.</p>"},{"location":"source/lib/config/","title":"Config","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_AUTO_BOOLEAN","title":"<code>PARAM_AUTO_BOOLEAN = 6</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_BOOLEAN","title":"<code>PARAM_BOOLEAN = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_CLASSES","title":"<code>PARAM_CLASSES = {bool: PARAM_BOOLEAN, int: PARAM_ZINTEGER, str: PARAM_STRING}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ENUM","title":"<code>PARAM_ENUM = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_INTEGER","title":"<code>PARAM_INTEGER = 8</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_OPTIONAL_FILENAME","title":"<code>PARAM_OPTIONAL_FILENAME = 5</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_STRING","title":"<code>PARAM_STRING = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_UINTEGER","title":"<code>PARAM_UINTEGER = 9</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ZINTEGER","title":"<code>PARAM_ZINTEGER = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ZUINTEGER","title":"<code>PARAM_ZUINTEGER = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ZUINTEGER_UNLIMITED","title":"<code>PARAM_ZUINTEGER_UNLIMITED = 7</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config","title":"<code>Config</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.params","title":"<code>params: Dict[str, Parameter] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.triggers","title":"<code>triggers: DefaultDict[str, List[Callable[..., Any]]] = defaultdict(list)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.__getattr__","title":"<code>__getattr__(name)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.__setattr__","title":"<code>__setattr__(attr, val)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.add_param","title":"<code>add_param(name, default, set_show_doc, *, help_docstring='', param_class=None, enum_sequence=None, scope='config')</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.add_param_obj","title":"<code>add_param_obj(p)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.get_params","title":"<code>get_params(scope)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.trigger","title":"<code>trigger(*params)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter","title":"<code>Parameter</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.default","title":"<code>default = default</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.enum_sequence","title":"<code>enum_sequence = enum_sequence</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.help_docstring","title":"<code>help_docstring = help_docstring.strip()</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.is_changed","title":"<code>is_changed: bool</code>  <code>property</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.param_class","title":"<code>param_class = param_class or PARAM_CLASSES[type(default)]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.scope","title":"<code>scope = scope</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.set_show_doc","title":"<code>set_show_doc = set_show_doc.strip()</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.value","title":"<code>value = default</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__add__","title":"<code>__add__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__bool__","title":"<code>__bool__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__div__","title":"<code>__div__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__floordiv__","title":"<code>__floordiv__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__getattr__","title":"<code>__getattr__(name)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__init__","title":"<code>__init__(name, default, set_show_doc, *, help_docstring='', param_class=None, enum_sequence=None, scope='config')</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__len__","title":"<code>__len__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__lt__","title":"<code>__lt__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__mod__","title":"<code>__mod__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__mul__","title":"<code>__mul__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__pow__","title":"<code>__pow__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__radd__","title":"<code>__radd__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__rmul__","title":"<code>__rmul__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__rsub__","title":"<code>__rsub__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__sub__","title":"<code>__sub__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.attr_name","title":"<code>attr_name()</code>","text":"<p>Returns the attribute name associated with this config option, i.e. <code>my-config</code> has the attribute name <code>my_config</code></p>"},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.revert_default","title":"<code>revert_default()</code>","text":""},{"location":"source/lib/elftypes/","title":"Elftypes","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AT_CONSTANTS","title":"<code>AT_CONSTANTS: Dict[int, str] = {0: 'AT_NULL', 1: 'AT_IGNORE', 2: 'AT_EXECFD', 3: 'AT_PHDR', 4: 'AT_PHENT', 5: 'AT_PHNUM', 6: 'AT_PAGESZ', 7: 'AT_BASE', 8: 'AT_FLAGS', 9: 'AT_ENTRY', 10: 'AT_NOTELF', 11: 'AT_UID', 12: 'AT_EUID', 13: 'AT_GID', 14: 'AT_EGID', 15: 'AT_PLATFORM', 16: 'AT_HWCAP', 17: 'AT_CLKTCK', 18: 'AT_FPUCW', 19: 'AT_DCACHEBSIZE', 20: 'AT_ICACHEBSIZE', 21: 'AT_UCACHEBSIZE', 22: 'AT_IGNOREPPC', 23: 'AT_SECURE', 24: 'AT_BASE_PLATFORM', 25: 'AT_RANDOM', 26: 'AT_HWCAP2', 27: 'AT_RSEQ_FEATURE_SIZE', 28: 'AT_RSEQ_ALIGN', 29: 'AT_HWCAP3', 30: 'AT_HWCAP4', 31: 'AT_EXECFN', 32: 'AT_SYSINFO', 33: 'AT_SYSINFO_EHDR', 34: 'AT_L1I_CACHESHAPE', 35: 'AT_L1D_CACHESHAPE', 36: 'AT_L2_CACHESHAPE', 37: 'AT_L3_CACHESHAPE', 40: 'AT_L1I_CACHESIZE', 41: 'AT_L1I_CACHEGEOMETRY', 42: 'AT_L1D_CACHESIZE', 43: 'AT_L1D_CACHEGEOMETRY', 44: 'AT_L2_CACHESIZE', 45: 'AT_L2_CACHEGEOMETRY', 46: 'AT_L3_CACHESIZE', 47: 'AT_L3_CACHEGEOMETRY', 51: 'AT_MINSIGSTKSZ'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AT_CONSTANT_NAMES","title":"<code>AT_CONSTANT_NAMES = {v: kfor (k, v) in AT_CONSTANTS.items()}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Addr","title":"<code>Elf32_Addr = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Half","title":"<code>Elf32_Half = ctypes.c_uint16</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Off","title":"<code>Elf32_Off = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Sword","title":"<code>Elf32_Sword = ctypes.c_int32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Word","title":"<code>Elf32_Word = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Addr","title":"<code>Elf64_Addr = ctypes.c_uint64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Half","title":"<code>Elf64_Half = ctypes.c_uint16</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Off","title":"<code>Elf64_Off = ctypes.c_uint64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_SHalf","title":"<code>Elf64_SHalf = ctypes.c_int16</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Sword","title":"<code>Elf64_Sword = ctypes.c_int32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Sxword","title":"<code>Elf64_Sxword = ctypes.c_int64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Word","title":"<code>Elf64_Word = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Xword","title":"<code>Elf64_Xword = ctypes.c_uint64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV","title":"<code>AUXV</code>","text":"<p>               Bases: <code>Dict[str, Union[int, str]]</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_BASE","title":"<code>AT_BASE: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_BASE_PLATFORM","title":"<code>AT_BASE_PLATFORM: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_ENTRY","title":"<code>AT_ENTRY: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_EXECFN","title":"<code>AT_EXECFN: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_PHDR","title":"<code>AT_PHDR: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_PLATFORM","title":"<code>AT_PLATFORM: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_RANDOM","title":"<code>AT_RANDOM: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_SYSINFO","title":"<code>AT_SYSINFO: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.AT_SYSINFO_EHDR","title":"<code>AT_SYSINFO_EHDR: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AUXV.set","title":"<code>set(const, value)</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Ehdr","title":"<code>Elf32_Ehdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Phdr","title":"<code>Elf32_Phdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Ehdr","title":"<code>Elf64_Ehdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Phdr","title":"<code>Elf64_Phdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants","title":"<code>constants</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_BASE","title":"<code>AT_BASE = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_BASE_PLATFORM","title":"<code>AT_BASE_PLATFORM = 24</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_CLKTCK","title":"<code>AT_CLKTCK = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_DCACHEBSIZE","title":"<code>AT_DCACHEBSIZE = 19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EGID","title":"<code>AT_EGID = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_ENTRY","title":"<code>AT_ENTRY = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EUID","title":"<code>AT_EUID = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EXECFD","title":"<code>AT_EXECFD = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EXECFN","title":"<code>AT_EXECFN = 31</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_FLAGS","title":"<code>AT_FLAGS = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_FPUCW","title":"<code>AT_FPUCW = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_GID","title":"<code>AT_GID = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_HWCAP","title":"<code>AT_HWCAP = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_ICACHEBSIZE","title":"<code>AT_ICACHEBSIZE = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_IGNORE","title":"<code>AT_IGNORE = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_IGNOREPPC","title":"<code>AT_IGNOREPPC = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L1D_CACHESHAPE","title":"<code>AT_L1D_CACHESHAPE = 35</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L1I_CACHESHAPE","title":"<code>AT_L1I_CACHESHAPE = 34</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L2_CACHESHAPE","title":"<code>AT_L2_CACHESHAPE = 36</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L3_CACHESHAPE","title":"<code>AT_L3_CACHESHAPE = 37</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_NOTELF","title":"<code>AT_NOTELF = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_NULL","title":"<code>AT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PAGESZ","title":"<code>AT_PAGESZ = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PHDR","title":"<code>AT_PHDR = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PHENT","title":"<code>AT_PHENT = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PHNUM","title":"<code>AT_PHNUM = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PLATFORM","title":"<code>AT_PLATFORM = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_RANDOM","title":"<code>AT_RANDOM = 25</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_SECURE","title":"<code>AT_SECURE = 23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_SYSINFO","title":"<code>AT_SYSINFO = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_SYSINFO_EHDR","title":"<code>AT_SYSINFO_EHDR = 33</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_UCACHEBSIZE","title":"<code>AT_UCACHEBSIZE = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_UID","title":"<code>AT_UID = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_DEBUG","title":"<code>DT_DEBUG = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_ENCODING","title":"<code>DT_ENCODING = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_FINI","title":"<code>DT_FINI = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_HASH","title":"<code>DT_HASH = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_INIT","title":"<code>DT_INIT = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_JMPREL","title":"<code>DT_JMPREL = 23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_NEEDED","title":"<code>DT_NEEDED = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_NULL","title":"<code>DT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_PLTGOT","title":"<code>DT_PLTGOT = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_PLTREL","title":"<code>DT_PLTREL = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_PLTRELSZ","title":"<code>DT_PLTRELSZ = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_REL","title":"<code>DT_REL = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELA","title":"<code>DT_RELA = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELAENT","title":"<code>DT_RELAENT = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELASZ","title":"<code>DT_RELASZ = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELENT","title":"<code>DT_RELENT = 19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELSZ","title":"<code>DT_RELSZ = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RPATH","title":"<code>DT_RPATH = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SONAME","title":"<code>DT_SONAME = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_STRSZ","title":"<code>DT_STRSZ = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_STRTAB","title":"<code>DT_STRTAB = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SYMBOLIC","title":"<code>DT_SYMBOLIC = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SYMENT","title":"<code>DT_SYMENT = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SYMTAB","title":"<code>DT_SYMTAB = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_TEXTREL","title":"<code>DT_TEXTREL = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_ABIVERSION","title":"<code>EI_ABIVERSION = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_CLASS","title":"<code>EI_CLASS = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_DATA","title":"<code>EI_DATA = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG0","title":"<code>EI_MAG0 = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG1","title":"<code>EI_MAG1 = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG2","title":"<code>EI_MAG2 = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG3","title":"<code>EI_MAG3 = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_NIDENT","title":"<code>EI_NIDENT = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_OSABI","title":"<code>EI_OSABI = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_PAD","title":"<code>EI_PAD = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_VERSION","title":"<code>EI_VERSION = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFCLASS32","title":"<code>ELFCLASS32 = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFCLASS64","title":"<code>ELFCLASS64 = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFCLASSNONE","title":"<code>ELFCLASSNONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFDATA2LSB","title":"<code>ELFDATA2LSB = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFDATA2MSB","title":"<code>ELFDATA2MSB = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFDATANONE","title":"<code>ELFDATANONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG0","title":"<code>ELFMAG0 = 127</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG1","title":"<code>ELFMAG1 = ord('E')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG2","title":"<code>ELFMAG2 = ord('L')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG3","title":"<code>ELFMAG3 = ord('F')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_CORE","title":"<code>ET_CORE = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_DYN","title":"<code>ET_DYN = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_EXEC","title":"<code>ET_EXEC = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_NONE","title":"<code>ET_NONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_REL","title":"<code>ET_REL = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_386_IOPERM","title":"<code>NT_386_IOPERM = 513</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_386_TLS","title":"<code>NT_386_TLS = 512</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_HW_BREAK","title":"<code>NT_ARM_HW_BREAK = 1026</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_HW_WATCH","title":"<code>NT_ARM_HW_WATCH = 1027</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_TLS","title":"<code>NT_ARM_TLS = 1025</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_VFP","title":"<code>NT_ARM_VFP = 1024</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_AUXV","title":"<code>NT_AUXV = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_FILE","title":"<code>NT_FILE = 1179208773</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_METAG_CBUF","title":"<code>NT_METAG_CBUF = 1280</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_METAG_RPIPE","title":"<code>NT_METAG_RPIPE = 1281</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_METAG_TLS","title":"<code>NT_METAG_TLS = 1282</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PPC_SPE","title":"<code>NT_PPC_SPE = 257</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PPC_VMX","title":"<code>NT_PPC_VMX = 256</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PPC_VSX","title":"<code>NT_PPC_VSX = 258</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRFPREG","title":"<code>NT_PRFPREG = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRPSINFO","title":"<code>NT_PRPSINFO = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRSTATUS","title":"<code>NT_PRSTATUS = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRXFPREG","title":"<code>NT_PRXFPREG = 1189489535</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_CTRS","title":"<code>NT_S390_CTRS = 772</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_HIGH_GPRS","title":"<code>NT_S390_HIGH_GPRS = 768</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_LAST_BREAK","title":"<code>NT_S390_LAST_BREAK = 774</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_PREFIX","title":"<code>NT_S390_PREFIX = 773</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_SYSTEM_CALL","title":"<code>NT_S390_SYSTEM_CALL = 775</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TDB","title":"<code>NT_S390_TDB = 776</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TIMER","title":"<code>NT_S390_TIMER = 769</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TODCMP","title":"<code>NT_S390_TODCMP = 770</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TODPREG","title":"<code>NT_S390_TODPREG = 771</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_SIGINFO","title":"<code>NT_SIGINFO = 1397311305</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_TASKSTRUCT","title":"<code>NT_TASKSTRUCT = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_X86_XSTATE","title":"<code>NT_X86_XSTATE = 514</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_DYNAMIC","title":"<code>PT_DYNAMIC = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_INTERP","title":"<code>PT_INTERP = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_LOAD","title":"<code>PT_LOAD = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_NOTE","title":"<code>PT_NOTE = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_NULL","title":"<code>PT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_PHDR","title":"<code>PT_PHDR = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_SHLIB","title":"<code>PT_SHLIB = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_TLS","title":"<code>PT_TLS = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_DYNAMIC","title":"<code>SHT_DYNAMIC = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_DYNSYM","title":"<code>SHT_DYNSYM = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_HASH","title":"<code>SHT_HASH = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NOBITS","title":"<code>SHT_NOBITS = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NOTE","title":"<code>SHT_NOTE = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NULL","title":"<code>SHT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NUM","title":"<code>SHT_NUM = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_PROGBITS","title":"<code>SHT_PROGBITS = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_REL","title":"<code>SHT_REL = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_RELA","title":"<code>SHT_RELA = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_SHLIB","title":"<code>SHT_SHLIB = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_STRTAB","title":"<code>SHT_STRTAB = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_SYMTAB","title":"<code>SHT_SYMTAB = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_COMMON","title":"<code>STT_COMMON = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_FILE","title":"<code>STT_FILE = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_FUNC","title":"<code>STT_FUNC = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_NOTYPE","title":"<code>STT_NOTYPE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_OBJECT","title":"<code>STT_OBJECT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_SECTION","title":"<code>STT_SECTION = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_TLS","title":"<code>STT_TLS = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/funcparser/","title":"Funcparser","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.CAstNode","title":"<code>CAstNode = Union[c_ast.EllipsisParam, c_ast.PtrDecl, c_ast.ArrayDecl, c_ast.FuncDecl, c_ast.Struct, c_ast.Union, c_ast.Enum]</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.ExtractAllFuncDecls","title":"<code>ExtractAllFuncDecls(ast, verbose=False)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.ExtractFuncDecl","title":"<code>ExtractFuncDecl(node, verbose=False)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.ExtractFuncDeclFromSource","title":"<code>ExtractFuncDeclFromSource(source)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.Stringify","title":"<code>Stringify(X)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.extractTypeAndName","title":"<code>extractTypeAndName(n, defaultName=None)</code>","text":""},{"location":"source/lib/functions/","title":"Functions","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.functions","title":"<code>functions = LazyFunctions()</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument","title":"<code>Argument</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument.derefcnt","title":"<code>derefcnt: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function","title":"<code>Function</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.args","title":"<code>args: List[Argument]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.derefcnt","title":"<code>derefcnt: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.LazyFunctions","title":"<code>LazyFunctions</code>","text":"<p>               Bases: <code>Mapping[str, Function]</code></p>"},{"location":"source/lib/functions/#pwndbg.lib.functions.LazyFunctions.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.LazyFunctions.__init__","title":"<code>__init__(*args, **kw)</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.LazyFunctions.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.LazyFunctions.__len__","title":"<code>__len__()</code>","text":""},{"location":"source/lib/functions_data/","title":"Functions data","text":""},{"location":"source/lib/functions_data/#pwndbg.lib.functions_data.load_functions","title":"<code>load_functions()</code>","text":""},{"location":"source/lib/gcc/","title":"Gcc","text":"<p>Functions for determining the architecture-dependent path to GCC and any flags it should be executed with.</p>"},{"location":"source/lib/gcc/#pwndbg.lib.gcc.printed_message","title":"<code>printed_message = False</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/gcc/#pwndbg.lib.gcc.which","title":"<code>which(arch)</code>","text":""},{"location":"source/lib/memory/","title":"Memory","text":"<p>Reading, writing, and describing memory.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.PAGE_MASK","title":"<code>PAGE_MASK = ~PAGE_SIZE - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.PAGE_SIZE","title":"<code>PAGE_SIZE = 4096</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.align_down","title":"<code>align_down = round_down</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.align_up","title":"<code>align_up = round_up</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page","title":"<code>Page</code>","text":"<p>Represents the address space and page permissions of at least one page of memory.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.end","title":"<code>end: int</code>  <code>property</code>","text":"<p>Address beyond mapping. So the last effective address is self.end-1 It is the same as displayed in /proc//maps"},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.execute","title":"<code>execute: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.flags","title":"<code>flags = flags</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.is_guard","title":"<code>is_guard: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.is_memory_mapped_file","title":"<code>is_memory_mapped_file: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.is_stack","title":"<code>is_stack: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.memsz","title":"<code>memsz = size</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.objfile","title":"<code>objfile = objfile</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.offset","title":"<code>offset = offset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.permstr","title":"<code>permstr: str</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.read","title":"<code>read: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.rw","title":"<code>rw: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.rwx","title":"<code>rwx: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.start","title":"<code>start: int</code>  <code>property</code>","text":"<p>Mapping start address.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.vaddr","title":"<code>vaddr = start</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.write","title":"<code>write: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.wx","title":"<code>wx: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__contains__","title":"<code>__contains__(addr)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__init__","title":"<code>__init__(start, size, flags, offset, objfile='')</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__lt__","title":"<code>__lt__(other)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.page_align","title":"<code>page_align(address)</code>","text":"<p>page_align(address) -&gt; int</p> <p>Round down <code>address</code> to the nearest page boundary.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.page_offset","title":"<code>page_offset(address)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.page_size_align","title":"<code>page_size_align(address)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.round_down","title":"<code>round_down(address, align)</code>","text":"<p>round_down(address, align) -&gt; int</p> <p>Round down <code>address</code> to the nearest increment of <code>align</code>.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.round_up","title":"<code>round_up(address, align)</code>","text":"<p>round_up(address, align) -&gt; int</p> <p>Round up <code>address</code> to the nearest increment of <code>align</code>.</p>"},{"location":"source/lib/net/","title":"Net","text":"<p>Re-implements some psutil functionality to be able to get information from remote debugging sessions.</p>"},{"location":"source/lib/net/#pwndbg.lib.net.NETLINK_TYPES","title":"<code>NETLINK_TYPES = {0: 'NETLINK_ROUTE', 1: 'NETLINK_UNUSED', 2: 'NETLINK_USERSOCK', 3: 'NETLINK_FIREWALL', 4: 'NETLINK_SOCK_DIAG', 5: 'NETLINK_NFLOG', 6: 'NETLINK_XFRM', 7: 'NETLINK_SELINUX', 8: 'NETLINK_ISCSI', 9: 'NETLINK_AUDIT', 10: 'NETLINK_FIB_LOOKUP', 11: 'NETLINK_CONNECTOR', 12: 'NETLINK_NETFILTER', 13: 'NETLINK_IP6_FW', 14: 'NETLINK_DNRTMSG', 15: 'NETLINK_KOBJECT_UEVENT', 16: 'NETLINK_GENERIC', 18: 'NETLINK_SCSITRANSPORT', 19: 'NETLINK_ECRYPTFS', 20: 'NETLINK_RDMA', 21: 'NETLINK_CRYPTO'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.TCP_STATUSES","title":"<code>TCP_STATUSES = {'01': 'established', '02': 'syn_sent', '03': 'syn_recv', '04': 'fin_wait1', '05': 'fin_wait2', '06': 'time_wait', '07': 'close', '08': 'close_wait', '09': 'last_ack', '0A': 'listen', '0B': 'closing'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection","title":"<code>Connection</code>","text":"<p>               Bases: <code>inode</code></p>"},{"location":"source/lib/net/#pwndbg.lib.net.Connection.family","title":"<code>family: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.inode","title":"<code>inode: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.lhost","title":"<code>lhost: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.lport","title":"<code>lport: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.rhost","title":"<code>rhost: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.rport","title":"<code>rport: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.status","title":"<code>status: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink","title":"<code>Netlink</code>","text":"<p>               Bases: <code>inode</code></p>"},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.eth","title":"<code>eth: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.pid","title":"<code>pid: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket","title":"<code>UnixSocket</code>","text":"<p>               Bases: <code>inode</code></p>"},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket.path","title":"<code>path = '(anonymous)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.inode","title":"<code>inode</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.inode.inode","title":"<code>inode: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.netlink","title":"<code>netlink(data)</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.tcp","title":"<code>tcp(data)</code>","text":"<p>It will first list all listening TCP sockets, and next list all established TCP connections. A typical entry of /proc/net/tcp would look like this (split up into 3 parts because of the length of the line):</p>"},{"location":"source/lib/net/#pwndbg.lib.net.unix","title":"<code>unix(data)</code>","text":""},{"location":"source/lib/regs/","title":"Regs","text":"<p>Reading register value from the inferior, and provides a standardized interface to registers like \"sp\" and \"pc\".</p>"},{"location":"source/lib/regs/#pwndbg.lib.regs.BitFlags","title":"<code>BitFlags = OrderedDict[str, Union[int, Tuple[int, int]]]</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64","title":"<code>aarch64 = RegisterSet(retaddr=('lr'), flags={'cpsr': aarch64_cpsr_flags}, extra_flags={'scr_el3': aarch64_scr_flags, 'sctlr': aarch64_sctlr_flags, 'sctlr_el2': aarch64_sctlr_flags, 'sctlr_el3': aarch64_sctlr_flags, 'spsr_el1': aarch64_cpsr_flags, 'spsr_el2': aarch64_cpsr_flags, 'spsr_el3': aarch64_cpsr_flags}, gpr=('x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x29'), misc=('w0', 'w1', 'w2', 'w3', 'w4', 'w5', 'w6', 'w7', 'w8', 'w9', 'w10', 'w11', 'w12', 'w13', 'w14', 'w15', 'w16', 'w17', 'w18', 'w19', 'w20', 'w21', 'w22', 'w23', 'w24', 'w25', 'w26', 'w27', 'w28'), args=('x0', 'x1', 'x2', 'x3'), retval='x0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64_cpsr_flags","title":"<code>aarch64_cpsr_flags = BitFlags([('N', 31), ('Z', 30), ('C', 29), ('V', 28), ('Q', 27), ('PAN', 22), ('IL', 20), ('D', 9), ('A', 8), ('I', 7), ('F', 6), ('EL', (2, 2)), ('SP', 0)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64_scr_flags","title":"<code>aarch64_scr_flags = BitFlags([('HCE', 8), ('SMD', 7), ('EA', 3), ('FIQ', 2), ('IRQ', 1), ('NS', 0)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64_sctlr_flags","title":"<code>aarch64_sctlr_flags = BitFlags([('TIDCP', 63), ('SPINTMASK', 62), ('NMI', 61), ('EPAN', 57), ('ATA0', 43), ('ATA0', 42), ('TCF', (40, 2)), ('TCF0', (38, 2)), ('ITFSB', 37), ('BT1', 36), ('BT0', 35), ('EnIA', 31), ('EnIB', 30), ('EnDA', 27), ('UCI', 26), ('EE', 25), ('E0E', 24), ('SPAN', 23), ('TSCXT', 20), ('WXN', 19), ('nTWE', 18), ('nTWI', 16), ('UCT', 15), ('DZE', 14), ('EnDB', 13), ('I', 12), ('UMA', 9), ('SED', 8), ('ITD', 7), ('nAA', 6), ('CP15BEN', 5), ('SA0', 4), ('SA', 3), ('C', 2), ('A', 1), ('M', 0)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.amd64","title":"<code>amd64 = RegisterSet(pc='rip', stack='rsp', frame='rbp', flags=x86flags, gpr=('rax', 'rbx', 'rcx', 'rdx', 'rdi', 'rsi', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15'), misc=('cs', 'ss', 'ds', 'es', 'fs', 'gs', 'fsbase', 'gsbase', 'ax', 'ah', 'al', 'bx', 'bh', 'bl', 'cx', 'ch', 'cl', 'dx', 'dh', 'dl', 'dil', 'sil', 'spl', 'bpl', 'di', 'si', 'bp', 'sp', 'ip'), args=('rdi', 'rsi', 'rdx', 'rcx', 'r8', 'r9'), retval='rax')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.arm","title":"<code>arm = RegisterSet(retaddr=('lr'), flags={'cpsr': arm_cpsr_flags}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12'), args=('r0', 'r1', 'r2', 'r3'), retval='r0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.arm_cpsr_flags","title":"<code>arm_cpsr_flags = BitFlags([('N', 31), ('Z', 30), ('C', 29), ('V', 28), ('Q', 27), ('J', 24), ('T', 5), ('E', 9), ('A', 8), ('I', 7), ('F', 6)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.arm_xpsr_flags","title":"<code>arm_xpsr_flags = BitFlags([('N', 31), ('Z', 30), ('C', 29), ('V', 28), ('Q', 27), ('T', 24)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.armcm","title":"<code>armcm = RegisterSet(retaddr=('lr'), flags={'xpsr': arm_xpsr_flags}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12'), args=('r0', 'r1', 'r2', 'r3'), retval='r0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.i386","title":"<code>i386 = RegisterSet(pc='eip', stack='esp', frame='ebp', flags=x86flags, gpr=('eax', 'ebx', 'ecx', 'edx', 'edi', 'esi'), misc=('cs', 'ss', 'ds', 'es', 'fs', 'gs', 'fsbase', 'gsbase', 'ax', 'ah', 'al', 'bx', 'bh', 'bl', 'cx', 'ch', 'cl', 'dx', 'dh', 'dl', 'di', 'si', 'bp', 'sp', 'ip'), retval='eax')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.iwmmxt","title":"<code>iwmmxt = RegisterSet(retaddr=('lr'), flags={'cpsr': arm_cpsr_flags}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12'), args=('r0', 'r1', 'r2', 'r3'), retval='r0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.mips","title":"<code>mips = RegisterSet(frame='fp', retaddr=('ra'), gpr=('v0', 'v1', 'a0', 'a1', 'a2', 'a3', 't0', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8', 't9', 's0', 's1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 'gp'), args=('a0', 'a1', 'a2', 'a3'), retval='v0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.powerpc","title":"<code>powerpc = RegisterSet(retaddr=('lr'), flags={'msr': BitFlags(), 'xer': BitFlags()}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31', 'cr', 'ctr'), args=('r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10'), retval='r3')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.reg_sets","title":"<code>reg_sets = {'i386': i386, 'i8086': i386, 'x86-64': amd64, 'rv32': riscv, 'rv64': riscv, 'mips': mips, 'sparc': sparc, 'arm': arm, 'iwmmxt': iwmmxt, 'armcm': armcm, 'aarch64': aarch64, 'powerpc': powerpc}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.riscv","title":"<code>riscv = RegisterSet(pc='pc', stack='sp', retaddr=('ra'), gpr=('gp', 'tp', 't0', 't1', 't2', 's0', 's1', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11', 't3', 't4', 't5', 't6'), args=('a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'), retval='a0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.sparc","title":"<code>sparc = RegisterSet(stack='sp', frame='fp', retaddr=('i7'), flags={'psr': BitFlags()}, gpr=('g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'o0', 'o1', 'o2', 'o3', 'o4', 'o5', 'o7', 'l0', 'l1', 'l2', 'l3', 'l4', 'l5', 'l6', 'l7', 'i0', 'i1', 'i2', 'i3', 'i4', 'i5'), args=('i0', 'i1', 'i2', 'i3', 'i4', 'i5'), retval='o0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.x86flags","title":"<code>x86flags = {'eflags': BitFlags([('CF', 0), ('PF', 2), ('AF', 4), ('ZF', 6), ('SF', 7), ('IF', 9), ('DF', 10), ('OF', 11)])}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet","title":"<code>RegisterSet</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.all","title":"<code>all: Set[str] = set(misc) | set(flags) | set(extra_flags) | set(self.retaddr) | set(self.common)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.args","title":"<code>args: Tuple[str, ...] = args</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.common","title":"<code>common: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.emulated_regs_order","title":"<code>emulated_regs_order: List[str] = []</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.extra_flags","title":"<code>extra_flags = extra_flags</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.flags","title":"<code>flags: Dict[str, BitFlags] = flags</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.frame","title":"<code>frame: str | None = frame</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.gpr","title":"<code>gpr: Tuple[str, ...] = gpr</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.misc","title":"<code>misc: Tuple[str, ...] = misc</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.pc","title":"<code>pc: str = pc</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.retaddr","title":"<code>retaddr: Tuple[str, ...] = retaddr</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.retval","title":"<code>retval: str | None = retval</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.stack","title":"<code>stack: str = stack</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.__init__","title":"<code>__init__(pc='pc', stack='sp', frame=None, retaddr=(), flags={}, extra_flags={}, gpr=(), misc=(), args=(), retval=None)</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/lib/stdio/","title":"Stdio","text":"<p>Provides functionality to circumvent GDB's hooks on sys.stdin and sys.stdout which prevent output from appearing on-screen inside of certain event handlers.</p>"},{"location":"source/lib/stdio/#pwndbg.lib.stdio.stdio","title":"<code>stdio = Stdio()</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio","title":"<code>Stdio</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio.queue","title":"<code>queue: List[Tuple[TextIO, TextIO, TextIO]] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio.__enter__","title":"<code>__enter__(*a, **kw)</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":""},{"location":"source/lib/strings/","title":"Strings","text":""},{"location":"source/lib/strings/#pwndbg.lib.strings.strip_colors","title":"<code>strip_colors(text)</code>","text":"<p>Remove all ANSI color codes from the text</p>"},{"location":"source/lib/tempfile/","title":"Tempfile","text":"<p>Common helper and cache for pwndbg tempdir</p>"},{"location":"source/lib/tempfile/#pwndbg.lib.tempfile.cachedir","title":"<code>cachedir(namespace=None)</code>","text":"<p>Returns and potentially creates a persistent safe cachedir location based on XDG_CACHE_HOME or ~/.cache</p> <p>Optionally creates a sub namespace inside the pwndbg cache folder.</p>"},{"location":"source/lib/tempfile/#pwndbg.lib.tempfile.tempdir","title":"<code>tempdir()</code>","text":"<p>Returns a safe and unpredictable temporary directory with pwndbg prefix.</p>"},{"location":"source/lib/tips/","title":"Tips","text":""},{"location":"source/lib/tips/#pwndbg.lib.tips.TIPS","title":"<code>TIPS: List[str] = [\"GDB's `apropos &lt;topic&gt;` command displays all registered commands that are related to the given &lt;topic&gt;\", \"GDB's `follow-fork-mode` parameter can be used to set whether to trace parent or child after fork() calls. Pwndbg sets it to child by default\", 'Use GDB\\'s `dprintf` command to print all calls to given function. E.g. `dprintf malloc, \"malloc(%p)\\\\n\", (void*)$rdi` will print all malloc calls', \"Use GDB's `pi` command to run an interactive Python console where you can use Pwndbg APIs like `pwndbg.aglib.memory.read(addr, len)`, `pwndbg.aglib.memory.write(addr, data)`, `pwndbg.aglib.vmmap.get()` and so on!\", \"GDB's `set directories &lt;path&gt;` parameter can be used to debug e.g. glibc sources like the malloc/free functions!\", \"If you have debugging symbols the `info args` command shows current frame's function arguments (use `up` and `down` to switch between frames)\", 'Calling functions like `call (void)puts(\"hello world\")` will run all other target threads for the time the function runs. Use `set scheduler-locking on` to lock the execution to current thread when calling functions', 'If you want Pwndbg to clear screen on each command (but still save previous output in history) use `set context-clear-screen on`', 'The `set show-flags on` setting will display CPU flags register in the regs context panel', 'GDB and Pwndbg parameters can be shown or set with `show &lt;param&gt;` and `set &lt;param&gt; &lt;value&gt;` GDB commands', \"Use Pwndbg's `config` and `theme` commands to tune its configuration and theme colors!\", 'Pwndbg mirrors some of Windbg commands like `eq`, `ew`, `ed`, `eb`, `es`, `dq`, `dw`, `dd`, `db`, `ds` for writing and reading memory', 'Pwndbg resolves kernel memory maps by parsing page tables (default) or via `monitor info mem` QEMU gdbstub command (use `set kernel-vmmap-via-page-tables off` for that)', \"Use the `vmmap` command for a better &amp; colored memory maps display (than the GDB's `info proc mappings`)\", 'Use the `telescope` command to dereference a given address/pointer multiple times (if the dereferenced value is a valid ptr; see `config telescope` to configure its behavior)', 'Use the `context` (or `ctx`) command to display the context once again. You can reconfigure the context layout with `set context-section &lt;sections&gt;` or forward the output to a file/tty via `set context-output &lt;file&gt;`. See also `config context` to configure it further!', \"Disable Pwndbg context information display with `set context-sections ''`\", 'Pwndbg context displays where the program branches to thanks to emulating few instructions into the future. You can disable this with `set emulate off` which may also speed up debugging', 'Use the `canary` command to see all stack canary/cookie values on the stack (based on the *usual* stack canary value initialized by glibc)', \"Use the `procinfo` command for better process introspection (than the GDB's `info proc` command)\", 'Want to display each context panel in a separate tmux window? See https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md#splitting--layouting-context', 'Use `$base(\"heap\")` to get the start address of a [heap] memory page', 'Use the `errno` (or `errno &lt;number&gt;`) command to see the name of the last or provided (libc) error', 'Pwndbg sets the SIGLARM, SIGBUS, SIGPIPE and SIGSEGV signals so they are not passed to the app; see `info signals` for full GDB signals configuration', 'Use `vmmap -A|-B &lt;number&gt; &lt;filter&gt;` to display &lt;number&gt; of maps after/before filtered ones', 'Use the `killall` command to kill all specified threads (via their ids)', 'Use the `spray` command to spray memory with cyclic pattern or specified value', \"Use `patch &lt;address&gt; '&lt;assembly&gt;'` to patch an address with given assembly code\", \"Want to NOP some instructions? Use `patch &lt;address&gt; 'nop; nop; nop'`\", '`heap_config` shows heap related configuration', '`break-if-taken` and `break-if-not-taken` commands sets breakpoints after a given jump instruction was taken or not', '`stepuntilasm &lt;assembly-instruction [operands]&gt;` steps program forward until matching instruction occures', 'Use `plist` command to dump elements of linked list', 'If your program has multiple threads they will be displayed in the context display or using the `context threads` command', 'Use `track-got enable|info|query` to track GOT accesses - useful for hijacking control flow via writable GOT/PLT', 'Need to `mmap` or `mprotect` memory in the debugee? Use commands with the same name to inject and run such syscalls', 'Use `hi` to see if a an address belongs to a glibc heap chunk', 'Use `contextprev` and `contextnext` to display a previous context output again without scrolling', 'Try splitting the context output into multiple TUI windows using `layout pwndbg` (`tui disable` or `ctrl-x + a` to go back to CLI mode)']</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/tips/#pwndbg.lib.tips.color_tip","title":"<code>color_tip(tip)</code>","text":""},{"location":"source/lib/tips/#pwndbg.lib.tips.get_tip_of_the_day","title":"<code>get_tip_of_the_day()</code>","text":""},{"location":"source/lib/version/","title":"Version","text":""},{"location":"source/lib/version/#pwndbg.lib.version.__version__","title":"<code>__version__ = '2025.01.20'</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/version/#pwndbg.lib.version.b_id","title":"<code>b_id = build_id()</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/version/#pwndbg.lib.version.build_id","title":"<code>build_id()</code>","text":"<p>Returns pwndbg commit id if git is available.</p>"},{"location":"source/lib/which/","title":"Which","text":""},{"location":"source/lib/which/#pwndbg.lib.which.which","title":"<code>which(name, all=False)</code>","text":"<p>which(name, flags = os.X_OK, all = False) -&gt; str or str set</p> <p>Works as the system command <code>which</code>; searches $PATH for <code>name</code> and returns a full path if found.</p> <p>If <code>all</code> is :const:<code>True</code> the set of all found locations is returned, else the first occurrence or :const:<code>None</code> is returned.</p> <p>Parameters:</p> Name Type Description Default <code>`name`</code> <code>str</code> <p>The file to search for.</p> required <code>`all`</code> <code>bool</code> <p>Whether to return all locations where <code>name</code> was found.</p> required <p>Returns:</p> Type Description <code>Set[str] | str | None</code> <p>If <code>all</code> is :const:<code>True</code> the set of all locations where <code>name</code> was found,</p> <code>Set[str] | str | None</code> <p>else the first location or :const:<code>None</code> if not found.</p> Example <p>which('sh') '/bin/sh'</p>"},{"location":"source/lib/disasm/__init__/","title":"init","text":""},{"location":"source/lib/disasm/helpers/","title":"Helpers","text":""},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.arithmetic_shift_right","title":"<code>arithmetic_shift_right(n, shift_amt, bit_width)</code>","text":"<p>This returns the value represented by the two's-complement binary representation of the final result. This means the result could be negative (if the top bit of the input is negative)</p> <p><code>n</code> is truncated to the width of <code>bit_width</code> before the operation takes place.</p>"},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.logical_shift_left","title":"<code>logical_shift_left(n, shift_amt, bit_width)</code>","text":""},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.logical_shift_right","title":"<code>logical_shift_right(n, shift_amt, bit_width)</code>","text":"<p><code>n</code> is truncated to the width of <code>bit_width</code> before the operation takes place.</p>"},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.rotate_right","title":"<code>rotate_right(n, shift_amt, bit_width)</code>","text":"<p><code>n</code> is truncated to the width of <code>bit_width</code> before the operation takes place.</p>"},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.to_signed","title":"<code>to_signed(unsigned, bit_width)</code>","text":"<p>Returns the signed number associated with the two's-complement binary representation of <code>unsigned</code></p>"},{"location":"source/lib/heap/__init__/","title":"init","text":""},{"location":"source/lib/heap/helpers/","title":"Helpers","text":""},{"location":"source/lib/heap/helpers/#pwndbg.lib.heap.helpers.find_fastbin_size","title":"<code>find_fastbin_size(mem, max_size, step)</code>","text":""},{"location":"source/wrappers/__init__/","title":"init","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand","title":"<code>OnlyWithCommand</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.all_cmds","title":"<code>all_cmds: List[str] = [cmd[0] if isinstance(cmd, list) else cmd for cmd in commands]</code>  <code>instance-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.cmd","title":"<code>cmd: List[str] = command if isinstance(command, list) else [command]</code>  <code>instance-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.cmd_path","title":"<code>cmd_path: str | None = which(self.cmd[0])</code>  <code>instance-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.__call__","title":"<code>__call__(function)</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.__init__","title":"<code>__init__(*commands)</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.call_cmd","title":"<code>call_cmd(cmd)</code>","text":""},{"location":"source/wrappers/checksec/","title":"Checksec","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.get_raw_out","title":"<code>get_raw_out(local_path)</code>","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.monkeypatch_pwnlib_term_text","title":"<code>monkeypatch_pwnlib_term_text()</code>","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.pie_status","title":"<code>pie_status(local_path)</code>","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.relro_status","title":"<code>relro_status(local_path)</code>","text":""},{"location":"source/wrappers/readelf/","title":"Readelf","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.cmd_name","title":"<code>cmd_name = 'readelf'</code>  <code>module-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType","title":"<code>RelocationType</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType.GLOB_DAT","title":"<code>GLOB_DAT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType.IRELATIVE","title":"<code>IRELATIVE = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType.JUMP_SLOT","title":"<code>JUMP_SLOT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.get_got_entry","title":"<code>get_got_entry(local_path)</code>","text":""},{"location":"blog/archive/2022/","title":"2022","text":""}]}